{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9858ebb4",
   "metadata": {},
   "source": [
    "# Calculate total cost of goods needed- Section 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "407e65de",
   "metadata": {},
   "source": [
    "## import the data for the suppliers, demand and recipes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0cc52f98",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4656f491",
   "metadata": {},
   "outputs": [],
   "source": [
    "suppliers = pd.read_csv(\"https://www.dropbox.com/s/jjbacrux6bc1b4s/suppliers.csv?dl=1\")\n",
    "demand = pd.read_csv(\"https://www.dropbox.com/s/0yikq3pugq87vl9/demand_forecasts.csv?dl=1\")\n",
    "recipes = pd.read_csv(\"https://www.dropbox.com/s/az97voeh6i8x3i2/recipes.csv?dl=1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dba0cc4c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>supp_id</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>france</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    supp_id ingredient_uuid  cost_per_unit unit_name country_of_origin  \\\n",
       "0  megacorp           cocoa         2500.0     tonne             ghana   \n",
       "1  megacorp     milk_powder         3200.0     tonne            france   \n",
       "\n",
       "   total_tax_per_unit  time_to_deliver  \n",
       "0                  14               12  \n",
       "1                  12                3  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suppliers.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "750ddbc4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>supp_id</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3200.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>france</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>1918.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>turkey</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>sugar</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>italy</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>sugar</td>\n",
       "      <td>465.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>india</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>2370.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3190.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>denmark</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>1817.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>usa</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>sugar</td>\n",
       "      <td>476.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     supp_id ingredient_uuid  cost_per_unit unit_name country_of_origin  \\\n",
       "0   megacorp           cocoa         2500.0     tonne             ghana   \n",
       "1   megacorp     milk_powder         3200.0     tonne            france   \n",
       "2   megacorp        hazelnut         1918.0     tonne            turkey   \n",
       "3   megacorp           sugar          457.0     tonne            brazil   \n",
       "4   megacorp         vanilla          237.0     tonne             china   \n",
       "5   omni_inc           cocoa         2400.0     tonne     cote d'ivoire   \n",
       "6   omni_inc     milk_powder         3120.0     tonne       switzerland   \n",
       "7   omni_inc        hazelnut         1925.0     tonne             italy   \n",
       "8   omni_inc           sugar          465.0     tonne             india   \n",
       "9   omni_inc         vanilla          201.0     tonne         indonesia   \n",
       "10  acme_inc           cocoa         2370.0     tonne         indonesia   \n",
       "11  acme_inc     milk_powder         3190.0     tonne           denmark   \n",
       "12  acme_inc        hazelnut         1817.0     tonne               usa   \n",
       "13  acme_inc           sugar          476.0     tonne             china   \n",
       "14  acme_inc         vanilla          185.0     tonne        madagascar   \n",
       "\n",
       "    total_tax_per_unit  time_to_deliver  \n",
       "0                   14               12  \n",
       "1                   12                3  \n",
       "2                   12                4  \n",
       "3                    5                9  \n",
       "4                    3               10  \n",
       "5                   14               12  \n",
       "6                    0                2  \n",
       "7                   12                3  \n",
       "8                    5               12  \n",
       "9                    3               12  \n",
       "10                  14               12  \n",
       "11                  12                3  \n",
       "12                  12                8  \n",
       "13                   5               10  \n",
       "14                   3               12  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suppliers.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c27a461e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>mar</td>\n",
       "      <td>19727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>apr</td>\n",
       "      <td>10368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>may</td>\n",
       "      <td>15125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>jun</td>\n",
       "      <td>18413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>jul</td>\n",
       "      <td>17442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>aug</td>\n",
       "      <td>19986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>sep</td>\n",
       "      <td>15302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>oct</td>\n",
       "      <td>13637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>nov</td>\n",
       "      <td>16877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>dec</td>\n",
       "      <td>15290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2</td>\n",
       "      <td>jan</td>\n",
       "      <td>14779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2</td>\n",
       "      <td>feb</td>\n",
       "      <td>14568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2</td>\n",
       "      <td>mar</td>\n",
       "      <td>11552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2</td>\n",
       "      <td>apr</td>\n",
       "      <td>10552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2</td>\n",
       "      <td>may</td>\n",
       "      <td>13765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2</td>\n",
       "      <td>jun</td>\n",
       "      <td>14758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2</td>\n",
       "      <td>jul</td>\n",
       "      <td>11285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2</td>\n",
       "      <td>aug</td>\n",
       "      <td>10799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2</td>\n",
       "      <td>sep</td>\n",
       "      <td>13370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2</td>\n",
       "      <td>oct</td>\n",
       "      <td>13686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2</td>\n",
       "      <td>nov</td>\n",
       "      <td>11628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2</td>\n",
       "      <td>dec</td>\n",
       "      <td>11724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>3</td>\n",
       "      <td>jan</td>\n",
       "      <td>12356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3</td>\n",
       "      <td>feb</td>\n",
       "      <td>14191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>3</td>\n",
       "      <td>mar</td>\n",
       "      <td>10613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>3</td>\n",
       "      <td>apr</td>\n",
       "      <td>10261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>3</td>\n",
       "      <td>may</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3</td>\n",
       "      <td>jun</td>\n",
       "      <td>16552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>3</td>\n",
       "      <td>jul</td>\n",
       "      <td>12428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>3</td>\n",
       "      <td>aug</td>\n",
       "      <td>19101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>3</td>\n",
       "      <td>sep</td>\n",
       "      <td>10577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>3</td>\n",
       "      <td>oct</td>\n",
       "      <td>10309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    rec_id month  demand\n",
       "0        1   jan   16443\n",
       "1        1   feb   18943\n",
       "2        1   mar   19727\n",
       "3        1   apr   10368\n",
       "4        1   may   15125\n",
       "5        1   jun   18413\n",
       "6        1   jul   17442\n",
       "7        1   aug   19986\n",
       "8        1   sep   15302\n",
       "9        1   oct   13637\n",
       "10       1   nov   16877\n",
       "11       1   dec   15290\n",
       "12       2   jan   14779\n",
       "13       2   feb   14568\n",
       "14       2   mar   11552\n",
       "15       2   apr   10552\n",
       "16       2   may   13765\n",
       "17       2   jun   14758\n",
       "18       2   jul   11285\n",
       "19       2   aug   10799\n",
       "20       2   sep   13370\n",
       "21       2   oct   13686\n",
       "22       2   nov   11628\n",
       "23       2   dec   11724\n",
       "24       3   jan   12356\n",
       "25       3   feb   14191\n",
       "26       3   mar   10613\n",
       "27       3   apr   10261\n",
       "28       3   may   10111\n",
       "29       3   jun   16552\n",
       "30       3   jul   12428\n",
       "31       3   aug   19101\n",
       "32       3   sep   10577\n",
       "33       3   oct   10309\n",
       "34       3   nov   15003\n",
       "35       3   dec   13065"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a3c3fda4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    rec_id ingredient_uuid  cost_to_process  time_to_process  qty\n",
       "0        1           cocoa             0.20              120   13\n",
       "1        1     milk_powder             0.03              110   12\n",
       "2        1        hazelnut             0.08               45    4\n",
       "3        1           sugar             0.40               80    5\n",
       "4        2         vanilla             0.10               34    3\n",
       "5        2           cocoa             0.20              120   12\n",
       "6        2     milk_powder             0.03              110   11\n",
       "7        2           sugar             0.40               80    4\n",
       "8        3        hazelnut             0.08               45    3\n",
       "9        3         vanilla             0.10               34    2\n",
       "10       3           cocoa             0.20              120   12\n",
       "11       3     milk_powder             0.03               11   12\n",
       "12       3           sugar             0.40               80    4"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recipes "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96530693",
   "metadata": {},
   "source": [
    "## calculate the cheapest supplier for each ingredient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "663b7ba6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "0         1   jan   16443           cocoa             0.20              120   \n",
       "1         1   jan   16443     milk_powder             0.03              110   \n",
       "2         1   jan   16443        hazelnut             0.08               45   \n",
       "3         1   jan   16443           sugar             0.40               80   \n",
       "4         1   feb   18943           cocoa             0.20              120   \n",
       "..      ...   ...     ...             ...              ...              ...   \n",
       "151       3   dec   13065        hazelnut             0.08               45   \n",
       "152       3   dec   13065         vanilla             0.10               34   \n",
       "153       3   dec   13065           cocoa             0.20              120   \n",
       "154       3   dec   13065     milk_powder             0.03               11   \n",
       "155       3   dec   13065           sugar             0.40               80   \n",
       "\n",
       "     qty  \n",
       "0     13  \n",
       "1     12  \n",
       "2      4  \n",
       "3      5  \n",
       "4     13  \n",
       "..   ...  \n",
       "151    3  \n",
       "152    2  \n",
       "153   12  \n",
       "154   12  \n",
       "155    4  \n",
       "\n",
       "[156 rows x 7 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rec_dem= demand.merge(recipes, on='rec_id', how='inner')\n",
    "rec_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "335cf3ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>demand_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>12</td>\n",
       "      <td>197316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>65772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>5</td>\n",
       "      <td>82215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>39195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>156780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>156780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "      <td>52260</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "0         1   jan   16443           cocoa             0.20              120   \n",
       "1         1   jan   16443     milk_powder             0.03              110   \n",
       "2         1   jan   16443        hazelnut             0.08               45   \n",
       "3         1   jan   16443           sugar             0.40               80   \n",
       "4         1   feb   18943           cocoa             0.20              120   \n",
       "..      ...   ...     ...             ...              ...              ...   \n",
       "151       3   dec   13065        hazelnut             0.08               45   \n",
       "152       3   dec   13065         vanilla             0.10               34   \n",
       "153       3   dec   13065           cocoa             0.20              120   \n",
       "154       3   dec   13065     milk_powder             0.03               11   \n",
       "155       3   dec   13065           sugar             0.40               80   \n",
       "\n",
       "     qty  demand_qty  \n",
       "0     13      213759  \n",
       "1     12      197316  \n",
       "2      4       65772  \n",
       "3      5       82215  \n",
       "4     13      246259  \n",
       "..   ...         ...  \n",
       "151    3       39195  \n",
       "152    2       26130  \n",
       "153   12      156780  \n",
       "154   12      156780  \n",
       "155    4       52260  \n",
       "\n",
       "[156 rows x 8 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rec_dem['demand_qty']= rec_dem['demand']*rec_dem['qty']\n",
    "rec_dem=rec_dem.dropna()\n",
    "rec_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7ebc4703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>demand_qty</th>\n",
       "      <th>supp_id</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>2370.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>465</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>468 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "0         1   jan   16443           cocoa              0.2              120   \n",
       "1         1   jan   16443           cocoa              0.2              120   \n",
       "2         1   jan   16443           cocoa              0.2              120   \n",
       "3         1   feb   18943           cocoa              0.2              120   \n",
       "4         1   feb   18943           cocoa              0.2              120   \n",
       "..      ...   ...     ...             ...              ...              ...   \n",
       "463       3   nov   15003         vanilla              0.1               34   \n",
       "464       3   nov   15003         vanilla              0.1               34   \n",
       "465       3   dec   13065         vanilla              0.1               34   \n",
       "466       3   dec   13065         vanilla              0.1               34   \n",
       "467       3   dec   13065         vanilla              0.1               34   \n",
       "\n",
       "     qty  demand_qty   supp_id  cost_per_unit unit_name country_of_origin  \\\n",
       "0     13      213759  megacorp         2500.0     tonne             ghana   \n",
       "1     13      213759  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "2     13      213759  acme_inc         2370.0     tonne         indonesia   \n",
       "3     13      246259  megacorp         2500.0     tonne             ghana   \n",
       "4     13      246259  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "..   ...         ...       ...            ...       ...               ...   \n",
       "463    2       30006  omni_inc          201.0     tonne         indonesia   \n",
       "464    2       30006  acme_inc          185.0     tonne        madagascar   \n",
       "465    2       26130  megacorp          237.0     tonne             china   \n",
       "466    2       26130  omni_inc          201.0     tonne         indonesia   \n",
       "467    2       26130  acme_inc          185.0     tonne        madagascar   \n",
       "\n",
       "     total_tax_per_unit  time_to_deliver  \n",
       "0                    14               12  \n",
       "1                    14               12  \n",
       "2                    14               12  \n",
       "3                    14               12  \n",
       "4                    14               12  \n",
       "..                  ...              ...  \n",
       "463                   3               12  \n",
       "464                   3               12  \n",
       "465                   3               10  \n",
       "466                   3               12  \n",
       "467                   3               12  \n",
       "\n",
       "[468 rows x 14 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw= rec_dem.merge(suppliers, on='ingredient_uuid', how='inner')\n",
    "raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "225c65f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>demand_qty</th>\n",
       "      <th>supp_id</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "      <th>cost_demand_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>534397500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>513021600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>2370.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>506608830.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>615647500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>591021600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>6031206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>5551110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>465</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>6192810.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>5252130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>4834050.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>468 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "0         1   jan   16443           cocoa              0.2              120   \n",
       "1         1   jan   16443           cocoa              0.2              120   \n",
       "2         1   jan   16443           cocoa              0.2              120   \n",
       "3         1   feb   18943           cocoa              0.2              120   \n",
       "4         1   feb   18943           cocoa              0.2              120   \n",
       "..      ...   ...     ...             ...              ...              ...   \n",
       "463       3   nov   15003         vanilla              0.1               34   \n",
       "464       3   nov   15003         vanilla              0.1               34   \n",
       "465       3   dec   13065         vanilla              0.1               34   \n",
       "466       3   dec   13065         vanilla              0.1               34   \n",
       "467       3   dec   13065         vanilla              0.1               34   \n",
       "\n",
       "     qty  demand_qty   supp_id  cost_per_unit unit_name country_of_origin  \\\n",
       "0     13      213759  megacorp         2500.0     tonne             ghana   \n",
       "1     13      213759  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "2     13      213759  acme_inc         2370.0     tonne         indonesia   \n",
       "3     13      246259  megacorp         2500.0     tonne             ghana   \n",
       "4     13      246259  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "..   ...         ...       ...            ...       ...               ...   \n",
       "463    2       30006  omni_inc          201.0     tonne         indonesia   \n",
       "464    2       30006  acme_inc          185.0     tonne        madagascar   \n",
       "465    2       26130  megacorp          237.0     tonne             china   \n",
       "466    2       26130  omni_inc          201.0     tonne         indonesia   \n",
       "467    2       26130  acme_inc          185.0     tonne        madagascar   \n",
       "\n",
       "     total_tax_per_unit  time_to_deliver  cost_demand_qty  \n",
       "0                    14               12      534397500.0  \n",
       "1                    14               12      513021600.0  \n",
       "2                    14               12      506608830.0  \n",
       "3                    14               12      615647500.0  \n",
       "4                    14               12      591021600.0  \n",
       "..                  ...              ...              ...  \n",
       "463                   3               12        6031206.0  \n",
       "464                   3               12        5551110.0  \n",
       "465                   3               10        6192810.0  \n",
       "466                   3               12        5252130.0  \n",
       "467                   3               12        4834050.0  \n",
       "\n",
       "[468 rows x 15 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw['cost_demand_qty']= raw['cost_per_unit']*raw['demand_qty']\n",
    "raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "29be9db1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>demand_qty</th>\n",
       "      <th>supp_id</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "      <th>cost_demand_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>3</td>\n",
       "      <td>may</td>\n",
       "      <td>10111</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>121332</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>2370.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>287556840.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>3</td>\n",
       "      <td>may</td>\n",
       "      <td>10111</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>30333</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>1817.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>usa</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "      <td>55115061.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>2</td>\n",
       "      <td>apr</td>\n",
       "      <td>10552</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>11</td>\n",
       "      <td>116072</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>362144640.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>3</td>\n",
       "      <td>may</td>\n",
       "      <td>10111</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "      <td>40444</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>18482908.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446</th>\n",
       "      <td>3</td>\n",
       "      <td>may</td>\n",
       "      <td>10111</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>20222</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>3741070.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "86        3   may   10111           cocoa             0.20              120   \n",
       "266       3   may   10111        hazelnut             0.08               45   \n",
       "154       2   apr   10552     milk_powder             0.03              110   \n",
       "372       3   may   10111           sugar             0.40               80   \n",
       "446       3   may   10111         vanilla             0.10               34   \n",
       "\n",
       "     qty  demand_qty   supp_id  cost_per_unit unit_name country_of_origin  \\\n",
       "86    12      121332  acme_inc         2370.0     tonne         indonesia   \n",
       "266    3       30333  acme_inc         1817.0     tonne               usa   \n",
       "154   11      116072  omni_inc         3120.0     tonne       switzerland   \n",
       "372    4       40444  megacorp          457.0     tonne            brazil   \n",
       "446    2       20222  acme_inc          185.0     tonne        madagascar   \n",
       "\n",
       "     total_tax_per_unit  time_to_deliver  cost_demand_qty  \n",
       "86                   14               12      287556840.0  \n",
       "266                  12                8       55115061.0  \n",
       "154                   0                2      362144640.0  \n",
       "372                   5                9       18482908.0  \n",
       "446                   3               12        3741070.0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cheapest_supplier_igd= raw.loc[raw.groupby('ingredient_uuid')['cost_demand_qty'].idxmin()]\n",
    "cheapest_supplier_igd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcee6ed9",
   "metadata": {},
   "source": [
    "#merge the cheapest suppliers on the receipes table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bed6f265",
   "metadata": {},
   "source": [
    "#merge on the total demand of each ingredient "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e46e7dd0",
   "metadata": {},
   "source": [
    "## calculate the total cost of each supplier on demand plan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e8eb270e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>demand_qty</th>\n",
       "      <th>supp_id</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "      <th>cost_demand_qty</th>\n",
       "      <th>cost_of_dem</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>534397500.0</td>\n",
       "      <td>534397500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>513021600.0</td>\n",
       "      <td>513021600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>2370.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>506608830.0</td>\n",
       "      <td>506608830.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>615647500.0</td>\n",
       "      <td>615647500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>591021600.0</td>\n",
       "      <td>591021600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>6031206.0</td>\n",
       "      <td>6031206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>5551110.0</td>\n",
       "      <td>5551110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>465</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>6192810.0</td>\n",
       "      <td>6192810.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>5252130.0</td>\n",
       "      <td>5252130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>4834050.0</td>\n",
       "      <td>4834050.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>468 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "0         1   jan   16443           cocoa              0.2              120   \n",
       "1         1   jan   16443           cocoa              0.2              120   \n",
       "2         1   jan   16443           cocoa              0.2              120   \n",
       "3         1   feb   18943           cocoa              0.2              120   \n",
       "4         1   feb   18943           cocoa              0.2              120   \n",
       "..      ...   ...     ...             ...              ...              ...   \n",
       "463       3   nov   15003         vanilla              0.1               34   \n",
       "464       3   nov   15003         vanilla              0.1               34   \n",
       "465       3   dec   13065         vanilla              0.1               34   \n",
       "466       3   dec   13065         vanilla              0.1               34   \n",
       "467       3   dec   13065         vanilla              0.1               34   \n",
       "\n",
       "     qty  demand_qty   supp_id  cost_per_unit unit_name country_of_origin  \\\n",
       "0     13      213759  megacorp         2500.0     tonne             ghana   \n",
       "1     13      213759  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "2     13      213759  acme_inc         2370.0     tonne         indonesia   \n",
       "3     13      246259  megacorp         2500.0     tonne             ghana   \n",
       "4     13      246259  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "..   ...         ...       ...            ...       ...               ...   \n",
       "463    2       30006  omni_inc          201.0     tonne         indonesia   \n",
       "464    2       30006  acme_inc          185.0     tonne        madagascar   \n",
       "465    2       26130  megacorp          237.0     tonne             china   \n",
       "466    2       26130  omni_inc          201.0     tonne         indonesia   \n",
       "467    2       26130  acme_inc          185.0     tonne        madagascar   \n",
       "\n",
       "     total_tax_per_unit  time_to_deliver  cost_demand_qty  cost_of_dem  \n",
       "0                    14               12      534397500.0  534397500.0  \n",
       "1                    14               12      513021600.0  513021600.0  \n",
       "2                    14               12      506608830.0  506608830.0  \n",
       "3                    14               12      615647500.0  615647500.0  \n",
       "4                    14               12      591021600.0  591021600.0  \n",
       "..                  ...              ...              ...          ...  \n",
       "463                   3               12        6031206.0    6031206.0  \n",
       "464                   3               12        5551110.0    5551110.0  \n",
       "465                   3               10        6192810.0    6192810.0  \n",
       "466                   3               12        5252130.0    5252130.0  \n",
       "467                   3               12        4834050.0    4834050.0  \n",
       "\n",
       "[468 rows x 16 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw['cost_of_dem']=raw['cost_per_unit']* raw['demand_qty']\n",
    "raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "434d78f1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1793581569.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  cost_of_dem= raw.groupby('supp_id')['rec_id','cost_of_dem'].sum()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>cost_of_dem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>supp_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>acme_inc</th>\n",
       "      <td>324</td>\n",
       "      <td>3.712275e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>megacorp</th>\n",
       "      <td>324</td>\n",
       "      <td>3.811901e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>omni_inc</th>\n",
       "      <td>324</td>\n",
       "      <td>3.702046e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          rec_id   cost_of_dem\n",
       "supp_id                       \n",
       "acme_inc     324  3.712275e+10\n",
       "megacorp     324  3.811901e+10\n",
       "omni_inc     324  3.702046e+10"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_of_dem= raw.groupby('supp_id')['rec_id','cost_of_dem'].sum()\n",
    "cost_of_dem"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7f3caad",
   "metadata": {},
   "source": [
    "## calculate the total tax if satisfy the demand plan "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "46f2c889",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw['tax_demand_qty']=raw['total_tax_per_unit']*raw['demand_qty']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "28528cab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tax_demand_qty</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>supp_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>acme_inc</th>\n",
       "      <td>186793019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>megacorp</th>\n",
       "      <td>186793019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>omni_inc</th>\n",
       "      <td>115962227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          tax_demand_qty\n",
       "supp_id                 \n",
       "acme_inc       186793019\n",
       "megacorp       186793019\n",
       "omni_inc       115962227"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_tax=raw.groupby('supp_id')['tax_demand_qty'].sum().to_frame()\n",
    "total_tax"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c5d01a2",
   "metadata": {},
   "source": [
    "## calculate the cheapest suppliers per receipt if the demand is satisfied"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5caf041d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>demand_qty</th>\n",
       "      <th>supp_id</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "      <th>cost_demand_qty</th>\n",
       "      <th>cost_of_dem</th>\n",
       "      <th>tax_demand_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>534397500.0</td>\n",
       "      <td>534397500.0</td>\n",
       "      <td>2992626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>513021600.0</td>\n",
       "      <td>513021600.0</td>\n",
       "      <td>2992626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>2370.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>506608830.0</td>\n",
       "      <td>506608830.0</td>\n",
       "      <td>2992626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>615647500.0</td>\n",
       "      <td>615647500.0</td>\n",
       "      <td>3447626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.2</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>cote d'ivoire</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>591021600.0</td>\n",
       "      <td>591021600.0</td>\n",
       "      <td>3447626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>6031206.0</td>\n",
       "      <td>6031206.0</td>\n",
       "      <td>90018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>3</td>\n",
       "      <td>nov</td>\n",
       "      <td>15003</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>30006</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>5551110.0</td>\n",
       "      <td>5551110.0</td>\n",
       "      <td>90018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>465</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>6192810.0</td>\n",
       "      <td>6192810.0</td>\n",
       "      <td>78390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>201.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>indonesia</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>5252130.0</td>\n",
       "      <td>5252130.0</td>\n",
       "      <td>78390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "      <td>acme_inc</td>\n",
       "      <td>185.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>madagascar</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>4834050.0</td>\n",
       "      <td>4834050.0</td>\n",
       "      <td>78390</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>468 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand ingredient_uuid  cost_to_process  time_to_process  \\\n",
       "0         1   jan   16443           cocoa              0.2              120   \n",
       "1         1   jan   16443           cocoa              0.2              120   \n",
       "2         1   jan   16443           cocoa              0.2              120   \n",
       "3         1   feb   18943           cocoa              0.2              120   \n",
       "4         1   feb   18943           cocoa              0.2              120   \n",
       "..      ...   ...     ...             ...              ...              ...   \n",
       "463       3   nov   15003         vanilla              0.1               34   \n",
       "464       3   nov   15003         vanilla              0.1               34   \n",
       "465       3   dec   13065         vanilla              0.1               34   \n",
       "466       3   dec   13065         vanilla              0.1               34   \n",
       "467       3   dec   13065         vanilla              0.1               34   \n",
       "\n",
       "     qty  demand_qty   supp_id  cost_per_unit unit_name country_of_origin  \\\n",
       "0     13      213759  megacorp         2500.0     tonne             ghana   \n",
       "1     13      213759  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "2     13      213759  acme_inc         2370.0     tonne         indonesia   \n",
       "3     13      246259  megacorp         2500.0     tonne             ghana   \n",
       "4     13      246259  omni_inc         2400.0     tonne     cote d'ivoire   \n",
       "..   ...         ...       ...            ...       ...               ...   \n",
       "463    2       30006  omni_inc          201.0     tonne         indonesia   \n",
       "464    2       30006  acme_inc          185.0     tonne        madagascar   \n",
       "465    2       26130  megacorp          237.0     tonne             china   \n",
       "466    2       26130  omni_inc          201.0     tonne         indonesia   \n",
       "467    2       26130  acme_inc          185.0     tonne        madagascar   \n",
       "\n",
       "     total_tax_per_unit  time_to_deliver  cost_demand_qty  cost_of_dem  \\\n",
       "0                    14               12      534397500.0  534397500.0   \n",
       "1                    14               12      513021600.0  513021600.0   \n",
       "2                    14               12      506608830.0  506608830.0   \n",
       "3                    14               12      615647500.0  615647500.0   \n",
       "4                    14               12      591021600.0  591021600.0   \n",
       "..                  ...              ...              ...          ...   \n",
       "463                   3               12        6031206.0    6031206.0   \n",
       "464                   3               12        5551110.0    5551110.0   \n",
       "465                   3               10        6192810.0    6192810.0   \n",
       "466                   3               12        5252130.0    5252130.0   \n",
       "467                   3               12        4834050.0    4834050.0   \n",
       "\n",
       "     tax_demand_qty  \n",
       "0           2992626  \n",
       "1           2992626  \n",
       "2           2992626  \n",
       "3           3447626  \n",
       "4           3447626  \n",
       "..              ...  \n",
       "463           90018  \n",
       "464           90018  \n",
       "465           78390  \n",
       "466           78390  \n",
       "467           78390  \n",
       "\n",
       "[468 rows x 17 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "439d2704",
   "metadata": {},
   "outputs": [],
   "source": [
    "#chep_supp_rec= raw.groupby('rec_id')['cost_tax_sum']\n",
    "#chep_supp_rec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "31546200",
   "metadata": {},
   "outputs": [],
   "source": [
    "# chep_supp_rec= raw.loc[raw.groupby('rec_id')['cost_tax_sum'].idxmin()] \n",
    "# chep_supp_rec "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "96a92018",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>cost_of_dem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>supp_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>acme_inc</th>\n",
       "      <td>324</td>\n",
       "      <td>3.712275e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>megacorp</th>\n",
       "      <td>324</td>\n",
       "      <td>3.811901e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>omni_inc</th>\n",
       "      <td>324</td>\n",
       "      <td>3.702046e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          rec_id   cost_of_dem\n",
       "supp_id                       \n",
       "acme_inc     324  3.712275e+10\n",
       "megacorp     324  3.811901e+10\n",
       "omni_inc     324  3.702046e+10"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_of_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "220b53d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tax_demand_qty</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>supp_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>acme_inc</th>\n",
       "      <td>186793019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>megacorp</th>\n",
       "      <td>186793019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>omni_inc</th>\n",
       "      <td>115962227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          tax_demand_qty\n",
       "supp_id                 \n",
       "acme_inc       186793019\n",
       "megacorp       186793019\n",
       "omni_inc       115962227"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_tax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "752d6cc0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>supp_id</th>\n",
       "      <th>rec_id</th>\n",
       "      <th>cost_of_dem</th>\n",
       "      <th>tax_demand_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>324</td>\n",
       "      <td>3.712275e+10</td>\n",
       "      <td>186793019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>324</td>\n",
       "      <td>3.811901e+10</td>\n",
       "      <td>186793019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>324</td>\n",
       "      <td>3.702046e+10</td>\n",
       "      <td>115962227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    supp_id  rec_id   cost_of_dem  tax_demand_qty\n",
       "0  acme_inc     324  3.712275e+10       186793019\n",
       "1  megacorp     324  3.811901e+10       186793019\n",
       "2  omni_inc     324  3.702046e+10       115962227"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_tax_dem= cost_of_dem.merge(total_tax, on='supp_id', how='inner').reset_index()\n",
    "cost_tax_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "79910028",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>supp_id</th>\n",
       "      <th>rec_id</th>\n",
       "      <th>cost_of_dem</th>\n",
       "      <th>tax_demand_qty</th>\n",
       "      <th>cost_tax_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>acme_inc</td>\n",
       "      <td>324</td>\n",
       "      <td>3.712275e+10</td>\n",
       "      <td>186793019</td>\n",
       "      <td>3.730954e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>324</td>\n",
       "      <td>3.811901e+10</td>\n",
       "      <td>186793019</td>\n",
       "      <td>3.830580e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>324</td>\n",
       "      <td>3.702046e+10</td>\n",
       "      <td>115962227</td>\n",
       "      <td>3.713642e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    supp_id  rec_id   cost_of_dem  tax_demand_qty  cost_tax_sum\n",
       "0  acme_inc     324  3.712275e+10       186793019  3.730954e+10\n",
       "1  megacorp     324  3.811901e+10       186793019  3.830580e+10\n",
       "2  omni_inc     324  3.702046e+10       115962227  3.713642e+10"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_tax_dem['cost_tax_sum']=cost_tax_dem['cost_of_dem']+cost_tax_dem['tax_demand_qty']\n",
    "cost_tax_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "11e742d9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "supp_id                omni_inc\n",
       "rec_id                      324\n",
       "cost_of_dem       37020457482.0\n",
       "tax_demand_qty        115962227\n",
       "cost_tax_sum      37136419709.0\n",
       "Name: 2, dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_tax_dem.loc[cost_tax_dem['cost_tax_sum'].idxmin()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd756750",
   "metadata": {},
   "source": [
    "## total cost (inc. tax) to meet all demand per quarter with the fastest suppliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "376d258e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: '',\n",
       " 1: 'Jan',\n",
       " 2: 'Feb',\n",
       " 3: 'Mar',\n",
       " 4: 'Apr',\n",
       " 5: 'May',\n",
       " 6: 'Jun',\n",
       " 7: 'Jul',\n",
       " 8: 'Aug',\n",
       " 9: 'Sep',\n",
       " 10: 'Oct',\n",
       " 11: 'Nov',\n",
       " 12: 'Dec'}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import calendar\n",
    "d = dict(enumerate(calendar.month_abbr))\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fd4434da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dic comprehension\n",
    "d = { k.lower() : v for v,k in d.items() }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "24f199f0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "demand['month_n']= demand['month'].apply(lambda x: f\"{d[x]}-01-2020\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "61d130a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>month_n</th>\n",
       "      <th>quarter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>2-01-2020</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rec_id month  demand    month_n  quarter\n",
       "0       1   jan   16443  1-01-2020        1\n",
       "1       1   feb   18943  2-01-2020        1"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demand['quarter']= pd.to_datetime(demand['month_n']).dt.quarter\n",
    "demand.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a6a325f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ost_tax_quarter= raw.groupby(['ingredient_uuid','quarter','supp_id']).sum().reset_index()[['ingredient_uuid','quarter','supp_id','cost_tax_sum']] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "108e2867",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rec_id ingredient_uuid  cost_to_process  time_to_process  qty\n",
       "0       1           cocoa             0.20              120   13\n",
       "1       1     milk_powder             0.03              110   12"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recipes.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3e0f0698",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>supp_id</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>italy</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>omni_inc</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>sugar</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>megacorp</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    supp_id ingredient_uuid  cost_per_unit unit_name country_of_origin  \\\n",
       "0  megacorp           cocoa         2500.0     tonne             ghana   \n",
       "7  omni_inc        hazelnut         1925.0     tonne             italy   \n",
       "6  omni_inc     milk_powder         3120.0     tonne       switzerland   \n",
       "3  megacorp           sugar          457.0     tonne            brazil   \n",
       "4  megacorp         vanilla          237.0     tonne             china   \n",
       "\n",
       "   total_tax_per_unit  time_to_deliver  \n",
       "0                  14               12  \n",
       "7                  12                3  \n",
       "6                   0                2  \n",
       "3                   5                9  \n",
       "4                   3               10  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fastest_supplier = suppliers.loc[suppliers.groupby('ingredient_uuid')['time_to_deliver'].idxmin()]\n",
    "fastest_supplier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2ece800b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>month_n</th>\n",
       "      <th>quarter</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>2-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand     month_n  quarter ingredient_uuid  \\\n",
       "0         1   jan   16443   1-01-2020        1           cocoa   \n",
       "1         1   jan   16443   1-01-2020        1     milk_powder   \n",
       "2         1   jan   16443   1-01-2020        1        hazelnut   \n",
       "3         1   jan   16443   1-01-2020        1           sugar   \n",
       "4         1   feb   18943   2-01-2020        1           cocoa   \n",
       "..      ...   ...     ...         ...      ...             ...   \n",
       "151       3   dec   13065  12-01-2020        4        hazelnut   \n",
       "152       3   dec   13065  12-01-2020        4         vanilla   \n",
       "153       3   dec   13065  12-01-2020        4           cocoa   \n",
       "154       3   dec   13065  12-01-2020        4     milk_powder   \n",
       "155       3   dec   13065  12-01-2020        4           sugar   \n",
       "\n",
       "     cost_to_process  time_to_process  qty  \n",
       "0               0.20              120   13  \n",
       "1               0.03              110   12  \n",
       "2               0.08               45    4  \n",
       "3               0.40               80    5  \n",
       "4               0.20              120   13  \n",
       "..               ...              ...  ...  \n",
       "151             0.08               45    3  \n",
       "152             0.10               34    2  \n",
       "153             0.20              120   12  \n",
       "154             0.03               11   12  \n",
       "155             0.40               80    4  \n",
       "\n",
       "[156 rows x 9 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rec_dem= demand.merge(recipes, on='rec_id', how='inner')\n",
    "rec_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "983d9697",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rec_id</th>\n",
       "      <th>month</th>\n",
       "      <th>demand</th>\n",
       "      <th>month_n</th>\n",
       "      <th>quarter</th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>cost_to_process</th>\n",
       "      <th>time_to_process</th>\n",
       "      <th>qty</th>\n",
       "      <th>dem_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>213759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110</td>\n",
       "      <td>12</td>\n",
       "      <td>197316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>4</td>\n",
       "      <td>65772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>jan</td>\n",
       "      <td>16443</td>\n",
       "      <td>1-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>5</td>\n",
       "      <td>82215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>feb</td>\n",
       "      <td>18943</td>\n",
       "      <td>2-01-2020</td>\n",
       "      <td>1</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>13</td>\n",
       "      <td>246259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>hazelnut</td>\n",
       "      <td>0.08</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>39195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>0.10</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>26130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>cocoa</td>\n",
       "      <td>0.20</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>156780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>milk_powder</td>\n",
       "      <td>0.03</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>156780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>3</td>\n",
       "      <td>dec</td>\n",
       "      <td>13065</td>\n",
       "      <td>12-01-2020</td>\n",
       "      <td>4</td>\n",
       "      <td>sugar</td>\n",
       "      <td>0.40</td>\n",
       "      <td>80</td>\n",
       "      <td>4</td>\n",
       "      <td>52260</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     rec_id month  demand     month_n  quarter ingredient_uuid  \\\n",
       "0         1   jan   16443   1-01-2020        1           cocoa   \n",
       "1         1   jan   16443   1-01-2020        1     milk_powder   \n",
       "2         1   jan   16443   1-01-2020        1        hazelnut   \n",
       "3         1   jan   16443   1-01-2020        1           sugar   \n",
       "4         1   feb   18943   2-01-2020        1           cocoa   \n",
       "..      ...   ...     ...         ...      ...             ...   \n",
       "151       3   dec   13065  12-01-2020        4        hazelnut   \n",
       "152       3   dec   13065  12-01-2020        4         vanilla   \n",
       "153       3   dec   13065  12-01-2020        4           cocoa   \n",
       "154       3   dec   13065  12-01-2020        4     milk_powder   \n",
       "155       3   dec   13065  12-01-2020        4           sugar   \n",
       "\n",
       "     cost_to_process  time_to_process  qty  dem_qty  \n",
       "0               0.20              120   13   213759  \n",
       "1               0.03              110   12   197316  \n",
       "2               0.08               45    4    65772  \n",
       "3               0.40               80    5    82215  \n",
       "4               0.20              120   13   246259  \n",
       "..               ...              ...  ...      ...  \n",
       "151             0.08               45    3    39195  \n",
       "152             0.10               34    2    26130  \n",
       "153             0.20              120   12   156780  \n",
       "154             0.03               11   12   156780  \n",
       "155             0.40               80    4    52260  \n",
       "\n",
       "[156 rows x 10 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rec_dem['dem_qty']=rec_dem['demand']*rec_dem['qty']\n",
    "rec_dem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9f8e2848",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='ingredient_uuid,quarter'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rec_dem.groupby(['ingredient_uuid','quarter'])['dem_qty'].sum().plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7423df15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>quarter</th>\n",
       "      <th>dem_qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>1</td>\n",
       "      <td>1653177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>2</td>\n",
       "      <td>1482766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>3</td>\n",
       "      <td>1616210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>4</td>\n",
       "      <td>1500432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>1</td>\n",
       "      <td>331932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>2</td>\n",
       "      <td>286396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>3</td>\n",
       "      <td>337238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>4</td>\n",
       "      <td>298347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>1</td>\n",
       "      <td>1557165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>2</td>\n",
       "      <td>1399785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3</td>\n",
       "      <td>1528026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>4</td>\n",
       "      <td>1417590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>sugar</td>\n",
       "      <td>1</td>\n",
       "      <td>587801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>sugar</td>\n",
       "      <td>2</td>\n",
       "      <td>523526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>sugar</td>\n",
       "      <td>3</td>\n",
       "      <td>573890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>sugar</td>\n",
       "      <td>4</td>\n",
       "      <td>530680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>1</td>\n",
       "      <td>197017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>2</td>\n",
       "      <td>191073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>3</td>\n",
       "      <td>190574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>4</td>\n",
       "      <td>187868</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ingredient_uuid  quarter  dem_qty\n",
       "0            cocoa        1  1653177\n",
       "1            cocoa        2  1482766\n",
       "2            cocoa        3  1616210\n",
       "3            cocoa        4  1500432\n",
       "4         hazelnut        1   331932\n",
       "5         hazelnut        2   286396\n",
       "6         hazelnut        3   337238\n",
       "7         hazelnut        4   298347\n",
       "8      milk_powder        1  1557165\n",
       "9      milk_powder        2  1399785\n",
       "10     milk_powder        3  1528026\n",
       "11     milk_powder        4  1417590\n",
       "12           sugar        1   587801\n",
       "13           sugar        2   523526\n",
       "14           sugar        3   573890\n",
       "15           sugar        4   530680\n",
       "16         vanilla        1   197017\n",
       "17         vanilla        2   191073\n",
       "18         vanilla        3   190574\n",
       "19         vanilla        4   187868"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "igd_dem_qrt=rec_dem.groupby(['ingredient_uuid','quarter'])['dem_qty'].sum().to_frame().reset_index()\n",
    "igd_dem_qrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d6364c63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ingredient_uuid</th>\n",
       "      <th>quarter</th>\n",
       "      <th>dem_qty</th>\n",
       "      <th>supp_id</th>\n",
       "      <th>cost_per_unit</th>\n",
       "      <th>unit_name</th>\n",
       "      <th>country_of_origin</th>\n",
       "      <th>total_tax_per_unit</th>\n",
       "      <th>time_to_deliver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>1</td>\n",
       "      <td>1653177</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>2</td>\n",
       "      <td>1482766</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>3</td>\n",
       "      <td>1616210</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cocoa</td>\n",
       "      <td>4</td>\n",
       "      <td>1500432</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>ghana</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>1</td>\n",
       "      <td>331932</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>italy</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>2</td>\n",
       "      <td>286396</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>italy</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>3</td>\n",
       "      <td>337238</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>italy</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>hazelnut</td>\n",
       "      <td>4</td>\n",
       "      <td>298347</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>italy</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>1</td>\n",
       "      <td>1557165</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>2</td>\n",
       "      <td>1399785</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>3</td>\n",
       "      <td>1528026</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>milk_powder</td>\n",
       "      <td>4</td>\n",
       "      <td>1417590</td>\n",
       "      <td>omni_inc</td>\n",
       "      <td>3120.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>switzerland</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>sugar</td>\n",
       "      <td>1</td>\n",
       "      <td>587801</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>sugar</td>\n",
       "      <td>2</td>\n",
       "      <td>523526</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>sugar</td>\n",
       "      <td>3</td>\n",
       "      <td>573890</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>sugar</td>\n",
       "      <td>4</td>\n",
       "      <td>530680</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>457.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>1</td>\n",
       "      <td>197017</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>2</td>\n",
       "      <td>191073</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>3</td>\n",
       "      <td>190574</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>vanilla</td>\n",
       "      <td>4</td>\n",
       "      <td>187868</td>\n",
       "      <td>megacorp</td>\n",
       "      <td>237.0</td>\n",
       "      <td>tonne</td>\n",
       "      <td>china</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ingredient_uuid  quarter  dem_qty   supp_id  cost_per_unit unit_name  \\\n",
       "0            cocoa        1  1653177  megacorp         2500.0     tonne   \n",
       "1            cocoa        2  1482766  megacorp         2500.0     tonne   \n",
       "2            cocoa        3  1616210  megacorp         2500.0     tonne   \n",
       "3            cocoa        4  1500432  megacorp         2500.0     tonne   \n",
       "4         hazelnut        1   331932  omni_inc         1925.0     tonne   \n",
       "5         hazelnut        2   286396  omni_inc         1925.0     tonne   \n",
       "6         hazelnut        3   337238  omni_inc         1925.0     tonne   \n",
       "7         hazelnut        4   298347  omni_inc         1925.0     tonne   \n",
       "8      milk_powder        1  1557165  omni_inc         3120.0     tonne   \n",
       "9      milk_powder        2  1399785  omni_inc         3120.0     tonne   \n",
       "10     milk_powder        3  1528026  omni_inc         3120.0     tonne   \n",
       "11     milk_powder        4  1417590  omni_inc         3120.0     tonne   \n",
       "12           sugar        1   587801  megacorp          457.0     tonne   \n",
       "13           sugar        2   523526  megacorp          457.0     tonne   \n",
       "14           sugar        3   573890  megacorp          457.0     tonne   \n",
       "15           sugar        4   530680  megacorp          457.0     tonne   \n",
       "16         vanilla        1   197017  megacorp          237.0     tonne   \n",
       "17         vanilla        2   191073  megacorp          237.0     tonne   \n",
       "18         vanilla        3   190574  megacorp          237.0     tonne   \n",
       "19         vanilla        4   187868  megacorp          237.0     tonne   \n",
       "\n",
       "   country_of_origin  total_tax_per_unit  time_to_deliver  \n",
       "0              ghana                  14               12  \n",
       "1              ghana                  14               12  \n",
       "2              ghana                  14               12  \n",
       "3              ghana                  14               12  \n",
       "4              italy                  12                3  \n",
       "5              italy                  12                3  \n",
       "6              italy                  12                3  \n",
       "7              italy                  12                3  \n",
       "8        switzerland                   0                2  \n",
       "9        switzerland                   0                2  \n",
       "10       switzerland                   0                2  \n",
       "11       switzerland                   0                2  \n",
       "12            brazil                   5                9  \n",
       "13            brazil                   5                9  \n",
       "14            brazil                   5                9  \n",
       "15            brazil                   5                9  \n",
       "16             china                   3               10  \n",
       "17             china                   3               10  \n",
       "18             china                   3               10  \n",
       "19             china                   3               10  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qrt_dem_fastest= igd_dem_qrt.merge(fastest_supplier, on='ingredient_uuid', how='inner')\n",
    "qrt_dem_fastest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cf8ce6f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ingredient_uuid\n",
       "cocoa          AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "hazelnut       AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "milk_powder    AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "sugar          AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "vanilla        AxesSubplot(0.125,0.125;0.775x0.755)\n",
       "dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAEOCAYAAACZ2uz0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAVJklEQVR4nO3dfZBddZ3n8fcHiEQWFqaSxrIIMZFNRqJIhAbUUcz4GJ0xLKUMYd1RFEkVDq6lI7VsuSX4VDsOlM6qOE7KBVZKedwhE2fi4NYqojyZRAMaEAzISLOuxIiID5Fk+O4ffRObph9up2+n0z/er6qu3HPO757zvae6P/XL757fOakqJEkz337TXYAkqTcMdElqhIEuSY0w0CWpEQa6JDXCQJekRkxroCe5NMnDSb7fZfs/S3JXks1JvjTV9UnSTJLpvA49ycnAr4AvVNULxmm7CLgGeGVVPZLk8Kp6eG/UKUkzwbT20KvqJuDnQ9clOSrJPyfZmOSbSZ7X2XQ2cElVPdJ5r2EuSUPsi2Poq4F3V9XxwPuBz3bWLwYWJ7k5yW1Jlk9bhZK0DzpgugsYKsnBwEuBa5PsWn1g598DgEXAMmAecFOSY6rqF3u5TEnaJ+1Tgc7g/xh+UVVLR9g2ANxeVTuAHyW5l8GAX78X65OkfdY+NeRSVb9kMKxPA8igYzub1zDYOyfJXAaHYO6fhjIlaZ803ZctXgncCvxhkoEkZwFvAc5KcgewGTil0/wGYFuSu4CvA+dV1bbpqFuS9kXTetmiJKl39qkhF0nSnjPQJakR03aVy9y5c2vBggXTdXhJmpE2btz4s6rqG2nbuIGe5FLgT4GHR5uen2QZ8DfALOBnVfWK8fa7YMECNmzYMF4zSdIQSf5ltG3dDLlcDow6KzPJYQzO5lxRVc8HTptgfZKkHhg30Ee638ow/wH4+6r6cae991iRpGnQiy9FFwN/kOTGzg213tqDfUqSJqgXX4oeABwPvAp4JnBrktuq6t7hDZOsAlYBzJ8/vweHlrSv27FjBwMDA2zfvn26S5lRZs+ezbx585g1a1bX7+lFoA8A26rq18Cvk9wEHAs8JdCrajWDd1Okv7/fGU3S08DAwACHHHIICxYsYMhN9zSGqmLbtm0MDAywcOHCrt/XiyGXfwBeluSAJAcBJwF392C/khqwfft25syZY5hPQBLmzJkz4f/VdHPZ4pUM3hRrbpIB4AIGL0+kqj5XVXcn+WfgTuAJ4PNV1dUj5SQ9PRjmE7cn52zcQK+qM7pocxFw0YSPLknqmX3tfuiTsuD8f5ruErrywF/9yXSXIE2bXv+dTvTv6cILL+Tggw/m/e9/f0/rGMuaNWtYvHgxS5YsmdLjeC8XSZpia9as4a677pry4xjokpr3sY99jMWLF/Oyl72Me+65B4D77ruP5cuXc/zxx/Pyl7+cH/zgBwCceeaZnHPOObz4xS/muc99LjfeeCPveMc7OProoznzzDPHPM5ll13G4sWLOfHEEzn77LM599xzueWWW1i7di3nnXceS5cu5b777uO4447b/Z4f/vCHT1qeDANdUtM2btzIVVddxaZNm1i3bh3r1w8+tXLVqlV8+tOfZuPGjVx88cW8613v2v2eRx55hFtvvZVPfvKTrFixgve+971s3ryZ733ve2zatGnE4/zkJz/hggsu4Oabb+Zb3/rW7h75S1/6UlasWMFFF13Epk2bOOqoozj00EN37+eyyy7j7W9/e08+a1Nj6NK+bCZ8x9Pi9zvf/OY3OfXUUznooIMAWLFiBdu3b+eWW27htNN+f+up3/3ud7tfv/GNbyQJxxxzDM961rM45phjAHj+85/PAw88wNKlS59ynNtvv51ly5bR1zd4I8TTTz+de+99ynQcAN75zndy2WWX8YlPfIKrr76ab3/72z35rAa6pKedJ554gsMOO2zU3vaBBx4IwH777bf79a7lnTt3Tvr4b3rTm/jQhz7EK1/5So4//njmzJkz6X2CQy6SGnfyySezZs0afvvb3/LYY4/x5S9/mYMOOoiFCxdy7bXXAoMzM++4445JHeekk07iG9/4Btu2bWPHjh279w1wyCGH8Nhjj+1enj17Nq973es455xzejbcAvbQJe1le3tY57jjjuP000/n2GOP5fDDD+eEE04A4Itf/CLnnHMOH/3oR9mxYwcrV67k2GOP3ePjPPvZz+bCCy/kJS95CYcddtiThmVWrlzJ2Wefzac+9Smuu+46jjrqKN7ylrdw/fXX89rXvnayH3G3aXtIdH9/f/X6ARczYYwS2hyn1Phmwu/nVPxu3n333Rx99NE93+++7vLLL2fDhg185jOfGXH7xRdfzKOPPspHPvKRUfcx0rlLsrGq+kdqbw9dkvayU089lfvuu4+v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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEDCAYAAAArwUMAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAbIklEQVR4nO3df7RVZb3v8fcnUNHjDwh3DAbggQw6oR53QEg/dHi0cOMp0JsljkYgGZTCuNU5dbPjH1jJuHa0vNdu2bUjAmeYaBhK92LENbXMUDZK/PBHbAhzMxA4QGJHQdDv/WM9mybbtZ/9a7EWGz+vMdZYc33n88z5rDVgf8Z85pxrKSIwMzNryztqPQAzMzuyOSjMzCzLQWFmZlkOCjMzy3JQmJlZloPCzMyyetd6AJV26qmnxtChQ2s9DDOzHmXVqlX/ERF15dYddUExdOhQGhsbaz0MM7MeRdILba3z1JOZmWW1GxSShkh6WNIzktZL+lKqv1PSckkb0nO/VJekWyU1SVojaVRhW1NT+w2SphbqoyWtTX1ulaTcPszMrHo6ckRxAPjniBgJjANmShoJXAs8FBHDgYfSa4AJwPD0mAHcBqU/+sBs4BxgLDC78If/NmB6oV9Dqre1DzMzq5J2z1FExFZga1p+RdKzwCBgEnB+ajYfeAT4eqoviNKXSK2Q1FfSwNR2eUTsApC0HGiQ9AhwckSsSPUFwCXAg5l9mNnb3P79+2lubmbv3r21HkqP0qdPHwYPHswxxxzT4T6dOpktaSjwfuAJYEAKEYCXgAFpeRDwYqFbc6rl6s1l6mT2YWZvc83NzZx00kkMHTqUNFtt7YgIdu7cSXNzM8OGDetwvw6fzJZ0InAf8OWI2NNq5wEc1q+hze1D0gxJjZIad+zYcTiHYWZHiL1799K/f3+HRCdIon///p0+CutQUEg6hlJI3BURP0vlbWlKifS8PdW3AEMK3QenWq4+uEw9t49DRMTtETEmIsbU1ZW9DNjMjkIOic7rymfWkaueBNwBPBsR3yusWgK0XLk0FXigUJ+Srn4aB7ycpo+WAeMl9UsnsccDy9K6PZLGpX1NabWtcvswM7Mq6cg5ig8DnwXWSlqdav8C3AjcK+kq4AXg02ndUuBioAl4FZgGEBG7JH0bWJnafavlxDZwDTAPOJ7SSewHU72tfVTV0Gv/by1222mbb/zHWg/BrGYq/f+0s/+frr/+ek488US++tWvVnQcOffffz8jRoxg5MiRh3U/Hbnq6TGgrWOVC8u0D2BmG9uaC8wtU28EzixT31luH2ZmVgqKj3/844c9KHxntplZF82ZM4cRI0bwkY98hOeffx6AjRs30tDQwOjRozn33HN57rnnALjyyiu5+uqrGTduHO9+97t55JFH+NznPsf73vc+rrzyyux+7rzzTkaMGMHYsWOZPn06s2bN4vHHH2fJkiV87Wtfo76+no0bNzJq1MH7m9mwYcMhr7vDQWFm1gWrVq1i4cKFrF69mqVLl7JyZWlWfcaMGXz/+99n1apV3HzzzVxzzTUH++zevZvf/e533HLLLUycOJGvfOUrrF+/nrVr17J69eqy+9m6dSuzZ8/mt7/9LY899hjPPPMMAB/60IeYOHEiN910E6tXr+b000/nlFNOObidO++8k2nTplXkvR51XwpoZlYNv/nNb7j00ks54YQTAJg4cSJ79+7l8ccf51Of+tTBdvv27Tu4/IlPfAJJnHXWWQwYMICzzjoLgDPOOIPNmzdTX1//lv088cQTnH/++bRc0Xn55Zfzhz/8oeyYPv/5z3PnnXfyve99j3vuuYcnn3yyIu/VQWFmViFvvvkmffv2bfPo4LjjjgPgHe94x8HlltcHDhzo9v4/+clP8s1vfpMLLriA0aNH079//25vEzz1ZGbWJeeddx73338/r732Gq+88go///nPOeGEExg2bBg//elPgdKd0L///e+7tZ9zzjmHRx99lJ07d7J///6D2wY46aSTeOWVVw6+7tOnDxdddBFXX311xaadwEcUVgO+3Lhy/FlWdx9Fo0aN4vLLL+fss8/mXe96Fx/4wAcAuOuuu7j66qu54YYb2L9/P5MnT+bss8/u8n4GDhzI9ddfzwc/+EH69u17yPTU5MmTmT59OrfeeiuLFi3i9NNP5zOf+QyLFy9m/Pjx3X2LBzkozMy66LrrruO66657S/0Xv/jFW2rz5s07uDx06FDWrVtXdl0506ZNO3iEMG/evIM/zvbhD3/44MntFo899hjTpk2jV69eHX0b7XJQmJkdJS699FI2btzIr371q4pu10FhZpasaf5zTff/mU98lP2v7zukNud//Ijh7zvj4OtRH72kzfsuFi9efFjG5aAwMztC3PXz/1frIZTlq57MrMcqfWOQ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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ingredient quarterly demand summary  \n",
    "qrt_dem_fastest.groupby(['ingredient_uuid','quarter'])['dem_qty'].sum().reset_index().groupby('ingredient_uuid').plot.bar(x='quarter',y='dem_qty')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "74b7e389",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_cost_tax</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>quarter</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.976242e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.937479e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.794698e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.063127e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         total_cost_tax\n",
       "quarter                \n",
       "1          9.976242e+09\n",
       "2          8.937479e+09\n",
       "3          9.794698e+09\n",
       "4          9.063127e+09"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qrt_dem_fastest['total_cost_tax']=(qrt_dem_fastest['cost_per_unit']+qrt_dem_fastest['total_tax_per_unit'])*qrt_dem_fastest['dem_qty']\n",
    "qrt_dem_fastest.groupby('quarter')['total_cost_tax'].sum().to_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ead87c9",
   "metadata": {},
   "source": [
    "# Forecast demand for receipe 1 - Section 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b1bc3c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8a59db8",
   "metadata": {},
   "source": [
    "## import the historic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "511f1b96",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1061</th>\n",
       "      <td>2021-11-27</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1062</th>\n",
       "      <td>2021-11-28</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>2021-11-29</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1065</th>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>1156.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1066 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            date  demand\n",
       "0     2019-01-01     NaN\n",
       "1     2019-01-02    71.0\n",
       "2     2019-01-03    70.0\n",
       "3     2019-01-04    86.0\n",
       "4     2019-01-05    60.0\n",
       "...          ...     ...\n",
       "1061  2021-11-27  1141.0\n",
       "1062  2021-11-28     NaN\n",
       "1063  2021-11-29  1738.5\n",
       "1064  2021-11-30     NaN\n",
       "1065  2021-12-01  1156.0\n",
       "\n",
       "[1066 rows x 2 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"./demand_trend.csv\", index_col=0)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8a4faa6f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1066 entries, 0 to 1065\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   date    1066 non-null   object \n",
      " 1   demand  811 non-null    float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 25.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9033ebcf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['date']= pd.to_datetime(df['date'])\n",
    "q= df[['date','demand']]\n",
    "q.plot(x='date', y='demand', figsize=(10,8))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9749fceb",
   "metadata": {},
   "source": [
    "## process nan and missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5610e315",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date        0\n",
       "demand    255\n",
       "dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8b33c94f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1061</th>\n",
       "      <td>2021-11-27</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1062</th>\n",
       "      <td>2021-11-28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>2021-11-29</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1065</th>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1156.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1066 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           date  demand       y\n",
       "0    2019-01-01     NaN    71.0\n",
       "1    2019-01-02    71.0    71.0\n",
       "2    2019-01-03    70.0    70.0\n",
       "3    2019-01-04    86.0    86.0\n",
       "4    2019-01-05    60.0    60.0\n",
       "...         ...     ...     ...\n",
       "1061 2021-11-27  1141.0  1141.0\n",
       "1062 2021-11-28     NaN  1141.0\n",
       "1063 2021-11-29  1738.5  1738.5\n",
       "1064 2021-11-30     NaN  1738.5\n",
       "1065 2021-12-01  1156.0  1156.0\n",
       "\n",
       "[1066 rows x 3 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create column 'y' using the 'demand' column \n",
    "df['y']=df.fillna(method= 'ffill').fillna(method= 'bfill')['demand']\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5ba121c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basic_trend</th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   basic_trend       date  demand     y\n",
       "0            0 2019-01-01     NaN  71.0\n",
       "1            1 2019-01-02    71.0  71.0\n",
       "2            2 2019-01-03    70.0  70.0\n",
       "3            3 2019-01-04    86.0  86.0\n",
       "4            4 2019-01-05    60.0  60.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df= df.reset_index().rename(columns= {'index':'basic_trend'})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e2e614ef",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basic_trend</th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1061</th>\n",
       "      <td>1061</td>\n",
       "      <td>2021-11-27</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1062</th>\n",
       "      <td>1062</td>\n",
       "      <td>2021-11-28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>1063</td>\n",
       "      <td>2021-11-29</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>1064</td>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1065</th>\n",
       "      <td>1065</td>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1156.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1066 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      basic_trend       date  demand       y\n",
       "0               0 2019-01-01     NaN    71.0\n",
       "1               1 2019-01-02    71.0    71.0\n",
       "2               2 2019-01-03    70.0    70.0\n",
       "3               3 2019-01-04    86.0    86.0\n",
       "4               4 2019-01-05    60.0    60.0\n",
       "...           ...        ...     ...     ...\n",
       "1061         1061 2021-11-27  1141.0  1141.0\n",
       "1062         1062 2021-11-28     NaN  1141.0\n",
       "1063         1063 2021-11-29  1738.5  1738.5\n",
       "1064         1064 2021-11-30     NaN  1738.5\n",
       "1065         1065 2021-12-01  1156.0  1156.0\n",
       "\n",
       "[1066 rows x 4 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop na rows in 'y' column\n",
    "df= df.dropna(subset=['y'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8c7311b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basic_trend</th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1061</th>\n",
       "      <td>1061</td>\n",
       "      <td>2021-11-27</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1062</th>\n",
       "      <td>1062</td>\n",
       "      <td>2021-11-28</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>1063</td>\n",
       "      <td>2021-11-29</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>1064</td>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1065</th>\n",
       "      <td>1065</td>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1156.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1066 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      basic_trend       date  demand       y\n",
       "0               0 2019-01-01    71.0    71.0\n",
       "1               1 2019-01-02    71.0    71.0\n",
       "2               2 2019-01-03    70.0    70.0\n",
       "3               3 2019-01-04    86.0    86.0\n",
       "4               4 2019-01-05    60.0    60.0\n",
       "...           ...        ...     ...     ...\n",
       "1061         1061 2021-11-27  1141.0  1141.0\n",
       "1062         1062 2021-11-28  1141.0  1141.0\n",
       "1063         1063 2021-11-29  1738.5  1738.5\n",
       "1064         1064 2021-11-30  1738.5  1738.5\n",
       "1065         1065 2021-12-01  1156.0  1156.0\n",
       "\n",
       "[1066 rows x 4 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fill na in 'demand'\n",
    "df['demand']= df.fillna(method='ffill').fillna(method= 'bfill')['demand']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9888a0de",
   "metadata": {},
   "source": [
    "## create rolling data features and the date_based features "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7d5a511e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding 'holiday' column and convert it into boolean data \n",
    "from pandas.tseries.holiday import USFederalHolidayCalendar as calendar \n",
    "\n",
    "cal= calendar()\n",
    "holidays= cal.holidays(start=df['date'].min(), end=df['date'].max())\n",
    "\n",
    "df['holiday'] = df['date'].isin(holidays)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "aaa74239",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basic_trend</th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "      <th>holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1061</th>\n",
       "      <td>1061</td>\n",
       "      <td>2021-11-27</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1062</th>\n",
       "      <td>1062</td>\n",
       "      <td>2021-11-28</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>1063</td>\n",
       "      <td>2021-11-29</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>1064</td>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1065</th>\n",
       "      <td>1065</td>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1066 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      basic_trend       date  demand       y  holiday\n",
       "0               0 2019-01-01    71.0    71.0        1\n",
       "1               1 2019-01-02    71.0    71.0        0\n",
       "2               2 2019-01-03    70.0    70.0        0\n",
       "3               3 2019-01-04    86.0    86.0        0\n",
       "4               4 2019-01-05    60.0    60.0        0\n",
       "...           ...        ...     ...     ...      ...\n",
       "1061         1061 2021-11-27  1141.0  1141.0        0\n",
       "1062         1062 2021-11-28  1141.0  1141.0        0\n",
       "1063         1063 2021-11-29  1738.5  1738.5        0\n",
       "1064         1064 2021-11-30  1738.5  1738.5        0\n",
       "1065         1065 2021-12-01  1156.0  1156.0        0\n",
       "\n",
       "[1066 rows x 5 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['holiday']= df['holiday'].astype(int)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "0e229faf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basic_trend</th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>month_of_year</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "      <th>rol_30</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>71.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1061</th>\n",
       "      <td>1061</td>\n",
       "      <td>2021-11-27</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>1390.571429</td>\n",
       "      <td>1316.90</td>\n",
       "      <td>1290.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1062</th>\n",
       "      <td>1062</td>\n",
       "      <td>2021-11-28</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>1141.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>1390.571429</td>\n",
       "      <td>1316.00</td>\n",
       "      <td>1291.816667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1063</th>\n",
       "      <td>1063</td>\n",
       "      <td>2021-11-29</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>1392.500000</td>\n",
       "      <td>1374.85</td>\n",
       "      <td>1313.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1064</th>\n",
       "      <td>1064</td>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>1738.5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>1394.428571</td>\n",
       "      <td>1435.20</td>\n",
       "      <td>1334.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1065</th>\n",
       "      <td>1065</td>\n",
       "      <td>2021-12-01</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>1398.571429</td>\n",
       "      <td>1436.70</td>\n",
       "      <td>1335.583333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1066 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      basic_trend       date  demand       y  holiday  day_of_week  \\\n",
       "0               0 2019-01-01    71.0    71.0        1            1   \n",
       "1               1 2019-01-02    71.0    71.0        0            2   \n",
       "2               2 2019-01-03    70.0    70.0        0            3   \n",
       "3               3 2019-01-04    86.0    86.0        0            4   \n",
       "4               4 2019-01-05    60.0    60.0        0            5   \n",
       "...           ...        ...     ...     ...      ...          ...   \n",
       "1061         1061 2021-11-27  1141.0  1141.0        0            5   \n",
       "1062         1062 2021-11-28  1141.0  1141.0        0            6   \n",
       "1063         1063 2021-11-29  1738.5  1738.5        0            0   \n",
       "1064         1064 2021-11-30  1738.5  1738.5        0            1   \n",
       "1065         1065 2021-12-01  1156.0  1156.0        0            2   \n",
       "\n",
       "      month_of_year        rol_7   rol_10       rol_30  \n",
       "0                 1          NaN      NaN          NaN  \n",
       "1                 1          NaN      NaN          NaN  \n",
       "2                 1          NaN      NaN          NaN  \n",
       "3                 1          NaN      NaN          NaN  \n",
       "4                 1          NaN      NaN          NaN  \n",
       "...             ...          ...      ...          ...  \n",
       "1061             11  1390.571429  1316.90  1290.150000  \n",
       "1062             11  1390.571429  1316.00  1291.816667  \n",
       "1063             11  1392.500000  1374.85  1313.100000  \n",
       "1064             11  1394.428571  1435.20  1334.050000  \n",
       "1065             12  1398.571429  1436.70  1335.583333  \n",
       "\n",
       "[1066 rows x 10 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add 'day_of_week', 'month_of_year','rolling_7days-Avg', 'rolling_10days-Avg','rolling_30days-Avg'\n",
    "df['day_of_week']= df['date'].dt.day_of_week\n",
    "df['month_of_year']= df['date'].dt.month\n",
    "df['rol_7']= df['demand'].rolling(7).mean()\n",
    "df['rol_10']= df['demand'].rolling(10).mean()\n",
    "df['rol_30']= df['demand'].rolling(30).mean()\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65087ae2",
   "metadata": {},
   "source": [
    "## remove created na"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c40aee2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basic_trend</th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>y</th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>month_of_year</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "      <th>rol_30</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>2019-01-30</td>\n",
       "      <td>117.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>101.857143</td>\n",
       "      <td>132.9</td>\n",
       "      <td>103.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>2019-01-31</td>\n",
       "      <td>109.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>104.571429</td>\n",
       "      <td>118.6</td>\n",
       "      <td>104.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31</td>\n",
       "      <td>2019-02-01</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>102.714286</td>\n",
       "      <td>102.0</td>\n",
       "      <td>105.266667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>2019-02-02</td>\n",
       "      <td>102.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>106.285714</td>\n",
       "      <td>101.0</td>\n",
       "      <td>106.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>2019-02-03</td>\n",
       "      <td>86.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>102.857143</td>\n",
       "      <td>100.6</td>\n",
       "      <td>106.333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    basic_trend       date  demand      y  holiday  day_of_week  \\\n",
       "29           29 2019-01-30   117.0  117.0        0            2   \n",
       "30           30 2019-01-31   109.0  109.0        0            3   \n",
       "31           31 2019-02-01    86.0   86.0        0            4   \n",
       "32           32 2019-02-02   102.0  102.0        0            5   \n",
       "33           33 2019-02-03    86.0   86.0        0            6   \n",
       "\n",
       "    month_of_year       rol_7  rol_10      rol_30  \n",
       "29              1  101.857143   132.9  103.500000  \n",
       "30              1  104.571429   118.6  104.766667  \n",
       "31              2  102.714286   102.0  105.266667  \n",
       "32              2  106.285714   101.0  106.333333  \n",
       "33              2  102.857143   100.6  106.333333  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.dropna()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66fea389",
   "metadata": {},
   "source": [
    "## define X & y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "43f911ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1: define X & y. 'date' is the index for X. \n",
    "# 2: later step after 'coef_' report for linear model:drop non-significant features 'month_of_year','rol_30'\n",
    "X= df.drop(['y','demand','month_of_year','rol_30','basic_trend'],axis=1).set_index('date')\n",
    "y= df['y']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5f1edaef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29       117.0\n",
       "30       109.0\n",
       "31        86.0\n",
       "32       102.0\n",
       "33        86.0\n",
       "         ...  \n",
       "1061    1141.0\n",
       "1062    1141.0\n",
       "1063    1738.5\n",
       "1064    1738.5\n",
       "1065    1156.0\n",
       "Name: y, Length: 1037, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "963f8614",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>101.857143</td>\n",
       "      <td>132.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>104.571429</td>\n",
       "      <td>118.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>102.714286</td>\n",
       "      <td>102.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>106.285714</td>\n",
       "      <td>101.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>102.857143</td>\n",
       "      <td>100.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1390.571429</td>\n",
       "      <td>1316.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1390.571429</td>\n",
       "      <td>1316.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1392.500000</td>\n",
       "      <td>1374.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1394.428571</td>\n",
       "      <td>1435.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1398.571429</td>\n",
       "      <td>1436.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            holiday  day_of_week        rol_7   rol_10\n",
       "date                                                  \n",
       "2019-01-30        0            2   101.857143   132.90\n",
       "2019-01-31        0            3   104.571429   118.60\n",
       "2019-02-01        0            4   102.714286   102.00\n",
       "2019-02-02        0            5   106.285714   101.00\n",
       "2019-02-03        0            6   102.857143   100.60\n",
       "...             ...          ...          ...      ...\n",
       "2021-11-27        0            5  1390.571429  1316.90\n",
       "2021-11-28        0            6  1390.571429  1316.00\n",
       "2021-11-29        0            0  1392.500000  1374.85\n",
       "2021-11-30        0            1  1394.428571  1435.20\n",
       "2021-12-01        0            2  1398.571429  1436.70\n",
       "\n",
       "[1037 rows x 4 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "410d9193",
   "metadata": {},
   "source": [
    "## use MinMaxScaler to scale the data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "3e80dcae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00000000e+00, 3.33333333e-01, 0.00000000e+00, 2.11021461e-02],\n",
       "       [0.00000000e+00, 5.00000000e-01, 1.80647001e-03, 1.17597099e-02],\n",
       "       [0.00000000e+00, 6.66666667e-01, 5.70464215e-04, 9.14644105e-04],\n",
       "       ...,\n",
       "       [0.00000000e+00, 0.00000000e+00, 8.58976492e-01, 8.32489465e-01],\n",
       "       [0.00000000e+00, 1.66666667e-01, 8.60260037e-01, 8.71917159e-01],\n",
       "       [0.00000000e+00, 3.33333333e-01, 8.63017280e-01, 8.72897135e-01]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.compose import make_column_transformer\n",
    "import numpy as np\n",
    "transformer= make_column_transformer(\n",
    "    (MinMaxScaler(), ['holiday']),\n",
    "    (MinMaxScaler(), ['day_of_week']),\n",
    "    (MinMaxScaler(), ['rol_7']),\n",
    "    (MinMaxScaler(), ['rol_10']))\n",
    "\n",
    "X_scaled= transformer.fit_transform(X)\n",
    "X_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "9e5f2b07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transfer X_scaled into df\n",
    "X_scaled= pd.DataFrame( data= X_scaled, columns=X.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5a8aae5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "holiday        0.0\n",
       "day_of_week    0.0\n",
       "rol_7          0.0\n",
       "rol_10         0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "7cdb142d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "holiday        1.0\n",
       "day_of_week    1.0\n",
       "rol_7          1.0\n",
       "rol_10         1.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1c72c12e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_scaled.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb717daf",
   "metadata": {},
   "source": [
    "## feature & model selection "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a1926def",
   "metadata": {},
   "outputs": [],
   "source": [
    "# test 4 models: linear regression, decision tree regressor, KNN regressor, SGD regressor "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c1b01bcf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# model 1: linear regression  \n",
    "from sklearn import linear_model \n",
    "reg= linear_model.LinearRegression()\n",
    "reg.fit(X_scaled,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "6e770536",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8473156628039933"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# a quick test of r2 score\n",
    "from sklearn.metrics import r2_score\n",
    "r2_score(reg.predict(X_scaled),y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c399db79",
   "metadata": {},
   "outputs": [],
   "source": [
    "intercept, coef= reg.intercept_, reg.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "0f178caf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "intercept       289.076405\n",
       "holiday         334.849326\n",
       "day_of_week    -363.719979\n",
       "rol_7          1845.262861\n",
       "rol_10         -374.774249\n",
       "dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(data= [reg.intercept_] + list(reg.coef_), index=['intercept']+ list(X.columns)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "236d9e19",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove non-significant features in the'X= df.drop(['demand','y'],axis=1).set_index('date')' above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "47fbc825",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(data= [reg.intercept_] + list(reg.coef_), index=['intercept']+ list(X.columns)).plot.bar() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "23527465",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model 2: decision tree regressor\n",
    "from sklearn.tree import DecisionTreeRegressor \n",
    "dtr= DecisionTreeRegressor(random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "412e538c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model 3:  KNN regressor. Weights decrease when distance increases \n",
    "from sklearn.neighbors import KNeighborsRegressor \n",
    "knn = KNeighborsRegressor(n_neighbors=10, weights= 'distance')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "58b3d1f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model 4- the SGD regressor model \n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "\n",
    "sgdr = SGDRegressor()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e520def",
   "metadata": {},
   "source": [
    "## setup train,split,test for CrossValidation - timeseries and shufflesplit "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bea2a56",
   "metadata": {},
   "source": [
    "### K-fold cross validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "2001a319",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "kfcv= KFold(n_splits= 15)\n",
    "\n",
    "lin_scores = []\n",
    "dtr_scores = []\n",
    "knn_scores = []\n",
    "sgdr_scores= []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "03d48c19",
   "metadata": {},
   "outputs": [],
   "source": [
    "report = pd.DataFrame( columns=['split','max_error_lin','r2_lin', 'mae_lin', 'max_error_dtr','r2_dtr', 'mae_dtr','max_error_knn','r2_knn', 'mae_knn','max_error_sgdr','r2_sgdr', 'mae_sgdr'] )\n",
    "\n",
    "n=0 \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "1a50d2a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2982521988.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import max_error\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "for train, test in kfcv.split(X_scaled):\n",
    "    X_train, X_test = X_scaled.iloc[train], X_scaled.iloc[test]\n",
    "    y_train, y_test = y.iloc[train], y.iloc[test]\n",
    "    \n",
    "    reg.fit(X_train, y_train)\n",
    "    dtr.fit(X_train, y_train)\n",
    "    knn.fit(X_train, y_train)\n",
    "    sgdr.fit(X_train, y_train)\n",
    "    \n",
    "    reg_y_pred = reg.predict( X_test )\n",
    "    dtr_y_pred = dtr.predict( X_test )\n",
    "    knn_y_pred = knn.predict( X_test )\n",
    "    sgdr_y_pred = sgdr.predict( X_test )\n",
    "  \n",
    "    report= report.append({'split': n,\n",
    "                           'max_error_lin': max_error(reg_y_pred,y_test),\n",
    "                           'r2_lin': r2_score(reg_y_pred,y_test), \n",
    "                           'mae_lin':mean_absolute_error(reg_y_pred,y_test),\n",
    "                           'max_error_dtr': max_error(dtr_y_pred,y_test),\n",
    "                           'r2_dtr': r2_score(dtr_y_pred,y_test),\n",
    "                           'mae_dtr':mean_absolute_error(dtr_y_pred,y_test),\n",
    "                           'max_error_knn': max_error(knn_y_pred,y_test),\n",
    "                           'r2_knn': r2_score(knn_y_pred,y_test), \n",
    "                           'mae_knn':mean_absolute_error(knn_y_pred,y_test),\n",
    "                           'max_error_sgdr': max_error(sgdr_y_pred,y_test),\n",
    "                           'r2_sgdr': r2_score(sgdr_y_pred,y_test), \n",
    "                           'mae_sgdr':mean_absolute_error(sgdr_y_pred,y_test)},\n",
    "                           ignore_index=True)\n",
    "\n",
    "    n+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "29c67efe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>split</th>\n",
       "      <th>max_error_lin</th>\n",
       "      <th>r2_lin</th>\n",
       "      <th>mae_lin</th>\n",
       "      <th>max_error_dtr</th>\n",
       "      <th>r2_dtr</th>\n",
       "      <th>mae_dtr</th>\n",
       "      <th>max_error_knn</th>\n",
       "      <th>r2_knn</th>\n",
       "      <th>mae_knn</th>\n",
       "      <th>max_error_sgdr</th>\n",
       "      <th>r2_sgdr</th>\n",
       "      <th>mae_sgdr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>403.510573</td>\n",
       "      <td>0.338354</td>\n",
       "      <td>97.510761</td>\n",
       "      <td>177.5</td>\n",
       "      <td>-0.43932</td>\n",
       "      <td>62.921429</td>\n",
       "      <td>468.346371</td>\n",
       "      <td>-1.984432</td>\n",
       "      <td>108.567511</td>\n",
       "      <td>379.572624</td>\n",
       "      <td>0.345173</td>\n",
       "      <td>87.409107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>360.664295</td>\n",
       "      <td>0.511341</td>\n",
       "      <td>79.270032</td>\n",
       "      <td>117.5</td>\n",
       "      <td>0.428076</td>\n",
       "      <td>32.957143</td>\n",
       "      <td>301.038727</td>\n",
       "      <td>0.498066</td>\n",
       "      <td>34.988117</td>\n",
       "      <td>328.846226</td>\n",
       "      <td>0.505094</td>\n",
       "      <td>73.913615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>235.882911</td>\n",
       "      <td>0.511538</td>\n",
       "      <td>78.427873</td>\n",
       "      <td>172.5</td>\n",
       "      <td>0.222828</td>\n",
       "      <td>50.721014</td>\n",
       "      <td>245.828482</td>\n",
       "      <td>0.646641</td>\n",
       "      <td>30.422259</td>\n",
       "      <td>212.281278</td>\n",
       "      <td>0.507764</td>\n",
       "      <td>72.333388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>212.949813</td>\n",
       "      <td>0.597026</td>\n",
       "      <td>80.482763</td>\n",
       "      <td>348.0</td>\n",
       "      <td>-0.012396</td>\n",
       "      <td>63.195652</td>\n",
       "      <td>345.790763</td>\n",
       "      <td>0.617069</td>\n",
       "      <td>49.68798</td>\n",
       "      <td>225.18113</td>\n",
       "      <td>0.561548</td>\n",
       "      <td>79.04696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>326.64223</td>\n",
       "      <td>0.594188</td>\n",
       "      <td>79.180488</td>\n",
       "      <td>316.75</td>\n",
       "      <td>0.490299</td>\n",
       "      <td>76.778986</td>\n",
       "      <td>248.139885</td>\n",
       "      <td>0.694616</td>\n",
       "      <td>48.794161</td>\n",
       "      <td>334.743191</td>\n",
       "      <td>0.568593</td>\n",
       "      <td>77.544569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.0</td>\n",
       "      <td>333.564626</td>\n",
       "      <td>0.457364</td>\n",
       "      <td>91.021332</td>\n",
       "      <td>444.75</td>\n",
       "      <td>0.175701</td>\n",
       "      <td>93.474638</td>\n",
       "      <td>420.143129</td>\n",
       "      <td>0.363325</td>\n",
       "      <td>76.042608</td>\n",
       "      <td>389.028112</td>\n",
       "      <td>0.351712</td>\n",
       "      <td>94.305064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6.0</td>\n",
       "      <td>419.888375</td>\n",
       "      <td>0.548063</td>\n",
       "      <td>106.122431</td>\n",
       "      <td>458.25</td>\n",
       "      <td>0.499577</td>\n",
       "      <td>96.525362</td>\n",
       "      <td>322.047448</td>\n",
       "      <td>0.694759</td>\n",
       "      <td>76.776522</td>\n",
       "      <td>436.871612</td>\n",
       "      <td>0.435603</td>\n",
       "      <td>114.070222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7.0</td>\n",
       "      <td>380.165933</td>\n",
       "      <td>0.340025</td>\n",
       "      <td>85.16985</td>\n",
       "      <td>325.5</td>\n",
       "      <td>-0.10612</td>\n",
       "      <td>136.978261</td>\n",
       "      <td>372.755483</td>\n",
       "      <td>0.607022</td>\n",
       "      <td>53.289727</td>\n",
       "      <td>369.960575</td>\n",
       "      <td>0.29043</td>\n",
       "      <td>88.276122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.0</td>\n",
       "      <td>539.281054</td>\n",
       "      <td>0.227809</td>\n",
       "      <td>110.230289</td>\n",
       "      <td>408.75</td>\n",
       "      <td>0.501774</td>\n",
       "      <td>126.916667</td>\n",
       "      <td>411.661031</td>\n",
       "      <td>0.769054</td>\n",
       "      <td>63.328532</td>\n",
       "      <td>557.749541</td>\n",
       "      <td>0.105427</td>\n",
       "      <td>114.285185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9.0</td>\n",
       "      <td>328.100459</td>\n",
       "      <td>0.267002</td>\n",
       "      <td>104.563493</td>\n",
       "      <td>379.5</td>\n",
       "      <td>0.575363</td>\n",
       "      <td>102.496377</td>\n",
       "      <td>336.600502</td>\n",
       "      <td>0.700968</td>\n",
       "      <td>69.398256</td>\n",
       "      <td>313.619673</td>\n",
       "      <td>0.180842</td>\n",
       "      <td>109.843463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10.0</td>\n",
       "      <td>646.681356</td>\n",
       "      <td>-0.13611</td>\n",
       "      <td>138.535238</td>\n",
       "      <td>510.0</td>\n",
       "      <td>0.460358</td>\n",
       "      <td>124.775362</td>\n",
       "      <td>486.539228</td>\n",
       "      <td>0.66394</td>\n",
       "      <td>100.314555</td>\n",
       "      <td>665.510727</td>\n",
       "      <td>-0.345181</td>\n",
       "      <td>143.682542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11.0</td>\n",
       "      <td>441.561697</td>\n",
       "      <td>0.487457</td>\n",
       "      <td>147.401272</td>\n",
       "      <td>968.25</td>\n",
       "      <td>0.401649</td>\n",
       "      <td>275.92029</td>\n",
       "      <td>406.431077</td>\n",
       "      <td>0.495037</td>\n",
       "      <td>168.062113</td>\n",
       "      <td>517.879875</td>\n",
       "      <td>0.418691</td>\n",
       "      <td>155.270516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12.0</td>\n",
       "      <td>725.681601</td>\n",
       "      <td>-0.571816</td>\n",
       "      <td>180.57731</td>\n",
       "      <td>534.0</td>\n",
       "      <td>0.346401</td>\n",
       "      <td>208.775362</td>\n",
       "      <td>776.659038</td>\n",
       "      <td>0.585023</td>\n",
       "      <td>110.767725</td>\n",
       "      <td>795.543794</td>\n",
       "      <td>-0.966635</td>\n",
       "      <td>184.875409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13.0</td>\n",
       "      <td>788.603895</td>\n",
       "      <td>-0.603476</td>\n",
       "      <td>172.009206</td>\n",
       "      <td>923.25</td>\n",
       "      <td>0.497672</td>\n",
       "      <td>210.757246</td>\n",
       "      <td>942.219342</td>\n",
       "      <td>0.610736</td>\n",
       "      <td>87.418937</td>\n",
       "      <td>871.639937</td>\n",
       "      <td>-0.928621</td>\n",
       "      <td>175.97472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14.0</td>\n",
       "      <td>910.548027</td>\n",
       "      <td>-0.702295</td>\n",
       "      <td>178.799915</td>\n",
       "      <td>1026.75</td>\n",
       "      <td>0.378668</td>\n",
       "      <td>210.952899</td>\n",
       "      <td>739.670425</td>\n",
       "      <td>0.571671</td>\n",
       "      <td>113.612406</td>\n",
       "      <td>927.639033</td>\n",
       "      <td>-0.881045</td>\n",
       "      <td>179.411071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   split max_error_lin    r2_lin     mae_lin max_error_dtr    r2_dtr  \\\n",
       "0    0.0    403.510573  0.338354   97.510761         177.5  -0.43932   \n",
       "1    1.0    360.664295  0.511341   79.270032         117.5  0.428076   \n",
       "2    2.0    235.882911  0.511538   78.427873         172.5  0.222828   \n",
       "3    3.0    212.949813  0.597026   80.482763         348.0 -0.012396   \n",
       "4    4.0     326.64223  0.594188   79.180488        316.75  0.490299   \n",
       "5    5.0    333.564626  0.457364   91.021332        444.75  0.175701   \n",
       "6    6.0    419.888375  0.548063  106.122431        458.25  0.499577   \n",
       "7    7.0    380.165933  0.340025    85.16985         325.5  -0.10612   \n",
       "8    8.0    539.281054  0.227809  110.230289        408.75  0.501774   \n",
       "9    9.0    328.100459  0.267002  104.563493         379.5  0.575363   \n",
       "10  10.0    646.681356  -0.13611  138.535238         510.0  0.460358   \n",
       "11  11.0    441.561697  0.487457  147.401272        968.25  0.401649   \n",
       "12  12.0    725.681601 -0.571816   180.57731         534.0  0.346401   \n",
       "13  13.0    788.603895 -0.603476  172.009206        923.25  0.497672   \n",
       "14  14.0    910.548027 -0.702295  178.799915       1026.75  0.378668   \n",
       "\n",
       "       mae_dtr max_error_knn    r2_knn     mae_knn max_error_sgdr   r2_sgdr  \\\n",
       "0    62.921429    468.346371 -1.984432  108.567511     379.572624  0.345173   \n",
       "1    32.957143    301.038727  0.498066   34.988117     328.846226  0.505094   \n",
       "2    50.721014    245.828482  0.646641   30.422259     212.281278  0.507764   \n",
       "3    63.195652    345.790763  0.617069    49.68798      225.18113  0.561548   \n",
       "4    76.778986    248.139885  0.694616   48.794161     334.743191  0.568593   \n",
       "5    93.474638    420.143129  0.363325   76.042608     389.028112  0.351712   \n",
       "6    96.525362    322.047448  0.694759   76.776522     436.871612  0.435603   \n",
       "7   136.978261    372.755483  0.607022   53.289727     369.960575   0.29043   \n",
       "8   126.916667    411.661031  0.769054   63.328532     557.749541  0.105427   \n",
       "9   102.496377    336.600502  0.700968   69.398256     313.619673  0.180842   \n",
       "10  124.775362    486.539228   0.66394  100.314555     665.510727 -0.345181   \n",
       "11   275.92029    406.431077  0.495037  168.062113     517.879875  0.418691   \n",
       "12  208.775362    776.659038  0.585023  110.767725     795.543794 -0.966635   \n",
       "13  210.757246    942.219342  0.610736   87.418937     871.639937 -0.928621   \n",
       "14  210.952899    739.670425  0.571671  113.612406     927.639033 -0.881045   \n",
       "\n",
       "      mae_sgdr  \n",
       "0    87.409107  \n",
       "1    73.913615  \n",
       "2    72.333388  \n",
       "3     79.04696  \n",
       "4    77.544569  \n",
       "5    94.305064  \n",
       "6   114.070222  \n",
       "7    88.276122  \n",
       "8   114.285185  \n",
       "9   109.843463  \n",
       "10  143.682542  \n",
       "11  155.270516  \n",
       "12  184.875409  \n",
       "13   175.97472  \n",
       "14  179.411071  "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "60882bf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "split               7.000000\n",
       "max_error_lin     470.248456\n",
       "r2_lin              0.191098\n",
       "mae_lin           115.286817\n",
       "max_error_dtr     474.083333\n",
       "r2_dtr              0.294702\n",
       "mae_dtr           124.943112\n",
       "max_error_knn     454.924729\n",
       "r2_knn              0.435566\n",
       "mae_knn            79.431427\n",
       "max_error_sgdr    488.404489\n",
       "r2_sgdr             0.076626\n",
       "mae_sgdr          116.682797\n",
       "dtype: float64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "98ac03a1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "split                20.000000\n",
       "max_error_lin     43209.406489\n",
       "r2_lin                0.213444\n",
       "mae_lin            1449.512593\n",
       "max_error_dtr     81385.077381\n",
       "r2_dtr                0.080182\n",
       "mae_dtr            5070.265714\n",
       "max_error_knn     42081.642227\n",
       "r2_knn                0.458256\n",
       "mae_knn            1329.773436\n",
       "max_error_sgdr    52480.761911\n",
       "r2_sgdr               0.320834\n",
       "mae_sgdr           1663.352208\n",
       "dtype: float64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.var()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a74749a4",
   "metadata": {},
   "source": [
    "### report summary- KFold cross validation: \n",
    "KNN is the best model tested, with a mean r2 score of 0.435566. \n",
    "Except the extrme score for the 0th fold, mean R2 is 0.608423.mae_knn and max_error_knn are both the lowest among the models    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e0288b9",
   "metadata": {},
   "source": [
    "### TimeSeriesSplit Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "db76163d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "\n",
    "#at least 3 generally. time series cross validation\n",
    "tscv = TimeSeriesSplit(n_splits=50)\n",
    "\n",
    "lin_scores = []\n",
    "dtr_scores = []\n",
    "knn_scores = []\n",
    "sgdr_scores = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "36d99044",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using multiple metrics to access models_TimeSeriesSplit cross validation\n",
    "report = pd.DataFrame( columns=['split','max_error_lin','r2_lin', 'mae_lin', 'max_error_dtr','r2_dtr', 'mae_dtr','max_error_knn','r2_knn', 'mae_knn','max_error_sgdr','r2_sgdr', 'mae_sgdr'] )\n",
    "\n",
    "n=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "01303c2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\1313451084.py:19: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import max_error\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "for train, test in tscv.split(X):\n",
    "    X_train, X_test = X.iloc[train], X.iloc[test]\n",
    "    y_train, y_test = y.iloc[train], y.iloc[test]\n",
    "    \n",
    "    reg.fit(X_train, y_train)\n",
    "    dtr.fit(X_train, y_train)\n",
    "    knn.fit(X_train, y_train)\n",
    "    sgdr.fit(X_train, y_train)\n",
    "    \n",
    "    reg_y_pred = reg.predict( X_test )\n",
    "    dtr_y_pred = dtr.predict( X_test )\n",
    "    knn_y_pred = knn.predict( X_test )\n",
    "    sgdr_y_pred = sgdr.predict( X_test )\n",
    "\n",
    "    report= report.append({'split': n,\n",
    "                           'max_error_lin': max_error(reg_y_pred,y_test),\n",
    "                           'r2_lin': r2_score(reg_y_pred,y_test), \n",
    "                           'mae_lin':mean_absolute_error(reg_y_pred,y_test),\n",
    "                           'max_error_dtr': max_error(dtr_y_pred,y_test),\n",
    "                           'r2_dtr': r2_score(dtr_y_pred,y_test),\n",
    "                           'mae_dtr':mean_absolute_error(dtr_y_pred,y_test),\n",
    "                           'max_error_knn': max_error(knn_y_pred,y_test),\n",
    "                           'r2_knn': r2_score(knn_y_pred,y_test), \n",
    "                           'mae_knn':mean_absolute_error(knn_y_pred,y_test),\n",
    "                           'max_error_sgdr': max_error(sgdr_y_pred,y_test),\n",
    "                           'r2_sgdr': r2_score(sgdr_y_pred,y_test), \n",
    "                           'mae_sgdr':mean_absolute_error(sgdr_y_pred,y_test)},\n",
    "                           ignore_index=True)\n",
    "\n",
    "    n+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "e250dfed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>split</th>\n",
       "      <th>max_error_lin</th>\n",
       "      <th>r2_lin</th>\n",
       "      <th>mae_lin</th>\n",
       "      <th>max_error_dtr</th>\n",
       "      <th>r2_dtr</th>\n",
       "      <th>mae_dtr</th>\n",
       "      <th>max_error_knn</th>\n",
       "      <th>r2_knn</th>\n",
       "      <th>mae_knn</th>\n",
       "      <th>max_error_sgdr</th>\n",
       "      <th>r2_sgdr</th>\n",
       "      <th>mae_sgdr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>64.730229</td>\n",
       "      <td>-0.263933</td>\n",
       "      <td>24.258697</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.506348</td>\n",
       "      <td>20.875</td>\n",
       "      <td>76.070394</td>\n",
       "      <td>-15.792442</td>\n",
       "      <td>30.816923</td>\n",
       "      <td>30542266240080.234375</td>\n",
       "      <td>-48.786758</td>\n",
       "      <td>25155992032190.585938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>116.823704</td>\n",
       "      <td>0.211281</td>\n",
       "      <td>49.331911</td>\n",
       "      <td>250.5</td>\n",
       "      <td>-26.667285</td>\n",
       "      <td>103.375</td>\n",
       "      <td>267.996053</td>\n",
       "      <td>-1105.262661</td>\n",
       "      <td>93.143775</td>\n",
       "      <td>79603230282503.828125</td>\n",
       "      <td>-13.892527</td>\n",
       "      <td>55527318824713.898438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>144.063766</td>\n",
       "      <td>-2.009214</td>\n",
       "      <td>61.296291</td>\n",
       "      <td>261.5</td>\n",
       "      <td>-0.084654</td>\n",
       "      <td>56.2</td>\n",
       "      <td>165.292407</td>\n",
       "      <td>-15.294692</td>\n",
       "      <td>93.523747</td>\n",
       "      <td>91750515389839.078125</td>\n",
       "      <td>-181.649205</td>\n",
       "      <td>84951006758838.96875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>91.184472</td>\n",
       "      <td>-0.215158</td>\n",
       "      <td>29.624254</td>\n",
       "      <td>63.5</td>\n",
       "      <td>0.663936</td>\n",
       "      <td>22.775</td>\n",
       "      <td>98.841107</td>\n",
       "      <td>-90.973749</td>\n",
       "      <td>65.658105</td>\n",
       "      <td>70021520409015.039062</td>\n",
       "      <td>-368.055452</td>\n",
       "      <td>64266453879437.476562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>132.758124</td>\n",
       "      <td>-0.015886</td>\n",
       "      <td>48.804669</td>\n",
       "      <td>162.5</td>\n",
       "      <td>-0.494476</td>\n",
       "      <td>73.325</td>\n",
       "      <td>224.436612</td>\n",
       "      <td>-25.849743</td>\n",
       "      <td>54.074633</td>\n",
       "      <td>133368215235359.90625</td>\n",
       "      <td>-164.939968</td>\n",
       "      <td>122641017440865.71875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.0</td>\n",
       "      <td>46.801262</td>\n",
       "      <td>0.717987</td>\n",
       "      <td>20.964821</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.54112</td>\n",
       "      <td>62.425</td>\n",
       "      <td>121.376479</td>\n",
       "      <td>-16.451331</td>\n",
       "      <td>44.734072</td>\n",
       "      <td>61203405177823.117188</td>\n",
       "      <td>-514.303146</td>\n",
       "      <td>55610646105647.695312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6.0</td>\n",
       "      <td>74.659606</td>\n",
       "      <td>0.083857</td>\n",
       "      <td>34.410768</td>\n",
       "      <td>72.0</td>\n",
       "      <td>0.814912</td>\n",
       "      <td>31.1</td>\n",
       "      <td>110.641465</td>\n",
       "      <td>-5.457941</td>\n",
       "      <td>46.373793</td>\n",
       "      <td>33415003813005.671875</td>\n",
       "      <td>-212.350847</td>\n",
       "      <td>30257800614672.4375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7.0</td>\n",
       "      <td>91.356248</td>\n",
       "      <td>0.020265</td>\n",
       "      <td>44.633369</td>\n",
       "      <td>172.5</td>\n",
       "      <td>-0.038746</td>\n",
       "      <td>48.1</td>\n",
       "      <td>144.670498</td>\n",
       "      <td>-3.756309</td>\n",
       "      <td>57.29056</td>\n",
       "      <td>144960080755422.5</td>\n",
       "      <td>-228.898128</td>\n",
       "      <td>127157842358828.703125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.0</td>\n",
       "      <td>268.551188</td>\n",
       "      <td>-0.99309</td>\n",
       "      <td>58.645601</td>\n",
       "      <td>267.75</td>\n",
       "      <td>-3.831016</td>\n",
       "      <td>112.525</td>\n",
       "      <td>348.954549</td>\n",
       "      <td>-170.061934</td>\n",
       "      <td>108.415682</td>\n",
       "      <td>27701311266435.363281</td>\n",
       "      <td>-29.126052</td>\n",
       "      <td>19664528388586.613281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9.0</td>\n",
       "      <td>133.478552</td>\n",
       "      <td>-0.864353</td>\n",
       "      <td>56.579655</td>\n",
       "      <td>261.75</td>\n",
       "      <td>0.461608</td>\n",
       "      <td>54.2125</td>\n",
       "      <td>286.335952</td>\n",
       "      <td>-1.243599</td>\n",
       "      <td>93.163301</td>\n",
       "      <td>156883452315532.28125</td>\n",
       "      <td>-178.330428</td>\n",
       "      <td>139245839400908.40625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10.0</td>\n",
       "      <td>104.618876</td>\n",
       "      <td>-0.411826</td>\n",
       "      <td>40.041844</td>\n",
       "      <td>212.25</td>\n",
       "      <td>0.608552</td>\n",
       "      <td>52.9875</td>\n",
       "      <td>203.168917</td>\n",
       "      <td>-2.127911</td>\n",
       "      <td>81.497676</td>\n",
       "      <td>144834469931242.5</td>\n",
       "      <td>-183.224928</td>\n",
       "      <td>126777045712638.03125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11.0</td>\n",
       "      <td>258.547026</td>\n",
       "      <td>-1.25897</td>\n",
       "      <td>89.981302</td>\n",
       "      <td>459.0</td>\n",
       "      <td>0.005525</td>\n",
       "      <td>88.7875</td>\n",
       "      <td>379.400705</td>\n",
       "      <td>-47.375713</td>\n",
       "      <td>120.00141</td>\n",
       "      <td>183267558758563.71875</td>\n",
       "      <td>-95.478337</td>\n",
       "      <td>147598951913396.5625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12.0</td>\n",
       "      <td>322.015334</td>\n",
       "      <td>-0.9683</td>\n",
       "      <td>83.758239</td>\n",
       "      <td>330.75</td>\n",
       "      <td>0.507887</td>\n",
       "      <td>75.3375</td>\n",
       "      <td>400.209315</td>\n",
       "      <td>-16.733418</td>\n",
       "      <td>102.783989</td>\n",
       "      <td>258719350813878.90625</td>\n",
       "      <td>-150.761826</td>\n",
       "      <td>229781430222139.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13.0</td>\n",
       "      <td>122.498628</td>\n",
       "      <td>0.351276</td>\n",
       "      <td>47.106449</td>\n",
       "      <td>316.75</td>\n",
       "      <td>0.341736</td>\n",
       "      <td>68.7625</td>\n",
       "      <td>178.782149</td>\n",
       "      <td>-2.582985</td>\n",
       "      <td>85.374581</td>\n",
       "      <td>13036071823343.923828</td>\n",
       "      <td>-51.18687</td>\n",
       "      <td>10616477239979.207031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14.0</td>\n",
       "      <td>107.824173</td>\n",
       "      <td>0.481045</td>\n",
       "      <td>63.6651</td>\n",
       "      <td>222.75</td>\n",
       "      <td>0.647643</td>\n",
       "      <td>77.3125</td>\n",
       "      <td>153.583848</td>\n",
       "      <td>-0.72633</td>\n",
       "      <td>64.9451</td>\n",
       "      <td>147426466622409.1875</td>\n",
       "      <td>-88.32774</td>\n",
       "      <td>120881609338109.453125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15.0</td>\n",
       "      <td>375.824972</td>\n",
       "      <td>-0.71823</td>\n",
       "      <td>75.93575</td>\n",
       "      <td>370.5</td>\n",
       "      <td>0.394605</td>\n",
       "      <td>69.4625</td>\n",
       "      <td>446.728944</td>\n",
       "      <td>-10.310841</td>\n",
       "      <td>124.572483</td>\n",
       "      <td>304324053714805.6875</td>\n",
       "      <td>-401.805488</td>\n",
       "      <td>258516357303097.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16.0</td>\n",
       "      <td>207.261122</td>\n",
       "      <td>-2.28727</td>\n",
       "      <td>86.178234</td>\n",
       "      <td>339.0</td>\n",
       "      <td>0.660379</td>\n",
       "      <td>63.6</td>\n",
       "      <td>507.383737</td>\n",
       "      <td>-1.469827</td>\n",
       "      <td>147.559604</td>\n",
       "      <td>164848985518419.46875</td>\n",
       "      <td>-276.615461</td>\n",
       "      <td>147066587687394.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17.0</td>\n",
       "      <td>411.204917</td>\n",
       "      <td>-0.584253</td>\n",
       "      <td>124.144511</td>\n",
       "      <td>673.75</td>\n",
       "      <td>0.421733</td>\n",
       "      <td>110.8375</td>\n",
       "      <td>529.763329</td>\n",
       "      <td>-13.156036</td>\n",
       "      <td>174.101491</td>\n",
       "      <td>348758223937872.9375</td>\n",
       "      <td>-41.36578</td>\n",
       "      <td>296286370501689.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18.0</td>\n",
       "      <td>174.060488</td>\n",
       "      <td>-1.675516</td>\n",
       "      <td>70.058209</td>\n",
       "      <td>295.5</td>\n",
       "      <td>0.676353</td>\n",
       "      <td>116.6</td>\n",
       "      <td>242.340821</td>\n",
       "      <td>-6.759928</td>\n",
       "      <td>139.670426</td>\n",
       "      <td>66777647136770.179688</td>\n",
       "      <td>-4478.381692</td>\n",
       "      <td>65236678124154.460938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19.0</td>\n",
       "      <td>241.299611</td>\n",
       "      <td>0.298915</td>\n",
       "      <td>106.769064</td>\n",
       "      <td>402.0</td>\n",
       "      <td>-0.770356</td>\n",
       "      <td>178.6625</td>\n",
       "      <td>513.953926</td>\n",
       "      <td>-7.867202</td>\n",
       "      <td>131.45441</td>\n",
       "      <td>42798570465083.484375</td>\n",
       "      <td>-20.028975</td>\n",
       "      <td>32045479910227.324219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20.0</td>\n",
       "      <td>278.706257</td>\n",
       "      <td>-0.704431</td>\n",
       "      <td>108.990171</td>\n",
       "      <td>428.25</td>\n",
       "      <td>0.222847</td>\n",
       "      <td>78.8625</td>\n",
       "      <td>429.727172</td>\n",
       "      <td>-115.117364</td>\n",
       "      <td>127.276714</td>\n",
       "      <td>109452680795990.96875</td>\n",
       "      <td>-95.087214</td>\n",
       "      <td>86363394950358.84375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21.0</td>\n",
       "      <td>306.064254</td>\n",
       "      <td>-0.319938</td>\n",
       "      <td>96.077821</td>\n",
       "      <td>267.5</td>\n",
       "      <td>-11.373285</td>\n",
       "      <td>177.625</td>\n",
       "      <td>424.721393</td>\n",
       "      <td>-7.156037</td>\n",
       "      <td>171.453393</td>\n",
       "      <td>221417624007786.25</td>\n",
       "      <td>-53.7643</td>\n",
       "      <td>163158619183155.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22.0</td>\n",
       "      <td>471.045482</td>\n",
       "      <td>-1.330944</td>\n",
       "      <td>123.335262</td>\n",
       "      <td>520.5</td>\n",
       "      <td>-2.063143</td>\n",
       "      <td>136.975</td>\n",
       "      <td>629.357835</td>\n",
       "      <td>-16.644494</td>\n",
       "      <td>175.147939</td>\n",
       "      <td>350223748901612.0625</td>\n",
       "      <td>-215.425207</td>\n",
       "      <td>314014922265238.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23.0</td>\n",
       "      <td>148.372768</td>\n",
       "      <td>0.152829</td>\n",
       "      <td>71.555663</td>\n",
       "      <td>421.5</td>\n",
       "      <td>0.396192</td>\n",
       "      <td>123.35</td>\n",
       "      <td>254.911971</td>\n",
       "      <td>-2.379615</td>\n",
       "      <td>127.489054</td>\n",
       "      <td>423739631219157.125</td>\n",
       "      <td>-383.242555</td>\n",
       "      <td>389122267698560.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24.0</td>\n",
       "      <td>266.82118</td>\n",
       "      <td>-1.411336</td>\n",
       "      <td>95.255137</td>\n",
       "      <td>196.5</td>\n",
       "      <td>0.4752</td>\n",
       "      <td>47.9</td>\n",
       "      <td>248.49416</td>\n",
       "      <td>-5.717479</td>\n",
       "      <td>139.971418</td>\n",
       "      <td>330724826828984.1875</td>\n",
       "      <td>-934.322435</td>\n",
       "      <td>313710580465432.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25.0</td>\n",
       "      <td>191.491585</td>\n",
       "      <td>-1.687374</td>\n",
       "      <td>85.934594</td>\n",
       "      <td>143.0</td>\n",
       "      <td>0.92765</td>\n",
       "      <td>23.7</td>\n",
       "      <td>217.547084</td>\n",
       "      <td>-3.435548</td>\n",
       "      <td>119.694386</td>\n",
       "      <td>346013197572830.9375</td>\n",
       "      <td>-1523.255851</td>\n",
       "      <td>333183807798722.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26.0</td>\n",
       "      <td>195.008345</td>\n",
       "      <td>-0.334144</td>\n",
       "      <td>94.848738</td>\n",
       "      <td>325.5</td>\n",
       "      <td>0.17821</td>\n",
       "      <td>113.75</td>\n",
       "      <td>306.965472</td>\n",
       "      <td>-8.601651</td>\n",
       "      <td>112.736286</td>\n",
       "      <td>209038468724071.59375</td>\n",
       "      <td>-130.74057</td>\n",
       "      <td>185474027776959.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27.0</td>\n",
       "      <td>551.3947</td>\n",
       "      <td>-1.871157</td>\n",
       "      <td>156.457065</td>\n",
       "      <td>297.0</td>\n",
       "      <td>0.440177</td>\n",
       "      <td>128.8375</td>\n",
       "      <td>704.70393</td>\n",
       "      <td>-17.47218</td>\n",
       "      <td>209.423512</td>\n",
       "      <td>163056848643133.3125</td>\n",
       "      <td>-29.320705</td>\n",
       "      <td>126860767126961.546875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28.0</td>\n",
       "      <td>212.043255</td>\n",
       "      <td>-1.204799</td>\n",
       "      <td>94.220336</td>\n",
       "      <td>247.5</td>\n",
       "      <td>0.68581</td>\n",
       "      <td>57.7</td>\n",
       "      <td>270.601397</td>\n",
       "      <td>-6.678384</td>\n",
       "      <td>134.637294</td>\n",
       "      <td>477316260767218.6875</td>\n",
       "      <td>-3395.022002</td>\n",
       "      <td>466679898634912.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29.0</td>\n",
       "      <td>575.450119</td>\n",
       "      <td>-0.798639</td>\n",
       "      <td>162.842571</td>\n",
       "      <td>545.25</td>\n",
       "      <td>0.43183</td>\n",
       "      <td>142.85</td>\n",
       "      <td>819.368674</td>\n",
       "      <td>-13.212412</td>\n",
       "      <td>218.372989</td>\n",
       "      <td>235286648490933.375</td>\n",
       "      <td>-42.100498</td>\n",
       "      <td>171525786944899.71875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30.0</td>\n",
       "      <td>221.130229</td>\n",
       "      <td>-0.216565</td>\n",
       "      <td>99.169529</td>\n",
       "      <td>537.5</td>\n",
       "      <td>0.302632</td>\n",
       "      <td>209.0125</td>\n",
       "      <td>314.145548</td>\n",
       "      <td>-3.583864</td>\n",
       "      <td>182.974748</td>\n",
       "      <td>572221636795623.75</td>\n",
       "      <td>-1603.107477</td>\n",
       "      <td>551386961884112.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>31.0</td>\n",
       "      <td>212.59471</td>\n",
       "      <td>-0.085179</td>\n",
       "      <td>91.844939</td>\n",
       "      <td>450.75</td>\n",
       "      <td>0.636319</td>\n",
       "      <td>113.4</td>\n",
       "      <td>248.445305</td>\n",
       "      <td>-2.155151</td>\n",
       "      <td>137.346186</td>\n",
       "      <td>468319216826104.875</td>\n",
       "      <td>-755.598428</td>\n",
       "      <td>445422473912171.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32.0</td>\n",
       "      <td>242.567469</td>\n",
       "      <td>-0.740303</td>\n",
       "      <td>89.340268</td>\n",
       "      <td>333.5</td>\n",
       "      <td>0.654547</td>\n",
       "      <td>67.25</td>\n",
       "      <td>333.021588</td>\n",
       "      <td>-3.873612</td>\n",
       "      <td>112.352102</td>\n",
       "      <td>496334913138846.8125</td>\n",
       "      <td>-933.666878</td>\n",
       "      <td>470975894704439.1875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33.0</td>\n",
       "      <td>226.741625</td>\n",
       "      <td>-0.067231</td>\n",
       "      <td>108.125808</td>\n",
       "      <td>126.0</td>\n",
       "      <td>0.899796</td>\n",
       "      <td>53.7375</td>\n",
       "      <td>344.319746</td>\n",
       "      <td>-4.584322</td>\n",
       "      <td>203.791732</td>\n",
       "      <td>338728691141341.5</td>\n",
       "      <td>-227.408306</td>\n",
       "      <td>297000245428268.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>34.0</td>\n",
       "      <td>680.697148</td>\n",
       "      <td>-2.055497</td>\n",
       "      <td>188.354304</td>\n",
       "      <td>660.75</td>\n",
       "      <td>0.433327</td>\n",
       "      <td>110.7375</td>\n",
       "      <td>837.75203</td>\n",
       "      <td>-12.175058</td>\n",
       "      <td>249.044633</td>\n",
       "      <td>911306368436587.25</td>\n",
       "      <td>-216.963536</td>\n",
       "      <td>828545150846950.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35.0</td>\n",
       "      <td>667.727828</td>\n",
       "      <td>-1.338941</td>\n",
       "      <td>174.542315</td>\n",
       "      <td>359.0</td>\n",
       "      <td>0.884416</td>\n",
       "      <td>64.825</td>\n",
       "      <td>791.273333</td>\n",
       "      <td>-9.770208</td>\n",
       "      <td>217.417283</td>\n",
       "      <td>710306867948049.75</td>\n",
       "      <td>-177.056615</td>\n",
       "      <td>629609790243628.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36.0</td>\n",
       "      <td>270.735054</td>\n",
       "      <td>-0.272747</td>\n",
       "      <td>125.547939</td>\n",
       "      <td>558.75</td>\n",
       "      <td>0.547056</td>\n",
       "      <td>176.2</td>\n",
       "      <td>403.498806</td>\n",
       "      <td>-0.853252</td>\n",
       "      <td>178.067831</td>\n",
       "      <td>34710604806791.292969</td>\n",
       "      <td>-2.873941</td>\n",
       "      <td>21563145685091.78125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37.0</td>\n",
       "      <td>458.849587</td>\n",
       "      <td>-0.72716</td>\n",
       "      <td>158.431593</td>\n",
       "      <td>498.5</td>\n",
       "      <td>-0.009181</td>\n",
       "      <td>158.7375</td>\n",
       "      <td>924.275648</td>\n",
       "      <td>-6.089531</td>\n",
       "      <td>225.850176</td>\n",
       "      <td>1062095769148924.125</td>\n",
       "      <td>-105.10973</td>\n",
       "      <td>823494270432261.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38.0</td>\n",
       "      <td>422.198186</td>\n",
       "      <td>-7.244942</td>\n",
       "      <td>197.834469</td>\n",
       "      <td>60.75</td>\n",
       "      <td>0.990151</td>\n",
       "      <td>20.55</td>\n",
       "      <td>680.247079</td>\n",
       "      <td>-99.617539</td>\n",
       "      <td>195.995052</td>\n",
       "      <td>646002154886396.5</td>\n",
       "      <td>-372.218553</td>\n",
       "      <td>595318636210924.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39.0</td>\n",
       "      <td>285.777284</td>\n",
       "      <td>0.412896</td>\n",
       "      <td>109.622176</td>\n",
       "      <td>597.0</td>\n",
       "      <td>0.298899</td>\n",
       "      <td>271.7375</td>\n",
       "      <td>622.022532</td>\n",
       "      <td>-2.588577</td>\n",
       "      <td>233.953012</td>\n",
       "      <td>204156084386050.4375</td>\n",
       "      <td>-57.354303</td>\n",
       "      <td>163686688150116.96875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40.0</td>\n",
       "      <td>739.58701</td>\n",
       "      <td>-1.564947</td>\n",
       "      <td>202.835327</td>\n",
       "      <td>714.75</td>\n",
       "      <td>-0.024131</td>\n",
       "      <td>228.025</td>\n",
       "      <td>929.371071</td>\n",
       "      <td>-28.378454</td>\n",
       "      <td>306.194526</td>\n",
       "      <td>1294298657903657.5</td>\n",
       "      <td>-208.731434</td>\n",
       "      <td>1131396284895855.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41.0</td>\n",
       "      <td>377.007317</td>\n",
       "      <td>-1.776132</td>\n",
       "      <td>158.12554</td>\n",
       "      <td>686.25</td>\n",
       "      <td>0.690017</td>\n",
       "      <td>110.425</td>\n",
       "      <td>293.151522</td>\n",
       "      <td>-3.680242</td>\n",
       "      <td>162.750053</td>\n",
       "      <td>1334083937778289.25</td>\n",
       "      <td>-510.915935</td>\n",
       "      <td>1196584329983318.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42.0</td>\n",
       "      <td>710.415251</td>\n",
       "      <td>-0.614758</td>\n",
       "      <td>238.901734</td>\n",
       "      <td>751.5</td>\n",
       "      <td>0.620812</td>\n",
       "      <td>200.425</td>\n",
       "      <td>1036.296941</td>\n",
       "      <td>-2.939541</td>\n",
       "      <td>286.688067</td>\n",
       "      <td>746059702907722.875</td>\n",
       "      <td>-49.441569</td>\n",
       "      <td>631354108188411.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43.0</td>\n",
       "      <td>293.95375</td>\n",
       "      <td>-1.230173</td>\n",
       "      <td>127.515633</td>\n",
       "      <td>636.0</td>\n",
       "      <td>0.59866</td>\n",
       "      <td>247.375</td>\n",
       "      <td>505.677383</td>\n",
       "      <td>-2.894615</td>\n",
       "      <td>235.073067</td>\n",
       "      <td>142650640609153.0625</td>\n",
       "      <td>-128.306976</td>\n",
       "      <td>130244274977344.40625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44.0</td>\n",
       "      <td>311.014606</td>\n",
       "      <td>-1.512294</td>\n",
       "      <td>136.841869</td>\n",
       "      <td>353.5</td>\n",
       "      <td>-0.707064</td>\n",
       "      <td>208.125</td>\n",
       "      <td>437.114202</td>\n",
       "      <td>-6.395877</td>\n",
       "      <td>258.144299</td>\n",
       "      <td>1182918889277248.25</td>\n",
       "      <td>-3447.168403</td>\n",
       "      <td>1150396097950809.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45.0</td>\n",
       "      <td>782.684826</td>\n",
       "      <td>-0.92775</td>\n",
       "      <td>275.113863</td>\n",
       "      <td>923.25</td>\n",
       "      <td>0.254968</td>\n",
       "      <td>213.0875</td>\n",
       "      <td>1028.493072</td>\n",
       "      <td>-10.685686</td>\n",
       "      <td>295.890942</td>\n",
       "      <td>1496539032367382.5</td>\n",
       "      <td>-63.000183</td>\n",
       "      <td>1247999764952831.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46.0</td>\n",
       "      <td>321.007423</td>\n",
       "      <td>-0.131112</td>\n",
       "      <td>126.394317</td>\n",
       "      <td>397.5</td>\n",
       "      <td>0.503812</td>\n",
       "      <td>185.75</td>\n",
       "      <td>569.629807</td>\n",
       "      <td>-5.684123</td>\n",
       "      <td>316.490541</td>\n",
       "      <td>1292532575233863.5</td>\n",
       "      <td>-123.199041</td>\n",
       "      <td>1074732771762994.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>47.0</td>\n",
       "      <td>909.774499</td>\n",
       "      <td>-2.158048</td>\n",
       "      <td>260.050692</td>\n",
       "      <td>1026.75</td>\n",
       "      <td>0.351651</td>\n",
       "      <td>131.1125</td>\n",
       "      <td>1072.919928</td>\n",
       "      <td>-21.668264</td>\n",
       "      <td>316.304312</td>\n",
       "      <td>1222602527060517.5</td>\n",
       "      <td>-189.403586</td>\n",
       "      <td>1098003677640779.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>48.0</td>\n",
       "      <td>328.467076</td>\n",
       "      <td>0.16843</td>\n",
       "      <td>138.783322</td>\n",
       "      <td>700.0</td>\n",
       "      <td>-0.551242</td>\n",
       "      <td>304.225</td>\n",
       "      <td>475.44751</td>\n",
       "      <td>0.005086</td>\n",
       "      <td>125.206073</td>\n",
       "      <td>133310333178619.109375</td>\n",
       "      <td>-5.411876</td>\n",
       "      <td>70774695643047.390625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>49.0</td>\n",
       "      <td>322.148002</td>\n",
       "      <td>-0.379537</td>\n",
       "      <td>156.031958</td>\n",
       "      <td>647.25</td>\n",
       "      <td>0.089376</td>\n",
       "      <td>360.5625</td>\n",
       "      <td>757.518342</td>\n",
       "      <td>-3.798846</td>\n",
       "      <td>356.122624</td>\n",
       "      <td>87426067452343.984375</td>\n",
       "      <td>-14.636559</td>\n",
       "      <td>59808445443942.703125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   split max_error_lin    r2_lin     mae_lin max_error_dtr     r2_dtr  \\\n",
       "0    0.0     64.730229 -0.263933   24.258697          42.0   0.506348   \n",
       "1    1.0    116.823704  0.211281   49.331911         250.5 -26.667285   \n",
       "2    2.0    144.063766 -2.009214   61.296291         261.5  -0.084654   \n",
       "3    3.0     91.184472 -0.215158   29.624254          63.5   0.663936   \n",
       "4    4.0    132.758124 -0.015886   48.804669         162.5  -0.494476   \n",
       "5    5.0     46.801262  0.717987   20.964821         141.0    0.54112   \n",
       "6    6.0     74.659606  0.083857   34.410768          72.0   0.814912   \n",
       "7    7.0     91.356248  0.020265   44.633369         172.5  -0.038746   \n",
       "8    8.0    268.551188  -0.99309   58.645601        267.75  -3.831016   \n",
       "9    9.0    133.478552 -0.864353   56.579655        261.75   0.461608   \n",
       "10  10.0    104.618876 -0.411826   40.041844        212.25   0.608552   \n",
       "11  11.0    258.547026  -1.25897   89.981302         459.0   0.005525   \n",
       "12  12.0    322.015334   -0.9683   83.758239        330.75   0.507887   \n",
       "13  13.0    122.498628  0.351276   47.106449        316.75   0.341736   \n",
       "14  14.0    107.824173  0.481045     63.6651        222.75   0.647643   \n",
       "15  15.0    375.824972  -0.71823    75.93575         370.5   0.394605   \n",
       "16  16.0    207.261122  -2.28727   86.178234         339.0   0.660379   \n",
       "17  17.0    411.204917 -0.584253  124.144511        673.75   0.421733   \n",
       "18  18.0    174.060488 -1.675516   70.058209         295.5   0.676353   \n",
       "19  19.0    241.299611  0.298915  106.769064         402.0  -0.770356   \n",
       "20  20.0    278.706257 -0.704431  108.990171        428.25   0.222847   \n",
       "21  21.0    306.064254 -0.319938   96.077821         267.5 -11.373285   \n",
       "22  22.0    471.045482 -1.330944  123.335262         520.5  -2.063143   \n",
       "23  23.0    148.372768  0.152829   71.555663         421.5   0.396192   \n",
       "24  24.0     266.82118 -1.411336   95.255137         196.5     0.4752   \n",
       "25  25.0    191.491585 -1.687374   85.934594         143.0    0.92765   \n",
       "26  26.0    195.008345 -0.334144   94.848738         325.5    0.17821   \n",
       "27  27.0      551.3947 -1.871157  156.457065         297.0   0.440177   \n",
       "28  28.0    212.043255 -1.204799   94.220336         247.5    0.68581   \n",
       "29  29.0    575.450119 -0.798639  162.842571        545.25    0.43183   \n",
       "30  30.0    221.130229 -0.216565   99.169529         537.5   0.302632   \n",
       "31  31.0     212.59471 -0.085179   91.844939        450.75   0.636319   \n",
       "32  32.0    242.567469 -0.740303   89.340268         333.5   0.654547   \n",
       "33  33.0    226.741625 -0.067231  108.125808         126.0   0.899796   \n",
       "34  34.0    680.697148 -2.055497  188.354304        660.75   0.433327   \n",
       "35  35.0    667.727828 -1.338941  174.542315         359.0   0.884416   \n",
       "36  36.0    270.735054 -0.272747  125.547939        558.75   0.547056   \n",
       "37  37.0    458.849587  -0.72716  158.431593         498.5  -0.009181   \n",
       "38  38.0    422.198186 -7.244942  197.834469         60.75   0.990151   \n",
       "39  39.0    285.777284  0.412896  109.622176         597.0   0.298899   \n",
       "40  40.0     739.58701 -1.564947  202.835327        714.75  -0.024131   \n",
       "41  41.0    377.007317 -1.776132   158.12554        686.25   0.690017   \n",
       "42  42.0    710.415251 -0.614758  238.901734         751.5   0.620812   \n",
       "43  43.0     293.95375 -1.230173  127.515633         636.0    0.59866   \n",
       "44  44.0    311.014606 -1.512294  136.841869         353.5  -0.707064   \n",
       "45  45.0    782.684826  -0.92775  275.113863        923.25   0.254968   \n",
       "46  46.0    321.007423 -0.131112  126.394317         397.5   0.503812   \n",
       "47  47.0    909.774499 -2.158048  260.050692       1026.75   0.351651   \n",
       "48  48.0    328.467076   0.16843  138.783322         700.0  -0.551242   \n",
       "49  49.0    322.148002 -0.379537  156.031958        647.25   0.089376   \n",
       "\n",
       "     mae_dtr max_error_knn       r2_knn     mae_knn          max_error_sgdr  \\\n",
       "0     20.875     76.070394   -15.792442   30.816923   30542266240080.234375   \n",
       "1    103.375    267.996053 -1105.262661   93.143775   79603230282503.828125   \n",
       "2       56.2    165.292407   -15.294692   93.523747   91750515389839.078125   \n",
       "3     22.775     98.841107   -90.973749   65.658105   70021520409015.039062   \n",
       "4     73.325    224.436612   -25.849743   54.074633   133368215235359.90625   \n",
       "5     62.425    121.376479   -16.451331   44.734072   61203405177823.117188   \n",
       "6       31.1    110.641465    -5.457941   46.373793   33415003813005.671875   \n",
       "7       48.1    144.670498    -3.756309    57.29056       144960080755422.5   \n",
       "8    112.525    348.954549  -170.061934  108.415682   27701311266435.363281   \n",
       "9    54.2125    286.335952    -1.243599   93.163301   156883452315532.28125   \n",
       "10   52.9875    203.168917    -2.127911   81.497676       144834469931242.5   \n",
       "11   88.7875    379.400705   -47.375713   120.00141   183267558758563.71875   \n",
       "12   75.3375    400.209315   -16.733418  102.783989   258719350813878.90625   \n",
       "13   68.7625    178.782149    -2.582985   85.374581   13036071823343.923828   \n",
       "14   77.3125    153.583848     -0.72633     64.9451    147426466622409.1875   \n",
       "15   69.4625    446.728944   -10.310841  124.572483    304324053714805.6875   \n",
       "16      63.6    507.383737    -1.469827  147.559604   164848985518419.46875   \n",
       "17  110.8375    529.763329   -13.156036  174.101491    348758223937872.9375   \n",
       "18     116.6    242.340821    -6.759928  139.670426   66777647136770.179688   \n",
       "19  178.6625    513.953926    -7.867202   131.45441   42798570465083.484375   \n",
       "20   78.8625    429.727172  -115.117364  127.276714   109452680795990.96875   \n",
       "21   177.625    424.721393    -7.156037  171.453393      221417624007786.25   \n",
       "22   136.975    629.357835   -16.644494  175.147939    350223748901612.0625   \n",
       "23    123.35    254.911971    -2.379615  127.489054     423739631219157.125   \n",
       "24      47.9     248.49416    -5.717479  139.971418    330724826828984.1875   \n",
       "25      23.7    217.547084    -3.435548  119.694386    346013197572830.9375   \n",
       "26    113.75    306.965472    -8.601651  112.736286   209038468724071.59375   \n",
       "27  128.8375     704.70393    -17.47218  209.423512    163056848643133.3125   \n",
       "28      57.7    270.601397    -6.678384  134.637294    477316260767218.6875   \n",
       "29    142.85    819.368674   -13.212412  218.372989     235286648490933.375   \n",
       "30  209.0125    314.145548    -3.583864  182.974748      572221636795623.75   \n",
       "31     113.4    248.445305    -2.155151  137.346186     468319216826104.875   \n",
       "32     67.25    333.021588    -3.873612  112.352102    496334913138846.8125   \n",
       "33   53.7375    344.319746    -4.584322  203.791732       338728691141341.5   \n",
       "34  110.7375     837.75203   -12.175058  249.044633      911306368436587.25   \n",
       "35    64.825    791.273333    -9.770208  217.417283      710306867948049.75   \n",
       "36     176.2    403.498806    -0.853252  178.067831   34710604806791.292969   \n",
       "37  158.7375    924.275648    -6.089531  225.850176    1062095769148924.125   \n",
       "38     20.55    680.247079   -99.617539  195.995052       646002154886396.5   \n",
       "39  271.7375    622.022532    -2.588577  233.953012    204156084386050.4375   \n",
       "40   228.025    929.371071   -28.378454  306.194526      1294298657903657.5   \n",
       "41   110.425    293.151522    -3.680242  162.750053     1334083937778289.25   \n",
       "42   200.425   1036.296941    -2.939541  286.688067     746059702907722.875   \n",
       "43   247.375    505.677383    -2.894615  235.073067    142650640609153.0625   \n",
       "44   208.125    437.114202    -6.395877  258.144299     1182918889277248.25   \n",
       "45  213.0875   1028.493072   -10.685686  295.890942      1496539032367382.5   \n",
       "46    185.75    569.629807    -5.684123  316.490541      1292532575233863.5   \n",
       "47  131.1125   1072.919928   -21.668264  316.304312      1222602527060517.5   \n",
       "48   304.225     475.44751     0.005086  125.206073  133310333178619.109375   \n",
       "49  360.5625    757.518342    -3.798846  356.122624   87426067452343.984375   \n",
       "\n",
       "        r2_sgdr                mae_sgdr  \n",
       "0    -48.786758   25155992032190.585938  \n",
       "1    -13.892527   55527318824713.898438  \n",
       "2   -181.649205    84951006758838.96875  \n",
       "3   -368.055452   64266453879437.476562  \n",
       "4   -164.939968   122641017440865.71875  \n",
       "5   -514.303146   55610646105647.695312  \n",
       "6   -212.350847     30257800614672.4375  \n",
       "7   -228.898128  127157842358828.703125  \n",
       "8    -29.126052   19664528388586.613281  \n",
       "9   -178.330428   139245839400908.40625  \n",
       "10  -183.224928   126777045712638.03125  \n",
       "11   -95.478337    147598951913396.5625  \n",
       "12  -150.761826      229781430222139.25  \n",
       "13    -51.18687   10616477239979.207031  \n",
       "14    -88.32774  120881609338109.453125  \n",
       "15  -401.805488       258516357303097.0  \n",
       "16  -276.615461     147066587687394.375  \n",
       "17    -41.36578       296286370501689.0  \n",
       "18 -4478.381692   65236678124154.460938  \n",
       "19   -20.028975   32045479910227.324219  \n",
       "20   -95.087214    86363394950358.84375  \n",
       "21     -53.7643       163158619183155.5  \n",
       "22  -215.425207     314014922265238.625  \n",
       "23  -383.242555      389122267698560.75  \n",
       "24  -934.322435       313710580465432.0  \n",
       "25 -1523.255851      333183807798722.75  \n",
       "26   -130.74057     185474027776959.875  \n",
       "27   -29.320705  126860767126961.546875  \n",
       "28 -3395.022002    466679898634912.8125  \n",
       "29   -42.100498   171525786944899.71875  \n",
       "30 -1603.107477     551386961884112.125  \n",
       "31  -755.598428     445422473912171.625  \n",
       "32  -933.666878    470975894704439.1875  \n",
       "33  -227.408306     297000245428268.125  \n",
       "34  -216.963536      828545150846950.75  \n",
       "35  -177.056615      629609790243628.25  \n",
       "36    -2.873941    21563145685091.78125  \n",
       "37   -105.10973     823494270432261.375  \n",
       "38  -372.218553     595318636210924.375  \n",
       "39   -57.354303   163686688150116.96875  \n",
       "40  -208.731434      1131396284895855.0  \n",
       "41  -510.915935      1196584329983318.0  \n",
       "42   -49.441569     631354108188411.125  \n",
       "43  -128.306976   130244274977344.40625  \n",
       "44 -3447.168403     1150396097950809.75  \n",
       "45   -63.000183      1247999764952831.5  \n",
       "46  -123.199041     1074732771762994.25  \n",
       "47  -189.403586     1098003677640779.75  \n",
       "48    -5.411876   70774695643047.390625  \n",
       "49   -14.636559   59808445443942.703125  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2161f479",
   "metadata": {},
   "source": [
    "### visualization - KFold cross validation for KNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "3dc268b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "kfcv= KFold(n_splits= 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "dd97e7c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# traing test split manual- 3/4 training, validation on 1/4\n",
    "X_train, X_test = X_scaled.iloc[ : int(0.75*len(X_scaled)) ], X_scaled.iloc[ int(0.75*len(X_scaled)) : ]\n",
    "y_train, y_test = y.iloc[ : int(0.75*len(y)) ], y.iloc[ int(0.75*len(y)) : ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "ccb85ca2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train model - KNN regressor. Weights decrease when distance increases \n",
    "from sklearn.neighbors import KNeighborsRegressor \n",
    "knn = KNeighborsRegressor(n_neighbors=5, weights= 'distance')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "38d89d4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(weights='distance')"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(X_train,y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "bb3f3d13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 909.98451626,  851.51375948,  849.17421713,  836.4871442 ,\n",
       "        854.62896514, 1251.36549524, 1306.46115112,  860.27727896,\n",
       "        836.85442407,  840.70396416,  859.10471713,  873.42428572,\n",
       "       1252.19344286, 1288.20173485,  920.8666722 ,  841.53656934,\n",
       "        836.94100648,  846.79551608,  855.47044284, 1457.21924778,\n",
       "       1383.99076502, 1243.62221234,  841.79747521,  842.8822341 ,\n",
       "        849.74965704,  860.44350387, 1543.55867089, 1367.81650081,\n",
       "       1250.51415857,  841.70476764,  842.91871407,  849.74326803,\n",
       "        860.44200339, 1543.44037111, 1366.79865161, 1251.24226085,\n",
       "        841.68005633,  842.92951363,  849.73003509,  860.43517521,\n",
       "       1461.0835754 , 1379.9710599 , 1241.00315097,  842.01042579,\n",
       "        842.69843334,  850.00135803,  854.82337797, 1444.38140363,\n",
       "       1442.55599276, 1038.09497283,  847.40050533,  851.01760198,\n",
       "        843.9634782 ,  855.80056303, 1202.0694431 , 1706.20285828,\n",
       "        844.20864134,  852.80224132,  846.79227568,  838.76101442,\n",
       "        853.03977607, 1213.38907193, 1536.30668587,  844.13038385,\n",
       "        845.11367943,  849.10079814,  839.43625064,  852.31804073,\n",
       "       1207.02411759, 1624.16085356,  842.78232417,  843.48461273,\n",
       "        842.76536613,  841.62094988,  852.04514659, 1729.29858703,\n",
       "       1447.4915133 , 1033.96867579,  843.13403006,  851.78474919,\n",
       "        852.33876183,  855.4075326 , 1302.56085319, 1576.57325325,\n",
       "        843.51875808,  853.67219312,  843.16180157,  841.67763269,\n",
       "        852.1048744 , 1202.68018284, 1656.28185157,  845.48330577,\n",
       "        848.67668234, 1121.20998044,  847.64590637,  855.87000347,\n",
       "       1200.47384322, 1672.50804363,  846.2272139 ,  850.63359877,\n",
       "        839.61455961,  847.68752816,  856.92309538, 1213.12764255,\n",
       "       1275.44895121,  863.4280407 ,  846.40956343,  851.30720238,\n",
       "        834.35129757,  853.31787306, 1750.33075053, 1438.92429523,\n",
       "       1236.99379435,  841.92895418,  842.77950444,  849.844432  ,\n",
       "        860.4637143 , 1459.93255969, 1396.41536625, 1034.08933074,\n",
       "        846.99690542,  851.03948144,  847.66865614,  857.42120623,\n",
       "       1200.05614947, 1668.07932971,  846.36992501,  850.70558975,\n",
       "        840.58068273,  847.65576721,  857.35064455, 1199.24091021,\n",
       "       1654.21109744,  845.83666642,  850.28927825,  840.72930083,\n",
       "        846.95245814,  856.9072005 , 1199.54195933, 1639.66426336,\n",
       "        969.90568926,  855.60481022,  841.33232612,  846.36550191,\n",
       "        856.18213845, 1199.09183111, 1637.20823627,  969.66603578,\n",
       "        855.61490921,  841.37819244,  846.29926213,  855.99757108,\n",
       "       1198.99505668, 1632.72587211,  981.49517175,  855.62595918,\n",
       "        847.73707108,  845.49405281,  855.2441577 , 1296.01632632,\n",
       "       1625.13091866,  990.59667722,  855.62889796,  847.87756741,\n",
       "        845.43562394,  855.28268573, 1198.05975755, 1529.27052652,\n",
       "        845.0731204 ,  853.54055392,  851.13437534,  838.11611702,\n",
       "        857.55393298, 1715.23289859, 1400.97212831, 1246.40760419,\n",
       "        841.71883875,  842.9068022 ,  849.7408068 ,  860.41758464,\n",
       "       1461.54021061, 1376.87060099, 1049.99380681,  846.74821915,\n",
       "        853.25570913,  846.11618755,  855.84112666, 1423.04240548,\n",
       "       1533.49935125, 1011.2755799 ,  855.75667268,  849.77052659,\n",
       "        846.02436957,  855.72243815, 1430.26731447, 1530.313843  ,\n",
       "       1030.25228472,  847.33315088,  851.40263603,  852.39935806,\n",
       "        855.54468606, 1432.81393496, 1515.69881066, 1031.01211302,\n",
       "        847.36457141,  851.09695018,  845.96186139,  855.58093969,\n",
       "       1679.45012469, 1377.65950437, 1242.98391496,  841.89048602,\n",
       "        842.78631486,  849.84104668,  860.46618588, 1459.03164446,\n",
       "       1467.6386984 , 1043.81409841,  846.91031275,  851.75159822,\n",
       "        852.34499016,  855.38885066, 1440.82984437, 1432.58514533,\n",
       "       1041.6963999 ,  842.94577306,  852.19942289,  852.29781111,\n",
       "        855.25082525, 1299.20484468, 1611.15244462,  844.60717851,\n",
       "        853.94272843,  842.19611352,  844.92469037,  859.23460032,\n",
       "       1200.36767963, 1537.70651189, 1200.92837831, 1287.80481786,\n",
       "        842.6333254 ,  849.93209608,  860.536862  , 1460.9277732 ,\n",
       "       1383.58102411, 1233.13440652,  842.29664139,  842.4009283 ,\n",
       "        852.16279411,  860.8655208 , 1450.72772331, 1411.46736948,\n",
       "       1052.11485505, 1288.53731974,  842.54272729,  849.97661824,\n",
       "        860.58293121, 1459.64036823, 1387.72306744, 1234.94044769])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds= knn.predict(X_test)\n",
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "b248f8d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((777, 4), (260, 4), (777,), (260,), 260)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X_test.shape, y_train.shape, y_test.shape, len(preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "d14b1af3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [2019-01-30 00:00:00, 2019-01-31 00:00:00, 2019-02-01 00:00:00, 2019-02-02 00:00:00, 2019-02-03 00:00:00, 2019-02-04 00:00:00, 2019-02-05 00:00:00, 2019-02-06 00:00:00, 2019-02-07 00:00:00, 2019-02-08 00:00:00, 2019-02-09 00:00:00, 2019-02-10 00:00:00, 2019-02-11 00:00:00, 2019-02-12 00:00:00, 2019-02-13 00:00:00, 2019-02-14 00:00:00, 2019-02-15 00:00:00, 2019-02-16 00:00:00, 2019-02-17 00:00:00, 2019-02-18 00:00:00, 2019-02-19 00:00:00, 2019-02-20 00:00:00, 2019-02-21 00:00:00, 2019-02-22 00:00:00, 2019-02-23 00:00:00, 2019-02-24 00:00:00, 2019-02-25 00:00:00, 2019-02-26 00:00:00, 2019-02-27 00:00:00, 2019-02-28 00:00:00, 2019-03-01 00:00:00, 2019-03-02 00:00:00, 2019-03-03 00:00:00, 2019-03-04 00:00:00, 2019-03-05 00:00:00, 2019-03-06 00:00:00, 2019-03-07 00:00:00, 2019-03-08 00:00:00, 2019-03-09 00:00:00, 2019-03-10 00:00:00, 2019-03-11 00:00:00, 2019-03-12 00:00:00, 2019-03-13 00:00:00, 2019-03-14 00:00:00, 2019-03-15 00:00:00, 2019-03-16 00:00:00, 2019-03-17 00:00:00, 2019-03-18 00:00:00, 2019-03-19 00:00:00, 2019-03-20 00:00:00, 2019-03-21 00:00:00, 2019-03-22 00:00:00, 2019-03-23 00:00:00, 2019-03-24 00:00:00, 2019-03-25 00:00:00, 2019-03-26 00:00:00, 2019-03-27 00:00:00, 2019-03-28 00:00:00, 2019-03-29 00:00:00, 2019-03-30 00:00:00, 2019-03-31 00:00:00, 2019-04-01 00:00:00, 2019-04-02 00:00:00, 2019-04-03 00:00:00, 2019-04-04 00:00:00, 2019-04-05 00:00:00, 2019-04-06 00:00:00, 2019-04-07 00:00:00, 2019-04-08 00:00:00, 2019-04-09 00:00:00, 2019-04-10 00:00:00, 2019-04-11 00:00:00, 2019-04-12 00:00:00, 2019-04-13 00:00:00, 2019-04-14 00:00:00, 2019-04-15 00:00:00, 2019-04-16 00:00:00, 2019-04-17 00:00:00, 2019-04-18 00:00:00, 2019-04-19 00:00:00, 2019-04-20 00:00:00, 2019-04-21 00:00:00, 2019-04-22 00:00:00, 2019-04-23 00:00:00, 2019-04-24 00:00:00, 2019-04-25 00:00:00, 2019-04-26 00:00:00, 2019-04-27 00:00:00, 2019-04-28 00:00:00, 2019-04-29 00:00:00, 2019-04-30 00:00:00, 2019-05-01 00:00:00, 2019-05-02 00:00:00, 2019-05-03 00:00:00, 2019-05-04 00:00:00, 2019-05-05 00:00:00, 2019-05-06 00:00:00, 2019-05-07 00:00:00, 2019-05-08 00:00:00, 2019-05-09 00:00:00, ...]\n",
       "\n",
       "[1037 rows x 0 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp = pd.DataFrame(index= X.index)\n",
    "comp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ac77fe4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1037"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp['y_true'] = y.values\n",
    "len(comp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "2fa3b10e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " 909.9845162626208,\n",
       " 851.5137594761875,\n",
       " 849.174217127749,\n",
       " 836.4871441978202,\n",
       " 854.6289651406848,\n",
       " 1251.3654952378745,\n",
       " 1306.461151115005,\n",
       " 860.2772789562136,\n",
       " 836.8544240676192,\n",
       " 840.7039641579631,\n",
       " 859.1047171326456,\n",
       " 873.4242857246543,\n",
       " 1252.1934428550987,\n",
       " 1288.201734846268,\n",
       " 920.8666721988336,\n",
       " 841.5365693434596,\n",
       " 836.9410064842697,\n",
       " 846.7955160839826,\n",
       " 855.470442838953,\n",
       " 1457.2192477804124,\n",
       " 1383.990765017965,\n",
       " 1243.6222123416912,\n",
       " 841.7974752139475,\n",
       " 842.8822341048073,\n",
       " 849.749657040269,\n",
       " 860.4435038715704,\n",
       " 1543.558670885238,\n",
       " 1367.816500814704,\n",
       " 1250.5141585702086,\n",
       " 841.7047676389956,\n",
       " 842.918714065861,\n",
       " 849.7432680278291,\n",
       " 860.4420033866309,\n",
       " 1543.4403711106131,\n",
       " 1366.7986516096344,\n",
       " 1251.2422608473682,\n",
       " 841.6800563315315,\n",
       " 842.9295136291912,\n",
       " 849.7300350916298,\n",
       " 860.4351752066551,\n",
       " 1461.0835753978474,\n",
       " 1379.97105990389,\n",
       " 1241.0031509684932,\n",
       " 842.0104257920167,\n",
       " 842.6984333449687,\n",
       " 850.0013580277412,\n",
       " 854.8233779736119,\n",
       " 1444.3814036282395,\n",
       " 1442.5559927641457,\n",
       " 1038.0949728277358,\n",
       " 847.4005053295484,\n",
       " 851.0176019813327,\n",
       " 843.9634781975459,\n",
       " 855.8005630286066,\n",
       " 1202.0694430961405,\n",
       " 1706.2028582823846,\n",
       " 844.2086413429737,\n",
       " 852.8022413231762,\n",
       " 846.7922756843077,\n",
       " 838.7610144193881,\n",
       " 853.0397760729314,\n",
       " 1213.3890719267993,\n",
       " 1536.3066858655623,\n",
       " 844.1303838468223,\n",
       " 845.113679434441,\n",
       " 849.1007981391414,\n",
       " 839.4362506401504,\n",
       " 852.3180407338073,\n",
       " 1207.024117585564,\n",
       " 1624.1608535568246,\n",
       " 842.7823241697895,\n",
       " 843.4846127338405,\n",
       " 842.7653661250655,\n",
       " 841.6209498756413,\n",
       " 852.0451465904316,\n",
       " 1729.2985870260816,\n",
       " 1447.4915133045472,\n",
       " 1033.9686757889901,\n",
       " 843.1340300624364,\n",
       " 851.7847491893347,\n",
       " 852.3387618259077,\n",
       " 855.4075325978993,\n",
       " 1302.5608531941043,\n",
       " 1576.5732532518189,\n",
       " 843.5187580774299,\n",
       " 853.6721931184688,\n",
       " 843.1618015677248,\n",
       " 841.6776326853881,\n",
       " 852.10487440042,\n",
       " 1202.6801828389032,\n",
       " 1656.2818515678907,\n",
       " 845.4833057651649,\n",
       " 848.676682336646,\n",
       " 1121.2099804407376,\n",
       " 847.6459063723726,\n",
       " 855.8700034720574,\n",
       " 1200.473843218357,\n",
       " 1672.5080436326004,\n",
       " 846.2272138993491,\n",
       " 850.6335987737915,\n",
       " 839.6145596072039,\n",
       " 847.6875281551007,\n",
       " 856.9230953824683,\n",
       " 1213.12764255488,\n",
       " 1275.4489512149448,\n",
       " 863.4280406951731,\n",
       " 846.4095634309066,\n",
       " 851.3072023754935,\n",
       " 834.3512975700148,\n",
       " 853.3178730557371,\n",
       " 1750.3307505252292,\n",
       " 1438.9242952315067,\n",
       " 1236.993794354985,\n",
       " 841.9289541790888,\n",
       " 842.779504436628,\n",
       " 849.8444320011305,\n",
       " 860.4637143042238,\n",
       " 1459.9325596899228,\n",
       " 1396.415366254906,\n",
       " 1034.0893307439926,\n",
       " 846.9969054165414,\n",
       " 851.0394814380595,\n",
       " 847.6686561432308,\n",
       " 857.4212062347949,\n",
       " 1200.0561494734923,\n",
       " 1668.0793297127952,\n",
       " 846.3699250082236,\n",
       " 850.7055897483624,\n",
       " 840.5806827266399,\n",
       " 847.6557672075076,\n",
       " 857.3506445480641,\n",
       " 1199.2409102121387,\n",
       " 1654.2110974362445,\n",
       " 845.8366664183325,\n",
       " 850.2892782466654,\n",
       " 840.7293008284712,\n",
       " 846.9524581379391,\n",
       " 856.9072005016244,\n",
       " 1199.541959325355,\n",
       " 1639.664263355019,\n",
       " 969.9056892587599,\n",
       " 855.6048102195793,\n",
       " 841.3323261226491,\n",
       " 846.3655019098546,\n",
       " 856.1821384512061,\n",
       " 1199.0918311078963,\n",
       " 1637.2082362691415,\n",
       " 969.6660357765538,\n",
       " 855.6149092050968,\n",
       " 841.3781924359129,\n",
       " 846.2992621261293,\n",
       " 855.9975710807281,\n",
       " 1198.99505667954,\n",
       " 1632.7258721138749,\n",
       " 981.4951717508004,\n",
       " 855.6259591811532,\n",
       " 847.7370710811414,\n",
       " 845.4940528075142,\n",
       " 855.2441576965226,\n",
       " 1296.0163263241716,\n",
       " 1625.1309186629767,\n",
       " 990.5966772224746,\n",
       " 855.6288979586218,\n",
       " 847.8775674095791,\n",
       " 845.4356239430463,\n",
       " 855.2826857333139,\n",
       " 1198.059757546042,\n",
       " 1529.2705265209804,\n",
       " 845.073120399813,\n",
       " 853.5405539206819,\n",
       " 851.1343753359166,\n",
       " 838.1161170175849,\n",
       " 857.5539329750741,\n",
       " 1715.2328985855088,\n",
       " 1400.9721283110655,\n",
       " 1246.4076041911958,\n",
       " 841.7188387482479,\n",
       " 842.9068022032677,\n",
       " 849.7408067968954,\n",
       " 860.4175846431037,\n",
       " 1461.540210609295,\n",
       " 1376.8706009860175,\n",
       " 1049.9938068081085,\n",
       " 846.7482191525502,\n",
       " 853.2557091260164,\n",
       " 846.1161875511219,\n",
       " 855.8411266628734,\n",
       " 1423.0424054765538,\n",
       " 1533.4993512491826,\n",
       " 1011.2755798953275,\n",
       " 855.7566726761756,\n",
       " 849.7705265934768,\n",
       " 846.0243695707105,\n",
       " 855.7224381470959,\n",
       " 1430.2673144657685,\n",
       " 1530.3138430013632,\n",
       " 1030.2522847201105,\n",
       " 847.3331508782854,\n",
       " 851.4026360290275,\n",
       " 852.3993580558382,\n",
       " 855.5446860617791,\n",
       " 1432.813934964583,\n",
       " 1515.698810658406,\n",
       " 1031.0121130166967,\n",
       " 847.3645714095824,\n",
       " 851.0969501833505,\n",
       " 845.9618613862177,\n",
       " 855.5809396931478,\n",
       " 1679.450124685525,\n",
       " 1377.6595043670252,\n",
       " 1242.9839149599602,\n",
       " 841.8904860193803,\n",
       " 842.7863148625164,\n",
       " 849.8410466823752,\n",
       " 860.4661858820376,\n",
       " 1459.0316444553705,\n",
       " 1467.6386984015332,\n",
       " 1043.814098409347,\n",
       " 846.9103127476025,\n",
       " 851.7515982196137,\n",
       " 852.3449901615937,\n",
       " 855.3888506646682,\n",
       " 1440.8298443678577,\n",
       " ...]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fill the prediction blank positions with nan, concat with 'preds' values  \n",
    "preds = [ np.nan ] * X_train.shape[0]  + list(preds)\n",
    "preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "544cdc26",
   "metadata": {},
   "outputs": [],
   "source": [
    "# add preds into the df\n",
    "comp['preds'] = preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "42e6d967",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_true</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>117.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "      <td>109.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>849.976618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>860.582931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>1459.640368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>1387.723067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>1156.0</td>\n",
       "      <td>1234.940448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            y_true        preds\n",
       "date                           \n",
       "2019-01-30   117.0          NaN\n",
       "2019-01-31   109.0          NaN\n",
       "2019-02-01    86.0          NaN\n",
       "2019-02-02   102.0          NaN\n",
       "2019-02-03    86.0          NaN\n",
       "...            ...          ...\n",
       "2021-11-27  1141.0   849.976618\n",
       "2021-11-28  1141.0   860.582931\n",
       "2021-11-29  1738.5  1459.640368\n",
       "2021-11-30  1738.5  1387.723067\n",
       "2021-12-01  1156.0  1234.940448\n",
       "\n",
       "[1037 rows x 2 columns]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "0e45b98f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comp.plot(figsize=(10,10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6bb2fe4",
   "metadata": {},
   "source": [
    "## ShuffleSplit to split the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "fa4f8ef8",
   "metadata": {},
   "outputs": [],
   "source": [
    "report = pd.DataFrame( columns=['split','max_error_lin','r2_lin', 'mae_lin',\n",
    "                                'max_error_dtr','r2_dtr', 'mae_dtr',\n",
    "                                'max_error_knn','r2_knn', 'mae_knn', \n",
    "                                'max_error_sgdr','r2_sgdr', 'mae_sgdr'\n",
    "                                ] )\n",
    "n= 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "41ad6aed",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import ShuffleSplit\n",
    "\n",
    "rs = ShuffleSplit(n_splits=100, test_size=0.25, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "4dd4881f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2715692971.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.neighbors import KNeighborsRegressor \n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "lin_reg = LinearRegression().fit(X_scaled, y)\n",
    "dtr = DecisionTreeRegressor(random_state=0)\n",
    "KNN = KNeighborsRegressor(n_neighbors=5, weights= 'distance')\n",
    "sgdr = SGDRegressor()\n",
    "\n",
    "for train_index, test_index in rs.split(X):\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "        \n",
    "    reg.fit(X_train, y_train)\n",
    "    sgdr.fit(X_train, y_train)\n",
    "    KNN.fit(X_train, y_train)\n",
    "    dtr.fit(X_train, y_train)\n",
    "    \n",
    "    lin_y_pred = reg.predict( X_test )\n",
    "    sgdr_y_pred = reg.predict( X_test )\n",
    "    KNN_y_pred = KNN.predict( X_test )\n",
    "    dtr_y_pred = dtr.predict( X_test )\n",
    "    \n",
    "    report= report.append({'split': n,\n",
    "                           'max_error_lin':max_error(lin_y_pred,y_test),\n",
    "                           'r2_lin': r2_score(lin_y_pred,y_test), \n",
    "                           'mae_lin':mean_absolute_error(lin_y_pred,y_test),\n",
    "                           'max_error_dtr': max_error(dtr_y_pred,y_test),\n",
    "                           'r2_dtr': r2_score(dtr_y_pred,y_test), \n",
    "                           'mae_dtr':mean_absolute_error(dtr_y_pred,y_test),\n",
    "                           'max_error_knn': max_error(KNN_y_pred,y_test),\n",
    "                           'r2_knn': r2_score(KNN_y_pred,y_test), \n",
    "                           'mae_knn':mean_absolute_error(KNN_y_pred,y_test),\n",
    "                           'max_error_sgdr': max_error(sgdr_y_pred,y_test),\n",
    "                           'r2_sgdr': r2_score(sgdr_y_pred,y_test),\n",
    "                           'mae_sgdr':mean_absolute_error(sgdr_y_pred,y_test)},\n",
    "                            ignore_index=True)\n",
    "    n+=1  \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "a9f9ce05",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>split</th>\n",
       "      <th>max_error_lin</th>\n",
       "      <th>r2_lin</th>\n",
       "      <th>mae_lin</th>\n",
       "      <th>max_error_dtr</th>\n",
       "      <th>r2_dtr</th>\n",
       "      <th>mae_dtr</th>\n",
       "      <th>max_error_knn</th>\n",
       "      <th>r2_knn</th>\n",
       "      <th>mae_knn</th>\n",
       "      <th>max_error_sgdr</th>\n",
       "      <th>r2_sgdr</th>\n",
       "      <th>mae_sgdr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>936.355814</td>\n",
       "      <td>0.760166</td>\n",
       "      <td>132.780114</td>\n",
       "      <td>1267.25</td>\n",
       "      <td>0.835005</td>\n",
       "      <td>83.579808</td>\n",
       "      <td>1266.141287</td>\n",
       "      <td>0.415503</td>\n",
       "      <td>166.312554</td>\n",
       "      <td>936.355814</td>\n",
       "      <td>0.760166</td>\n",
       "      <td>132.780114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>793.125793</td>\n",
       "      <td>0.818449</td>\n",
       "      <td>119.605219</td>\n",
       "      <td>1266.25</td>\n",
       "      <td>0.847528</td>\n",
       "      <td>77.674038</td>\n",
       "      <td>1253.189831</td>\n",
       "      <td>0.534452</td>\n",
       "      <td>151.02089</td>\n",
       "      <td>793.125793</td>\n",
       "      <td>0.818449</td>\n",
       "      <td>119.605219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>814.185268</td>\n",
       "      <td>0.811638</td>\n",
       "      <td>122.36939</td>\n",
       "      <td>890.25</td>\n",
       "      <td>0.916432</td>\n",
       "      <td>69.108654</td>\n",
       "      <td>1163.356909</td>\n",
       "      <td>0.596808</td>\n",
       "      <td>153.625042</td>\n",
       "      <td>814.185268</td>\n",
       "      <td>0.811638</td>\n",
       "      <td>122.36939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>774.731621</td>\n",
       "      <td>0.868888</td>\n",
       "      <td>117.594582</td>\n",
       "      <td>1089.75</td>\n",
       "      <td>0.898815</td>\n",
       "      <td>75.285577</td>\n",
       "      <td>1245.453765</td>\n",
       "      <td>0.681772</td>\n",
       "      <td>144.895681</td>\n",
       "      <td>774.731621</td>\n",
       "      <td>0.868888</td>\n",
       "      <td>117.594582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>939.536116</td>\n",
       "      <td>0.797881</td>\n",
       "      <td>124.433602</td>\n",
       "      <td>1026.75</td>\n",
       "      <td>0.843016</td>\n",
       "      <td>90.133654</td>\n",
       "      <td>1315.038005</td>\n",
       "      <td>0.469527</td>\n",
       "      <td>164.111551</td>\n",
       "      <td>939.536116</td>\n",
       "      <td>0.797881</td>\n",
       "      <td>124.433602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>95.0</td>\n",
       "      <td>650.573967</td>\n",
       "      <td>0.866046</td>\n",
       "      <td>106.700052</td>\n",
       "      <td>1183.25</td>\n",
       "      <td>0.898277</td>\n",
       "      <td>63.881731</td>\n",
       "      <td>1259.617606</td>\n",
       "      <td>0.575727</td>\n",
       "      <td>150.969315</td>\n",
       "      <td>650.573967</td>\n",
       "      <td>0.866046</td>\n",
       "      <td>106.700052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>96.0</td>\n",
       "      <td>722.096689</td>\n",
       "      <td>0.85913</td>\n",
       "      <td>109.634914</td>\n",
       "      <td>510.0</td>\n",
       "      <td>0.918488</td>\n",
       "      <td>62.135577</td>\n",
       "      <td>1082.414932</td>\n",
       "      <td>0.646696</td>\n",
       "      <td>145.640292</td>\n",
       "      <td>722.096689</td>\n",
       "      <td>0.85913</td>\n",
       "      <td>109.634914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>97.0</td>\n",
       "      <td>737.209642</td>\n",
       "      <td>0.800382</td>\n",
       "      <td>124.729437</td>\n",
       "      <td>1089.75</td>\n",
       "      <td>0.865637</td>\n",
       "      <td>78.858654</td>\n",
       "      <td>1256.020854</td>\n",
       "      <td>0.462721</td>\n",
       "      <td>160.026661</td>\n",
       "      <td>737.209642</td>\n",
       "      <td>0.800382</td>\n",
       "      <td>124.729437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>98.0</td>\n",
       "      <td>535.862007</td>\n",
       "      <td>0.85441</td>\n",
       "      <td>106.700165</td>\n",
       "      <td>1089.75</td>\n",
       "      <td>0.869416</td>\n",
       "      <td>75.541346</td>\n",
       "      <td>1158.789267</td>\n",
       "      <td>0.664378</td>\n",
       "      <td>144.381994</td>\n",
       "      <td>535.862007</td>\n",
       "      <td>0.85441</td>\n",
       "      <td>106.700165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>99.0</td>\n",
       "      <td>801.034834</td>\n",
       "      <td>0.830317</td>\n",
       "      <td>116.536264</td>\n",
       "      <td>890.25</td>\n",
       "      <td>0.876388</td>\n",
       "      <td>76.484615</td>\n",
       "      <td>1067.719333</td>\n",
       "      <td>0.65277</td>\n",
       "      <td>147.822759</td>\n",
       "      <td>801.034834</td>\n",
       "      <td>0.830317</td>\n",
       "      <td>116.536264</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   split max_error_lin    r2_lin     mae_lin max_error_dtr    r2_dtr  \\\n",
       "0    0.0    936.355814  0.760166  132.780114       1267.25  0.835005   \n",
       "1    1.0    793.125793  0.818449  119.605219       1266.25  0.847528   \n",
       "2    2.0    814.185268  0.811638   122.36939        890.25  0.916432   \n",
       "3    3.0    774.731621  0.868888  117.594582       1089.75  0.898815   \n",
       "4    4.0    939.536116  0.797881  124.433602       1026.75  0.843016   \n",
       "..   ...           ...       ...         ...           ...       ...   \n",
       "95  95.0    650.573967  0.866046  106.700052       1183.25  0.898277   \n",
       "96  96.0    722.096689   0.85913  109.634914         510.0  0.918488   \n",
       "97  97.0    737.209642  0.800382  124.729437       1089.75  0.865637   \n",
       "98  98.0    535.862007   0.85441  106.700165       1089.75  0.869416   \n",
       "99  99.0    801.034834  0.830317  116.536264        890.25  0.876388   \n",
       "\n",
       "      mae_dtr max_error_knn    r2_knn     mae_knn max_error_sgdr   r2_sgdr  \\\n",
       "0   83.579808   1266.141287  0.415503  166.312554     936.355814  0.760166   \n",
       "1   77.674038   1253.189831  0.534452   151.02089     793.125793  0.818449   \n",
       "2   69.108654   1163.356909  0.596808  153.625042     814.185268  0.811638   \n",
       "3   75.285577   1245.453765  0.681772  144.895681     774.731621  0.868888   \n",
       "4   90.133654   1315.038005  0.469527  164.111551     939.536116  0.797881   \n",
       "..        ...           ...       ...         ...            ...       ...   \n",
       "95  63.881731   1259.617606  0.575727  150.969315     650.573967  0.866046   \n",
       "96  62.135577   1082.414932  0.646696  145.640292     722.096689   0.85913   \n",
       "97  78.858654   1256.020854  0.462721  160.026661     737.209642  0.800382   \n",
       "98  75.541346   1158.789267  0.664378  144.381994     535.862007   0.85441   \n",
       "99  76.484615   1067.719333   0.65277  147.822759     801.034834  0.830317   \n",
       "\n",
       "      mae_sgdr  \n",
       "0   132.780114  \n",
       "1   119.605219  \n",
       "2    122.36939  \n",
       "3   117.594582  \n",
       "4   124.433602  \n",
       "..         ...  \n",
       "95  106.700052  \n",
       "96  109.634914  \n",
       "97  124.729437  \n",
       "98  106.700165  \n",
       "99  116.536264  \n",
       "\n",
       "[100 rows x 13 columns]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "85e74260",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\4161368561.py:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  r2_mean_report = r2_mean_report.append({'r2_knn_mean': r2_knn_mean,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>r2_knn_mean</th>\n",
       "      <th>r2_sgdr_mean</th>\n",
       "      <th>r2_lin_mean</th>\n",
       "      <th>r2_dtr_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.65277</td>\n",
       "      <td>0.830317</td>\n",
       "      <td>0.830317</td>\n",
       "      <td>0.876388</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  r2_knn_mean r2_sgdr_mean r2_lin_mean r2_dtr_mean\n",
       "0     0.65277     0.830317    0.830317    0.876388"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_mean_report = pd.DataFrame( columns=['r2_knn_mean','r2_sgdr_mean','r2_lin_mean','r2_dtr_mean'] )\n",
    "n= 0\n",
    "\n",
    "r2_knn_mean= r2_score(KNN_y_pred,y_test).mean()\n",
    "r2_sgdr_mean= r2_score(sgdr_y_pred,y_test).mean()\n",
    "r2_lin_mean= r2_score(lin_y_pred,y_test).mean()\n",
    "r2_dtr_mean= r2_score(dtr_y_pred,y_test).mean()\n",
    "\n",
    "r2_mean_report = r2_mean_report.append({'r2_knn_mean': r2_knn_mean,\n",
    "                                'r2_sgdr_mean':r2_sgdr_mean,\n",
    "                                'r2_lin_mean':r2_lin_mean,\n",
    "                                'r2_dtr_mean': r2_dtr_mean}, \n",
    "                                ignore_index= True)\n",
    "n+=1\n",
    "\n",
    "r2_mean_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "76f0e464",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\532847308.py:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  max_error_mean_report = max_error_mean_report.append({'max_error_knn_mean': max_error_knn_mean,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_error_knn_mean</th>\n",
       "      <th>max_error_sgdr_mean</th>\n",
       "      <th>max_error_lin_mean</th>\n",
       "      <th>max_error_dtr_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1067.719333</td>\n",
       "      <td>801.034834</td>\n",
       "      <td>801.034834</td>\n",
       "      <td>890.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  max_error_knn_mean max_error_sgdr_mean max_error_lin_mean max_error_dtr_mean\n",
       "0        1067.719333          801.034834         801.034834             890.25"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_error_mean_report = pd.DataFrame( columns=['max_error_knn_mean','max_error_sgdr_mean','max_error_lin_mean','max_error_dtr_mean'] )\n",
    "m= 0\n",
    "\n",
    "max_error_knn_mean= max_error(KNN_y_pred,y_test).mean()\n",
    "max_error_sgdr_mean= max_error(sgdr_y_pred,y_test).mean()\n",
    "max_error_lin_mean= max_error(lin_y_pred,y_test).mean()\n",
    "max_error_dtr_mean= max_error(dtr_y_pred,y_test).mean()\n",
    "\n",
    "max_error_mean_report = max_error_mean_report.append({'max_error_knn_mean': max_error_knn_mean,\n",
    "                                'max_error_sgdr_mean':max_error_sgdr_mean,\n",
    "                                'max_error_lin_mean':max_error_lin_mean,\n",
    "                                'max_error_dtr_mean':max_error_dtr_mean}, \n",
    "                                ignore_index= True)\n",
    "m+=1\n",
    "\n",
    "max_error_mean_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "c4a5c89b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2850408021.py:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  mae_mean_report = mae_mean_report.append({'mae_knn_mean': mae_knn_mean,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mae_knn_mean</th>\n",
       "      <th>mae_sgdr_mean</th>\n",
       "      <th>mae_lin_mean</th>\n",
       "      <th>mae_dtr_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>147.822759</td>\n",
       "      <td>116.536264</td>\n",
       "      <td>116.536264</td>\n",
       "      <td>76.484615</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  mae_knn_mean mae_sgdr_mean mae_lin_mean mae_dtr_mean\n",
       "0   147.822759    116.536264   116.536264    76.484615"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mae_mean_report = pd.DataFrame( columns=['mae_knn_mean','mae_sgdr_mean','mae_lin_mean','mae_dtr_mean'] )\n",
    "m= 0\n",
    "\n",
    "mae_knn_mean= mean_absolute_error(KNN_y_pred,y_test).mean()\n",
    "mae_sgdr_mean= mean_absolute_error(sgdr_y_pred,y_test).mean()\n",
    "mae_lin_mean= mean_absolute_error(lin_y_pred,y_test).mean()\n",
    "mae_dtr_mean= mean_absolute_error(dtr_y_pred,y_test).mean()\n",
    "\n",
    "mae_mean_report = mae_mean_report.append({'mae_knn_mean': mae_knn_mean,\n",
    "                                'mae_sgdr_mean':mae_sgdr_mean,\n",
    "                                'mae_lin_mean':mae_lin_mean,\n",
    "                                'mae_dtr_mean':mae_dtr_mean},\n",
    "                                ignore_index= True)\n",
    "m+=1\n",
    "\n",
    "mae_mean_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c439ff7",
   "metadata": {},
   "source": [
    "### Summary:  \n",
    "The best model is DTR. \n",
    "r2 score is 0.876388, represents the majority of the data trend. Mean absolue erros is 76.484615 which is the lowest. Max error mean (890.25) is the 2nd lowest among the tested models. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0036fb07",
   "metadata": {},
   "source": [
    "## visualize the data - ShuffleSplit, dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "4df1a8d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# training test split manual- 3/4 training, validation on 1/4\n",
    "X_train, X_test = X_scaled.iloc[ : int(0.75*len(X_scaled)) ], X_scaled.iloc[ int(0.75*len(X_scaled)) : ]\n",
    "y_train, y_test = y.iloc[ : int(0.75*len(y)) ], y.iloc[ int(0.75*len(y)) : ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "c9256117",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29      117.0\n",
       "30      109.0\n",
       "31       86.0\n",
       "32      102.0\n",
       "33       86.0\n",
       "        ...  \n",
       "801     858.0\n",
       "802     863.0\n",
       "803     893.0\n",
       "804    1342.5\n",
       "805    1342.5\n",
       "Name: y, Length: 777, dtype: float64"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "88ec097a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "806      896.0\n",
       "807      896.0\n",
       "808      863.0\n",
       "809      880.0\n",
       "810      880.0\n",
       "         ...  \n",
       "1061    1141.0\n",
       "1062    1141.0\n",
       "1063    1738.5\n",
       "1064    1738.5\n",
       "1065    1156.0\n",
       "Name: y, Length: 260, dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "94616912",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.021102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.001806</td>\n",
       "      <td>0.011760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000570</td>\n",
       "      <td>0.000915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>0.000261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000666</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.594899</td>\n",
       "      <td>0.588410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.596040</td>\n",
       "      <td>0.561983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>774</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.596515</td>\n",
       "      <td>0.562506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.599510</td>\n",
       "      <td>0.592069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>776</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.602505</td>\n",
       "      <td>0.624179</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>777 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     holiday  day_of_week     rol_7    rol_10\n",
       "0        0.0     0.333333  0.000000  0.021102\n",
       "1        0.0     0.500000  0.001806  0.011760\n",
       "2        0.0     0.666667  0.000570  0.000915\n",
       "3        0.0     0.833333  0.002947  0.000261\n",
       "4        0.0     1.000000  0.000666  0.000000\n",
       "..       ...          ...       ...       ...\n",
       "772      0.0     0.666667  0.594899  0.588410\n",
       "773      0.0     0.833333  0.596040  0.561983\n",
       "774      0.0     1.000000  0.596515  0.562506\n",
       "775      0.0     0.000000  0.599510  0.592069\n",
       "776      0.0     0.166667  0.602505  0.624179\n",
       "\n",
       "[777 rows x 4 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "bee113a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>777</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.602791</td>\n",
       "      <td>0.624702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>778</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.606403</td>\n",
       "      <td>0.597589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>779</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.606879</td>\n",
       "      <td>0.568321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.608495</td>\n",
       "      <td>0.567471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>781</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.607259</td>\n",
       "      <td>0.568909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.857693</td>\n",
       "      <td>0.794630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1033</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.857693</td>\n",
       "      <td>0.794042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1034</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.858976</td>\n",
       "      <td>0.832489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1035</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.860260</td>\n",
       "      <td>0.871917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1036</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.863017</td>\n",
       "      <td>0.872897</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>260 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      holiday  day_of_week     rol_7    rol_10\n",
       "777       0.0     0.333333  0.602791  0.624702\n",
       "778       0.0     0.500000  0.606403  0.597589\n",
       "779       0.0     0.666667  0.606879  0.568321\n",
       "780       0.0     0.833333  0.608495  0.567471\n",
       "781       0.0     1.000000  0.607259  0.568909\n",
       "...       ...          ...       ...       ...\n",
       "1032      0.0     0.833333  0.857693  0.794630\n",
       "1033      0.0     1.000000  0.857693  0.794042\n",
       "1034      0.0     0.000000  0.858976  0.832489\n",
       "1035      0.0     0.166667  0.860260  0.871917\n",
       "1036      0.0     0.333333  0.863017  0.872897\n",
       "\n",
       "[260 rows x 4 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "da4086af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtr = DecisionTreeRegressor(random_state=0)\n",
    "dtr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "73dc4933",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([163.04012079, 153.34377908, 143.64421913, 133.94181326,\n",
       "       124.23586457, 182.45326004, 172.74026288, 163.03354527,\n",
       "       153.33187563, 143.63266481, 133.92837061, 124.22768475,\n",
       "       182.45518119, 172.75239894, 163.05222226, 153.39477604,\n",
       "       143.74362693, 134.08646155, 124.42438851, 182.70764685,\n",
       "       173.06056004, 163.3993354 , 153.69885367, 143.99260726,\n",
       "       134.28706285, 124.58357121, 182.80444626, 173.09479577,\n",
       "       163.3912964 , 153.69429577, 143.99760194, 134.29054253,\n",
       "       124.58669363, 182.81194163, 173.10713406, 163.40263919,\n",
       "       153.70513562, 144.00776409, 134.30350482, 124.60206767,\n",
       "       182.75820624, 172.98390472, 163.2809439 , 153.58416014,\n",
       "       143.88720162, 134.1393213 , 124.3871681 , 182.61512243,\n",
       "       172.91255123, 163.21281903, 153.46132047, 143.71092918,\n",
       "       134.00968286, 124.31396385, 182.53699114, 172.82516337,\n",
       "       163.06780594, 153.37089212, 143.67258707, 133.97705063,\n",
       "       124.27174921, 182.49245786, 172.78268844, 163.08113179,\n",
       "       153.38067732, 143.68188073, 133.97843657, 124.27567249,\n",
       "       182.50288022, 172.79987574, 163.09656192, 153.39714222,\n",
       "       143.69561065, 133.9900564 , 124.28395322, 589.99364501,\n",
       "       172.92684431, 163.2216465 , 153.52523236, 143.82640865,\n",
       "       134.12408647, 124.42012363, 182.56810338, 172.78589939,\n",
       "       163.08036154, 153.3848196 , 143.69412706, 133.98889644,\n",
       "       124.28742348, 182.51329866, 172.80911352, 163.1098905 ,\n",
       "       153.41232331, 551.138301  , 134.01271092, 124.30598463,\n",
       "       182.52802232, 172.81968638, 163.11372046, 153.41733739,\n",
       "       143.71759622, 134.01366621, 124.31007882, 182.48307176,\n",
       "       172.72562461, 163.0234241 , 153.32436084, 143.62546158,\n",
       "       133.92134167, 124.21847926, 589.98454852, 172.9739259 ,\n",
       "       163.3835876 , 153.67621405, 143.97338351, 134.26759108,\n",
       "       124.56282826, 182.7086047 , 172.92392205, 163.09496676,\n",
       "       153.40360777, 143.7079681 , 134.01490376, 124.31471066,\n",
       "       182.54287681, 172.84027055, 163.13488543, 153.43701876,\n",
       "       143.73798182, 134.03407514, 124.32554082, 182.54570829,\n",
       "       172.83532172, 163.13305394, 153.43491762, 143.73777294,\n",
       "       134.03894001, 124.33625107, 182.55922255, 172.85157353,\n",
       "       163.14650255, 153.44375935, 143.7422149 , 134.03689624,\n",
       "       124.33693794, 182.5580552 , 172.84885579, 163.14415075,\n",
       "       153.44635882, 143.74848143, 134.04437103, 124.33855092,\n",
       "       182.56359798, 172.8584328 , 163.15482818, 153.45892756,\n",
       "       143.75991829, 134.05458065, 124.35232317, 182.57215446,\n",
       "       172.86166909, 163.15830264, 153.45756862, 143.75811623,\n",
       "       134.05280449, 124.34979274, 182.52232648, 172.76442013,\n",
       "       163.06021139, 153.36224123, 143.66330276, 133.96245292,\n",
       "       124.25810257, 590.0293506 , 173.0238213 , 163.44616855,\n",
       "       153.74256651, 144.04258663, 134.33807922, 124.63207791,\n",
       "       182.77529919, 172.98832725, 163.14665079, 153.45695775,\n",
       "       143.7658735 , 134.07423951, 124.37058308, 182.59076953,\n",
       "       172.88038297, 163.17816523, 153.47773585, 143.77925692,\n",
       "       134.07670945, 124.37460822, 182.60159582, 172.89794394,\n",
       "       163.1944325 , 153.49615811, 143.79525577, 134.08840781,\n",
       "       124.38162374, 182.60215322, 172.89214766, 163.18866213,\n",
       "       153.48936639, 143.78846025, 134.08473478, 124.38394882,\n",
       "       590.11010069, 173.05934231, 163.35819555, 153.6614354 ,\n",
       "       143.96468909, 134.26077807, 124.55778788, 182.68773689,\n",
       "       172.88730276, 163.18040218, 153.48763128, 143.79898916,\n",
       "       134.09838617, 124.39381406, 182.6185288 , 172.91269901,\n",
       "       163.21076177, 153.51293145, 143.81212106, 134.10685245,\n",
       "       124.40253751, 182.56711924, 172.80126087, 163.09831558,\n",
       "       153.40250176, 143.70583615, 134.00162307, 124.29555963,\n",
       "       182.57310893, 172.92030358, 163.26673703, 561.038441  ,\n",
       "       143.91395649, 134.21045197, 124.50825756, 182.7329978 ,\n",
       "       173.02719351, 163.26904119, 153.51262113, 143.81366924,\n",
       "       134.1170001 , 124.42097958, 182.64668209, 172.9416122 ,\n",
       "       163.23561347, 561.01548408, 143.89299898, 134.1892925 ,\n",
       "       124.48502936, 182.70697808, 172.99834427, 163.29695677])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds_dtr= reg.predict(X_test)\n",
    "preds_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "1a148bcc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "44715c57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [2019-01-30 00:00:00, 2019-01-31 00:00:00, 2019-02-01 00:00:00, 2019-02-02 00:00:00, 2019-02-03 00:00:00, 2019-02-04 00:00:00, 2019-02-05 00:00:00, 2019-02-06 00:00:00, 2019-02-07 00:00:00, 2019-02-08 00:00:00, 2019-02-09 00:00:00, 2019-02-10 00:00:00, 2019-02-11 00:00:00, 2019-02-12 00:00:00, 2019-02-13 00:00:00, 2019-02-14 00:00:00, 2019-02-15 00:00:00, 2019-02-16 00:00:00, 2019-02-17 00:00:00, 2019-02-18 00:00:00, 2019-02-19 00:00:00, 2019-02-20 00:00:00, 2019-02-21 00:00:00, 2019-02-22 00:00:00, 2019-02-23 00:00:00, 2019-02-24 00:00:00, 2019-02-25 00:00:00, 2019-02-26 00:00:00, 2019-02-27 00:00:00, 2019-02-28 00:00:00, 2019-03-01 00:00:00, 2019-03-02 00:00:00, 2019-03-03 00:00:00, 2019-03-04 00:00:00, 2019-03-05 00:00:00, 2019-03-06 00:00:00, 2019-03-07 00:00:00, 2019-03-08 00:00:00, 2019-03-09 00:00:00, 2019-03-10 00:00:00, 2019-03-11 00:00:00, 2019-03-12 00:00:00, 2019-03-13 00:00:00, 2019-03-14 00:00:00, 2019-03-15 00:00:00, 2019-03-16 00:00:00, 2019-03-17 00:00:00, 2019-03-18 00:00:00, 2019-03-19 00:00:00, 2019-03-20 00:00:00, 2019-03-21 00:00:00, 2019-03-22 00:00:00, 2019-03-23 00:00:00, 2019-03-24 00:00:00, 2019-03-25 00:00:00, 2019-03-26 00:00:00, 2019-03-27 00:00:00, 2019-03-28 00:00:00, 2019-03-29 00:00:00, 2019-03-30 00:00:00, 2019-03-31 00:00:00, 2019-04-01 00:00:00, 2019-04-02 00:00:00, 2019-04-03 00:00:00, 2019-04-04 00:00:00, 2019-04-05 00:00:00, 2019-04-06 00:00:00, 2019-04-07 00:00:00, 2019-04-08 00:00:00, 2019-04-09 00:00:00, 2019-04-10 00:00:00, 2019-04-11 00:00:00, 2019-04-12 00:00:00, 2019-04-13 00:00:00, 2019-04-14 00:00:00, 2019-04-15 00:00:00, 2019-04-16 00:00:00, 2019-04-17 00:00:00, 2019-04-18 00:00:00, 2019-04-19 00:00:00, 2019-04-20 00:00:00, 2019-04-21 00:00:00, 2019-04-22 00:00:00, 2019-04-23 00:00:00, 2019-04-24 00:00:00, 2019-04-25 00:00:00, 2019-04-26 00:00:00, 2019-04-27 00:00:00, 2019-04-28 00:00:00, 2019-04-29 00:00:00, 2019-04-30 00:00:00, 2019-05-01 00:00:00, 2019-05-02 00:00:00, 2019-05-03 00:00:00, 2019-05-04 00:00:00, 2019-05-05 00:00:00, 2019-05-06 00:00:00, 2019-05-07 00:00:00, 2019-05-08 00:00:00, 2019-05-09 00:00:00, ...]\n",
       "\n",
       "[1037 rows x 0 columns]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_dtr= pd.DataFrame(index=X.index)\n",
    "comp_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f2714894",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date\n",
       "2019-01-30     117.0\n",
       "2019-01-31     109.0\n",
       "2019-02-01      86.0\n",
       "2019-02-02     102.0\n",
       "2019-02-03      86.0\n",
       "               ...  \n",
       "2021-11-27    1141.0\n",
       "2021-11-28    1141.0\n",
       "2021-11-29    1738.5\n",
       "2021-11-30    1738.5\n",
       "2021-12-01    1156.0\n",
       "Name: y_true, Length: 1037, dtype: float64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_dtr['y_true'] = y.values\n",
    "comp_dtr['y_true']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "bee47da4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " 163.04012078650408,\n",
       " 153.34377907753955,\n",
       " 143.64421912507345,\n",
       " 133.94181325892393,\n",
       " 124.23586457274308,\n",
       " 182.45326003861842,\n",
       " 172.7402628827237,\n",
       " 163.03354527350692,\n",
       " 153.33187563349134,\n",
       " 143.63266480846636,\n",
       " 133.92837061342146,\n",
       " 124.22768475199952,\n",
       " 182.4551811910516,\n",
       " 172.75239894263282,\n",
       " 163.0522222601935,\n",
       " 153.3947760363698,\n",
       " 143.74362693299767,\n",
       " 134.0864615523648,\n",
       " 124.42438851031709,\n",
       " 182.70764684797754,\n",
       " 173.06056003649263,\n",
       " 163.39933539904422,\n",
       " 153.69885366990843,\n",
       " 143.99260726157453,\n",
       " 134.2870628474087,\n",
       " 124.5835712135365,\n",
       " 182.8044462627939,\n",
       " 173.09479576693215,\n",
       " 163.39129640121698,\n",
       " 153.6942957674283,\n",
       " 143.99760194301805,\n",
       " 134.29054253090362,\n",
       " 124.58669363044777,\n",
       " 182.81194162977212,\n",
       " 173.10713406296162,\n",
       " 163.40263919425257,\n",
       " 153.70513562103397,\n",
       " 144.00776408982352,\n",
       " 134.30350482155592,\n",
       " 124.6020676707655,\n",
       " 182.75820624150714,\n",
       " 172.98390471785405,\n",
       " 163.28094389603726,\n",
       " 153.5841601440318,\n",
       " 143.88720162465603,\n",
       " 134.1393213017466,\n",
       " 124.3871680952106,\n",
       " 182.61512243459293,\n",
       " 172.91255122885613,\n",
       " 163.21281902640686,\n",
       " 153.46132046804993,\n",
       " 143.7109291770047,\n",
       " 134.00968285794778,\n",
       " 124.31396385496556,\n",
       " 182.5369911365837,\n",
       " 172.82516336971221,\n",
       " 163.06780594161313,\n",
       " 153.3708921173553,\n",
       " 143.67258707137876,\n",
       " 133.97705063435177,\n",
       " 124.27174920506467,\n",
       " 182.49245785969094,\n",
       " 172.78268844182276,\n",
       " 163.0811317948716,\n",
       " 153.3806773205639,\n",
       " 143.6818807292722,\n",
       " 133.9784365680247,\n",
       " 124.27567248720865,\n",
       " 182.50288022459117,\n",
       " 172.79987573617737,\n",
       " 163.09656192099797,\n",
       " 153.3971422164244,\n",
       " 143.69561065431992,\n",
       " 133.99005639822343,\n",
       " 124.28395322236263,\n",
       " 589.9936450105482,\n",
       " 172.92684430860749,\n",
       " 163.2216465044956,\n",
       " 153.52523236469546,\n",
       " 143.82640864521136,\n",
       " 134.12408646710432,\n",
       " 124.42012363234925,\n",
       " 182.56810338137197,\n",
       " 172.7858993881732,\n",
       " 163.08036154384558,\n",
       " 153.38481960142687,\n",
       " 143.69412706463285,\n",
       " 133.98889643698323,\n",
       " 124.28742347807454,\n",
       " 182.51329865682797,\n",
       " 172.80911352218405,\n",
       " 163.10989049871742,\n",
       " 153.412323314921,\n",
       " 551.1383010024979,\n",
       " 134.0127109234388,\n",
       " 124.30598463429615,\n",
       " 182.52802232218764,\n",
       " 172.81968637735892,\n",
       " 163.11372046481017,\n",
       " 153.41733738586584,\n",
       " 143.71759622282687,\n",
       " 134.01366621160957,\n",
       " 124.31007881788895,\n",
       " 182.48307176023917,\n",
       " 172.72562460819464,\n",
       " 163.0234240962298,\n",
       " 153.32436084364085,\n",
       " 143.6254615752568,\n",
       " 133.92134167354078,\n",
       " 124.2184792555953,\n",
       " 589.9845485172058,\n",
       " 172.9739259036663,\n",
       " 163.3835875999359,\n",
       " 153.67621405389954,\n",
       " 143.97338351140894,\n",
       " 134.26759107759003,\n",
       " 124.5628282589432,\n",
       " 182.70860469717857,\n",
       " 172.92392205196933,\n",
       " 163.09496675526162,\n",
       " 153.40360776887422,\n",
       " 143.7079681002754,\n",
       " 134.01490375824739,\n",
       " 124.31471066403921,\n",
       " 182.54287680765682,\n",
       " 172.84027054850696,\n",
       " 163.1348854311774,\n",
       " 153.43701876254596,\n",
       " 143.73798182355034,\n",
       " 134.03407514134585,\n",
       " 124.32554081947019,\n",
       " 182.54570828617517,\n",
       " 172.83532172418617,\n",
       " 163.13305393594777,\n",
       " 153.4349176214386,\n",
       " 143.7377729440018,\n",
       " 134.03894001065652,\n",
       " 124.3362510714409,\n",
       " 182.55922254791417,\n",
       " 172.85157353401897,\n",
       " 163.1465025506113,\n",
       " 153.4437593481628,\n",
       " 143.74221489965333,\n",
       " 134.03689624399829,\n",
       " 124.33693793563248,\n",
       " 182.5580551953886,\n",
       " 172.84885578957415,\n",
       " 163.144150752676,\n",
       " 153.4463588183455,\n",
       " 143.74848143329055,\n",
       " 134.04437102609944,\n",
       " 124.33855092330478,\n",
       " 182.56359797514926,\n",
       " 172.8584328011975,\n",
       " 163.15482818110897,\n",
       " 153.45892756025438,\n",
       " 143.7599182902345,\n",
       " 134.0545806455296,\n",
       " 124.35232316641518,\n",
       " 182.5721544588259,\n",
       " 172.86166908566608,\n",
       " 163.15830264329998,\n",
       " 153.45756862129005,\n",
       " 143.7581162266626,\n",
       " 134.05280448825147,\n",
       " 124.34979273518803,\n",
       " 182.52232648171938,\n",
       " 172.764420133856,\n",
       " 163.06021138953548,\n",
       " 153.36224122921266,\n",
       " 143.66330276083028,\n",
       " 133.96245291520344,\n",
       " 124.25810256760798,\n",
       " 590.0293505954303,\n",
       " 173.02382129737833,\n",
       " 163.4461685508997,\n",
       " 153.74256650809218,\n",
       " 144.0425866333955,\n",
       " 134.33807921883908,\n",
       " 124.63207790547156,\n",
       " 182.77529919471363,\n",
       " 172.98832724720927,\n",
       " 163.14665078878127,\n",
       " 153.45695775438645,\n",
       " 143.76587349827292,\n",
       " 134.074239507796,\n",
       " 124.37058307511985,\n",
       " 182.5907695308747,\n",
       " 172.8803829688857,\n",
       " 163.17816523055296,\n",
       " 153.47773584794004,\n",
       " 143.77925691593413,\n",
       " 134.07670944650965,\n",
       " 124.37460821975712,\n",
       " 182.60159582038418,\n",
       " 172.89794394159287,\n",
       " 163.19443250407176,\n",
       " 153.49615811165148,\n",
       " 143.7952557654737,\n",
       " 134.08840781018887,\n",
       " 124.38162373929754,\n",
       " 182.60215321984865,\n",
       " 172.89214766075565,\n",
       " 163.18866212952835,\n",
       " 153.4893663945623,\n",
       " 143.78846024920495,\n",
       " 134.08473477757326,\n",
       " 124.38394881633997,\n",
       " 590.1101006863817,\n",
       " 173.0593423071999,\n",
       " 163.3581955540191,\n",
       " 153.66143540484217,\n",
       " 143.96468909015312,\n",
       " 134.26077806798565,\n",
       " 124.55778788125312,\n",
       " 182.68773688565818,\n",
       " 172.8873027628181,\n",
       " 163.1804021803466,\n",
       " 153.48763128382654,\n",
       " 143.798989157119,\n",
       " 134.0983861691405,\n",
       " 124.39381405559145,\n",
       " 182.61852879906323,\n",
       " ...]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fill the prediction blank positions with nan, concat with 'preds' values  \n",
    "preds_dtr = [ np.nan ] * X_train.shape[0]  + list(preds_dtr)\n",
    "preds_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "671d2484",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.021102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.001806</td>\n",
       "      <td>0.011760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000570</td>\n",
       "      <td>0.000915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>0.000261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000666</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.594899</td>\n",
       "      <td>0.588410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.596040</td>\n",
       "      <td>0.561983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>774</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.596515</td>\n",
       "      <td>0.562506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.599510</td>\n",
       "      <td>0.592069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>776</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.602505</td>\n",
       "      <td>0.624179</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>777 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     holiday  day_of_week     rol_7    rol_10\n",
       "0        0.0     0.333333  0.000000  0.021102\n",
       "1        0.0     0.500000  0.001806  0.011760\n",
       "2        0.0     0.666667  0.000570  0.000915\n",
       "3        0.0     0.833333  0.002947  0.000261\n",
       "4        0.0     1.000000  0.000666  0.000000\n",
       "..       ...          ...       ...       ...\n",
       "772      0.0     0.666667  0.594899  0.588410\n",
       "773      0.0     0.833333  0.596040  0.561983\n",
       "774      0.0     1.000000  0.596515  0.562506\n",
       "775      0.0     0.000000  0.599510  0.592069\n",
       "776      0.0     0.166667  0.602505  0.624179\n",
       "\n",
       "[777 rows x 4 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "8919e046",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_true</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>117.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "      <td>109.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>134.189292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>124.485029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>182.706978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>172.998344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>1156.0</td>\n",
       "      <td>163.296957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            y_true       preds\n",
       "date                          \n",
       "2019-01-30   117.0         NaN\n",
       "2019-01-31   109.0         NaN\n",
       "2019-02-01    86.0         NaN\n",
       "2019-02-02   102.0         NaN\n",
       "2019-02-03    86.0         NaN\n",
       "...            ...         ...\n",
       "2021-11-27  1141.0  134.189292\n",
       "2021-11-28  1141.0  124.485029\n",
       "2021-11-29  1738.5  182.706978\n",
       "2021-11-30  1738.5  172.998344\n",
       "2021-12-01  1156.0  163.296957\n",
       "\n",
       "[1037 rows x 2 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add preds into the df\n",
    "comp_dtr['preds'] = preds_dtr\n",
    "comp_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "b7e5bf52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comp_dtr.plot(figsize=(15,10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8916c465",
   "metadata": {},
   "source": [
    "## TimeSeriesSplit to split the data test models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "e34c4427",
   "metadata": {},
   "outputs": [],
   "source": [
    "report = pd.DataFrame( columns=['split',\n",
    "                                'max_error_lin','r2_lin', 'mae_lin',\n",
    "                                'max_error_dtr','r2_dtr', 'mae_dtr',\n",
    "                                'max_error_knn','r2_knn', 'mae_knn', \n",
    "                                'max_error_sgdr','r2_sgdr', 'mae_sgdr'\n",
    "                                ] )\n",
    "n= 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "945abde7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "tscv = TimeSeriesSplit(n_splits=30)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7bfb96bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2647265288.py:26: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.neighbors import KNeighborsRegressor \n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "lin_reg = LinearRegression().fit(X_scaled, y)\n",
    "dtr = DecisionTreeRegressor(random_state=0)\n",
    "KNN = KNeighborsRegressor(n_neighbors=5, weights= 'distance')\n",
    "sgdr = SGDRegressor()\n",
    "\n",
    "for train_index, test_index in tscv.split(X):\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    reg.fit(X_train, y_train)\n",
    "    sgdr.fit(X_train, y_train)\n",
    "    KNN.fit(X_train, y_train)\n",
    "    dtr.fit(X_train, y_train)\n",
    "        \n",
    "    lin_y_pred = reg.predict( X_test )\n",
    "    sgdr_y_pred = reg.predict( X_test )\n",
    "    KNN_y_pred = KNN.predict( X_test )\n",
    "    dtr_y_pred = dtr.predict( X_test )\n",
    "       \n",
    "    report= report.append({'split': n,\n",
    "                           'max_error_lin':max_error(lin_y_pred,y_test),\n",
    "                           'r2_lin': r2_score(lin_y_pred,y_test), \n",
    "                           'mae_lin':mean_absolute_error(lin_y_pred,y_test),\n",
    "                           'max_error_dtr': max_error(dtr_y_pred,y_test),\n",
    "                           'r2_dtr': r2_score(dtr_y_pred,y_test), \n",
    "                           'mae_dtr':mean_absolute_error(dtr_y_pred,y_test),\n",
    "                           'max_error_knn': max_error(KNN_y_pred,y_test),\n",
    "                           'r2_knn': r2_score(KNN_y_pred,y_test), \n",
    "                           'mae_knn':mean_absolute_error(KNN_y_pred,y_test),\n",
    "                           'max_error_sgdr': max_error(sgdr_y_pred,y_test),\n",
    "                           'r2_sgdr': r2_score(sgdr_y_pred,y_test),\n",
    "                           'mae_sgdr':mean_absolute_error(sgdr_y_pred,y_test)},\n",
    "                            ignore_index=True)\n",
    "    n+=1  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "182f1942",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>split</th>\n",
       "      <th>max_error_lin</th>\n",
       "      <th>r2_lin</th>\n",
       "      <th>mae_lin</th>\n",
       "      <th>max_error_dtr</th>\n",
       "      <th>r2_dtr</th>\n",
       "      <th>mae_dtr</th>\n",
       "      <th>max_error_knn</th>\n",
       "      <th>r2_knn</th>\n",
       "      <th>mae_knn</th>\n",
       "      <th>max_error_sgdr</th>\n",
       "      <th>r2_sgdr</th>\n",
       "      <th>mae_sgdr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>117.626243</td>\n",
       "      <td>0.328034</td>\n",
       "      <td>38.261251</td>\n",
       "      <td>201.0</td>\n",
       "      <td>-5.708244</td>\n",
       "      <td>72.469697</td>\n",
       "      <td>272.757052</td>\n",
       "      <td>-160.680248</td>\n",
       "      <td>75.98565</td>\n",
       "      <td>117.626243</td>\n",
       "      <td>0.328034</td>\n",
       "      <td>38.261251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>110.479698</td>\n",
       "      <td>-0.087663</td>\n",
       "      <td>41.335743</td>\n",
       "      <td>185.5</td>\n",
       "      <td>-0.201106</td>\n",
       "      <td>56.469697</td>\n",
       "      <td>144.934956</td>\n",
       "      <td>-35.921591</td>\n",
       "      <td>85.912266</td>\n",
       "      <td>110.479698</td>\n",
       "      <td>-0.087663</td>\n",
       "      <td>41.335743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>131.737757</td>\n",
       "      <td>0.201543</td>\n",
       "      <td>37.197652</td>\n",
       "      <td>162.5</td>\n",
       "      <td>-0.223998</td>\n",
       "      <td>59.772727</td>\n",
       "      <td>243.266883</td>\n",
       "      <td>-7.745743</td>\n",
       "      <td>54.238756</td>\n",
       "      <td>131.737757</td>\n",
       "      <td>0.201543</td>\n",
       "      <td>37.197652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>75.35347</td>\n",
       "      <td>0.303378</td>\n",
       "      <td>30.180308</td>\n",
       "      <td>141.0</td>\n",
       "      <td>0.642717</td>\n",
       "      <td>36.674242</td>\n",
       "      <td>124.902491</td>\n",
       "      <td>-3.54533</td>\n",
       "      <td>42.023597</td>\n",
       "      <td>75.35347</td>\n",
       "      <td>0.303378</td>\n",
       "      <td>30.180308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>106.57009</td>\n",
       "      <td>-0.029476</td>\n",
       "      <td>44.839608</td>\n",
       "      <td>186.0</td>\n",
       "      <td>0.156365</td>\n",
       "      <td>43.212121</td>\n",
       "      <td>149.018073</td>\n",
       "      <td>-2.280867</td>\n",
       "      <td>67.799754</td>\n",
       "      <td>106.57009</td>\n",
       "      <td>-0.029476</td>\n",
       "      <td>44.839608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.0</td>\n",
       "      <td>269.824769</td>\n",
       "      <td>-1.243757</td>\n",
       "      <td>63.10851</td>\n",
       "      <td>272.25</td>\n",
       "      <td>0.018453</td>\n",
       "      <td>34.621212</td>\n",
       "      <td>328.034455</td>\n",
       "      <td>-5.234902</td>\n",
       "      <td>74.891776</td>\n",
       "      <td>269.824769</td>\n",
       "      <td>-1.243757</td>\n",
       "      <td>63.10851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6.0</td>\n",
       "      <td>256.211369</td>\n",
       "      <td>-0.218733</td>\n",
       "      <td>67.161533</td>\n",
       "      <td>457.0</td>\n",
       "      <td>0.415332</td>\n",
       "      <td>69.136364</td>\n",
       "      <td>387.200523</td>\n",
       "      <td>-7.075969</td>\n",
       "      <td>90.353463</td>\n",
       "      <td>256.211369</td>\n",
       "      <td>-0.218733</td>\n",
       "      <td>67.161533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7.0</td>\n",
       "      <td>321.742342</td>\n",
       "      <td>-0.706415</td>\n",
       "      <td>72.561553</td>\n",
       "      <td>330.75</td>\n",
       "      <td>0.455984</td>\n",
       "      <td>83.871212</td>\n",
       "      <td>395.380351</td>\n",
       "      <td>-5.860793</td>\n",
       "      <td>104.595399</td>\n",
       "      <td>321.742342</td>\n",
       "      <td>-0.706415</td>\n",
       "      <td>72.561553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.0</td>\n",
       "      <td>107.045651</td>\n",
       "      <td>0.448654</td>\n",
       "      <td>56.41693</td>\n",
       "      <td>373.0</td>\n",
       "      <td>0.600403</td>\n",
       "      <td>86.598485</td>\n",
       "      <td>189.610516</td>\n",
       "      <td>-0.326742</td>\n",
       "      <td>72.183464</td>\n",
       "      <td>107.045651</td>\n",
       "      <td>0.448654</td>\n",
       "      <td>56.41693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9.0</td>\n",
       "      <td>375.546406</td>\n",
       "      <td>-1.214818</td>\n",
       "      <td>84.476243</td>\n",
       "      <td>357.0</td>\n",
       "      <td>0.472119</td>\n",
       "      <td>69.356061</td>\n",
       "      <td>414.58486</td>\n",
       "      <td>-4.479151</td>\n",
       "      <td>124.154726</td>\n",
       "      <td>375.546406</td>\n",
       "      <td>-1.214818</td>\n",
       "      <td>84.476243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10.0</td>\n",
       "      <td>411.204917</td>\n",
       "      <td>-0.683974</td>\n",
       "      <td>104.053476</td>\n",
       "      <td>673.75</td>\n",
       "      <td>0.539558</td>\n",
       "      <td>113.719697</td>\n",
       "      <td>553.613615</td>\n",
       "      <td>-4.401499</td>\n",
       "      <td>169.640864</td>\n",
       "      <td>411.204917</td>\n",
       "      <td>-0.683974</td>\n",
       "      <td>104.053476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11.0</td>\n",
       "      <td>244.405506</td>\n",
       "      <td>0.4565</td>\n",
       "      <td>85.043114</td>\n",
       "      <td>402.0</td>\n",
       "      <td>-0.338771</td>\n",
       "      <td>151.257576</td>\n",
       "      <td>568.223598</td>\n",
       "      <td>-10.951983</td>\n",
       "      <td>160.772028</td>\n",
       "      <td>244.405506</td>\n",
       "      <td>0.4565</td>\n",
       "      <td>85.043114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12.0</td>\n",
       "      <td>299.241084</td>\n",
       "      <td>0.2489</td>\n",
       "      <td>114.423542</td>\n",
       "      <td>440.25</td>\n",
       "      <td>-1.662804</td>\n",
       "      <td>151.212121</td>\n",
       "      <td>439.634922</td>\n",
       "      <td>-21.827221</td>\n",
       "      <td>168.701113</td>\n",
       "      <td>299.241084</td>\n",
       "      <td>0.2489</td>\n",
       "      <td>114.423542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13.0</td>\n",
       "      <td>470.392562</td>\n",
       "      <td>-0.757445</td>\n",
       "      <td>100.797865</td>\n",
       "      <td>555.0</td>\n",
       "      <td>-0.539792</td>\n",
       "      <td>133.143939</td>\n",
       "      <td>585.646804</td>\n",
       "      <td>-4.117794</td>\n",
       "      <td>136.111555</td>\n",
       "      <td>470.392562</td>\n",
       "      <td>-0.757445</td>\n",
       "      <td>100.797865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14.0</td>\n",
       "      <td>268.757729</td>\n",
       "      <td>-1.635536</td>\n",
       "      <td>95.040038</td>\n",
       "      <td>319.0</td>\n",
       "      <td>0.205367</td>\n",
       "      <td>106.0</td>\n",
       "      <td>387.420692</td>\n",
       "      <td>-4.136956</td>\n",
       "      <td>204.469584</td>\n",
       "      <td>268.757729</td>\n",
       "      <td>-1.635536</td>\n",
       "      <td>95.040038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15.0</td>\n",
       "      <td>196.987826</td>\n",
       "      <td>-0.495788</td>\n",
       "      <td>85.129198</td>\n",
       "      <td>325.5</td>\n",
       "      <td>0.428873</td>\n",
       "      <td>87.121212</td>\n",
       "      <td>290.832526</td>\n",
       "      <td>-3.137273</td>\n",
       "      <td>117.277118</td>\n",
       "      <td>196.987826</td>\n",
       "      <td>-0.495788</td>\n",
       "      <td>85.129198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16.0</td>\n",
       "      <td>549.33151</td>\n",
       "      <td>-1.587005</td>\n",
       "      <td>132.591353</td>\n",
       "      <td>297.0</td>\n",
       "      <td>0.556041</td>\n",
       "      <td>151.234848</td>\n",
       "      <td>732.457068</td>\n",
       "      <td>-9.906182</td>\n",
       "      <td>198.962581</td>\n",
       "      <td>549.33151</td>\n",
       "      <td>-1.587005</td>\n",
       "      <td>132.591353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17.0</td>\n",
       "      <td>576.885775</td>\n",
       "      <td>-0.965971</td>\n",
       "      <td>140.376984</td>\n",
       "      <td>545.25</td>\n",
       "      <td>0.345491</td>\n",
       "      <td>132.409091</td>\n",
       "      <td>888.867193</td>\n",
       "      <td>-5.742139</td>\n",
       "      <td>197.499625</td>\n",
       "      <td>576.885775</td>\n",
       "      <td>-0.965971</td>\n",
       "      <td>140.376984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18.0</td>\n",
       "      <td>221.499473</td>\n",
       "      <td>-0.158852</td>\n",
       "      <td>100.449239</td>\n",
       "      <td>501.75</td>\n",
       "      <td>0.52832</td>\n",
       "      <td>148.121212</td>\n",
       "      <td>313.380416</td>\n",
       "      <td>-2.229719</td>\n",
       "      <td>151.358092</td>\n",
       "      <td>221.499473</td>\n",
       "      <td>-0.158852</td>\n",
       "      <td>100.449239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19.0</td>\n",
       "      <td>242.258319</td>\n",
       "      <td>0.17284</td>\n",
       "      <td>89.246541</td>\n",
       "      <td>333.5</td>\n",
       "      <td>0.759346</td>\n",
       "      <td>66.060606</td>\n",
       "      <td>372.902088</td>\n",
       "      <td>-1.102243</td>\n",
       "      <td>152.637905</td>\n",
       "      <td>242.258319</td>\n",
       "      <td>0.17284</td>\n",
       "      <td>89.246541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20.0</td>\n",
       "      <td>679.897925</td>\n",
       "      <td>-1.526867</td>\n",
       "      <td>148.916622</td>\n",
       "      <td>660.75</td>\n",
       "      <td>0.513533</td>\n",
       "      <td>82.098485</td>\n",
       "      <td>813.551918</td>\n",
       "      <td>-6.383126</td>\n",
       "      <td>247.507544</td>\n",
       "      <td>679.897925</td>\n",
       "      <td>-1.526867</td>\n",
       "      <td>148.916622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21.0</td>\n",
       "      <td>667.970499</td>\n",
       "      <td>-0.992497</td>\n",
       "      <td>162.796156</td>\n",
       "      <td>363.75</td>\n",
       "      <td>0.765406</td>\n",
       "      <td>108.825758</td>\n",
       "      <td>798.502286</td>\n",
       "      <td>-2.373473</td>\n",
       "      <td>226.784082</td>\n",
       "      <td>667.970499</td>\n",
       "      <td>-0.992497</td>\n",
       "      <td>162.796156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22.0</td>\n",
       "      <td>462.597855</td>\n",
       "      <td>0.325415</td>\n",
       "      <td>172.773057</td>\n",
       "      <td>521.0</td>\n",
       "      <td>0.361893</td>\n",
       "      <td>203.848485</td>\n",
       "      <td>914.713329</td>\n",
       "      <td>-6.525842</td>\n",
       "      <td>259.98249</td>\n",
       "      <td>462.597855</td>\n",
       "      <td>0.325415</td>\n",
       "      <td>172.773057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23.0</td>\n",
       "      <td>416.096918</td>\n",
       "      <td>0.440313</td>\n",
       "      <td>130.910336</td>\n",
       "      <td>590.25</td>\n",
       "      <td>0.429083</td>\n",
       "      <td>186.818182</td>\n",
       "      <td>788.397637</td>\n",
       "      <td>-2.402491</td>\n",
       "      <td>260.552901</td>\n",
       "      <td>416.096918</td>\n",
       "      <td>0.440313</td>\n",
       "      <td>130.910336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24.0</td>\n",
       "      <td>738.387323</td>\n",
       "      <td>-1.769528</td>\n",
       "      <td>189.595384</td>\n",
       "      <td>714.75</td>\n",
       "      <td>0.015203</td>\n",
       "      <td>209.386364</td>\n",
       "      <td>846.226286</td>\n",
       "      <td>-8.699923</td>\n",
       "      <td>281.675855</td>\n",
       "      <td>738.387323</td>\n",
       "      <td>-1.769528</td>\n",
       "      <td>189.595384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25.0</td>\n",
       "      <td>712.096664</td>\n",
       "      <td>-0.637265</td>\n",
       "      <td>198.829855</td>\n",
       "      <td>819.0</td>\n",
       "      <td>0.511404</td>\n",
       "      <td>186.787879</td>\n",
       "      <td>1026.878605</td>\n",
       "      <td>-2.651593</td>\n",
       "      <td>253.466707</td>\n",
       "      <td>712.096664</td>\n",
       "      <td>-0.637265</td>\n",
       "      <td>198.829855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26.0</td>\n",
       "      <td>314.685221</td>\n",
       "      <td>-1.628891</td>\n",
       "      <td>138.220251</td>\n",
       "      <td>406.0</td>\n",
       "      <td>-0.31392</td>\n",
       "      <td>225.924242</td>\n",
       "      <td>664.964178</td>\n",
       "      <td>-4.424516</td>\n",
       "      <td>358.307153</td>\n",
       "      <td>314.685221</td>\n",
       "      <td>-1.628891</td>\n",
       "      <td>138.220251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27.0</td>\n",
       "      <td>782.152888</td>\n",
       "      <td>-0.594455</td>\n",
       "      <td>201.351046</td>\n",
       "      <td>923.25</td>\n",
       "      <td>0.248121</td>\n",
       "      <td>203.037879</td>\n",
       "      <td>995.362026</td>\n",
       "      <td>-6.147302</td>\n",
       "      <td>300.790594</td>\n",
       "      <td>782.152888</td>\n",
       "      <td>-0.594455</td>\n",
       "      <td>201.351046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28.0</td>\n",
       "      <td>910.790731</td>\n",
       "      <td>-2.103744</td>\n",
       "      <td>225.076973</td>\n",
       "      <td>1026.75</td>\n",
       "      <td>0.333783</td>\n",
       "      <td>180.295455</td>\n",
       "      <td>1036.740808</td>\n",
       "      <td>-8.012681</td>\n",
       "      <td>316.776959</td>\n",
       "      <td>910.790731</td>\n",
       "      <td>-2.103744</td>\n",
       "      <td>225.076973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29.0</td>\n",
       "      <td>323.825369</td>\n",
       "      <td>0.226304</td>\n",
       "      <td>144.554918</td>\n",
       "      <td>813.75</td>\n",
       "      <td>0.244837</td>\n",
       "      <td>266.151515</td>\n",
       "      <td>951.905643</td>\n",
       "      <td>-0.660607</td>\n",
       "      <td>310.519874</td>\n",
       "      <td>323.825369</td>\n",
       "      <td>0.226304</td>\n",
       "      <td>144.554918</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   split max_error_lin    r2_lin     mae_lin max_error_dtr    r2_dtr  \\\n",
       "0    0.0    117.626243  0.328034   38.261251         201.0 -5.708244   \n",
       "1    1.0    110.479698 -0.087663   41.335743         185.5 -0.201106   \n",
       "2    2.0    131.737757  0.201543   37.197652         162.5 -0.223998   \n",
       "3    3.0      75.35347  0.303378   30.180308         141.0  0.642717   \n",
       "4    4.0     106.57009 -0.029476   44.839608         186.0  0.156365   \n",
       "5    5.0    269.824769 -1.243757    63.10851        272.25  0.018453   \n",
       "6    6.0    256.211369 -0.218733   67.161533         457.0  0.415332   \n",
       "7    7.0    321.742342 -0.706415   72.561553        330.75  0.455984   \n",
       "8    8.0    107.045651  0.448654    56.41693         373.0  0.600403   \n",
       "9    9.0    375.546406 -1.214818   84.476243         357.0  0.472119   \n",
       "10  10.0    411.204917 -0.683974  104.053476        673.75  0.539558   \n",
       "11  11.0    244.405506    0.4565   85.043114         402.0 -0.338771   \n",
       "12  12.0    299.241084    0.2489  114.423542        440.25 -1.662804   \n",
       "13  13.0    470.392562 -0.757445  100.797865         555.0 -0.539792   \n",
       "14  14.0    268.757729 -1.635536   95.040038         319.0  0.205367   \n",
       "15  15.0    196.987826 -0.495788   85.129198         325.5  0.428873   \n",
       "16  16.0     549.33151 -1.587005  132.591353         297.0  0.556041   \n",
       "17  17.0    576.885775 -0.965971  140.376984        545.25  0.345491   \n",
       "18  18.0    221.499473 -0.158852  100.449239        501.75   0.52832   \n",
       "19  19.0    242.258319   0.17284   89.246541         333.5  0.759346   \n",
       "20  20.0    679.897925 -1.526867  148.916622        660.75  0.513533   \n",
       "21  21.0    667.970499 -0.992497  162.796156        363.75  0.765406   \n",
       "22  22.0    462.597855  0.325415  172.773057         521.0  0.361893   \n",
       "23  23.0    416.096918  0.440313  130.910336        590.25  0.429083   \n",
       "24  24.0    738.387323 -1.769528  189.595384        714.75  0.015203   \n",
       "25  25.0    712.096664 -0.637265  198.829855         819.0  0.511404   \n",
       "26  26.0    314.685221 -1.628891  138.220251         406.0  -0.31392   \n",
       "27  27.0    782.152888 -0.594455  201.351046        923.25  0.248121   \n",
       "28  28.0    910.790731 -2.103744  225.076973       1026.75  0.333783   \n",
       "29  29.0    323.825369  0.226304  144.554918        813.75  0.244837   \n",
       "\n",
       "       mae_dtr max_error_knn      r2_knn     mae_knn max_error_sgdr   r2_sgdr  \\\n",
       "0    72.469697    272.757052 -160.680248    75.98565     117.626243  0.328034   \n",
       "1    56.469697    144.934956  -35.921591   85.912266     110.479698 -0.087663   \n",
       "2    59.772727    243.266883   -7.745743   54.238756     131.737757  0.201543   \n",
       "3    36.674242    124.902491    -3.54533   42.023597       75.35347  0.303378   \n",
       "4    43.212121    149.018073   -2.280867   67.799754      106.57009 -0.029476   \n",
       "5    34.621212    328.034455   -5.234902   74.891776     269.824769 -1.243757   \n",
       "6    69.136364    387.200523   -7.075969   90.353463     256.211369 -0.218733   \n",
       "7    83.871212    395.380351   -5.860793  104.595399     321.742342 -0.706415   \n",
       "8    86.598485    189.610516   -0.326742   72.183464     107.045651  0.448654   \n",
       "9    69.356061     414.58486   -4.479151  124.154726     375.546406 -1.214818   \n",
       "10  113.719697    553.613615   -4.401499  169.640864     411.204917 -0.683974   \n",
       "11  151.257576    568.223598  -10.951983  160.772028     244.405506    0.4565   \n",
       "12  151.212121    439.634922  -21.827221  168.701113     299.241084    0.2489   \n",
       "13  133.143939    585.646804   -4.117794  136.111555     470.392562 -0.757445   \n",
       "14       106.0    387.420692   -4.136956  204.469584     268.757729 -1.635536   \n",
       "15   87.121212    290.832526   -3.137273  117.277118     196.987826 -0.495788   \n",
       "16  151.234848    732.457068   -9.906182  198.962581      549.33151 -1.587005   \n",
       "17  132.409091    888.867193   -5.742139  197.499625     576.885775 -0.965971   \n",
       "18  148.121212    313.380416   -2.229719  151.358092     221.499473 -0.158852   \n",
       "19   66.060606    372.902088   -1.102243  152.637905     242.258319   0.17284   \n",
       "20   82.098485    813.551918   -6.383126  247.507544     679.897925 -1.526867   \n",
       "21  108.825758    798.502286   -2.373473  226.784082     667.970499 -0.992497   \n",
       "22  203.848485    914.713329   -6.525842   259.98249     462.597855  0.325415   \n",
       "23  186.818182    788.397637   -2.402491  260.552901     416.096918  0.440313   \n",
       "24  209.386364    846.226286   -8.699923  281.675855     738.387323 -1.769528   \n",
       "25  186.787879   1026.878605   -2.651593  253.466707     712.096664 -0.637265   \n",
       "26  225.924242    664.964178   -4.424516  358.307153     314.685221 -1.628891   \n",
       "27  203.037879    995.362026   -6.147302  300.790594     782.152888 -0.594455   \n",
       "28  180.295455   1036.740808   -8.012681  316.776959     910.790731 -2.103744   \n",
       "29  266.151515    951.905643   -0.660607  310.519874     323.825369  0.226304   \n",
       "\n",
       "      mae_sgdr  \n",
       "0    38.261251  \n",
       "1    41.335743  \n",
       "2    37.197652  \n",
       "3    30.180308  \n",
       "4    44.839608  \n",
       "5     63.10851  \n",
       "6    67.161533  \n",
       "7    72.561553  \n",
       "8     56.41693  \n",
       "9    84.476243  \n",
       "10  104.053476  \n",
       "11   85.043114  \n",
       "12  114.423542  \n",
       "13  100.797865  \n",
       "14   95.040038  \n",
       "15   85.129198  \n",
       "16  132.591353  \n",
       "17  140.376984  \n",
       "18  100.449239  \n",
       "19   89.246541  \n",
       "20  148.916622  \n",
       "21  162.796156  \n",
       "22  172.773057  \n",
       "23  130.910336  \n",
       "24  189.595384  \n",
       "25  198.829855  \n",
       "26  138.220251  \n",
       "27  201.351046  \n",
       "28  225.076973  \n",
       "29  144.554918  "
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "e800fac4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\532847308.py:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  max_error_mean_report = max_error_mean_report.append({'max_error_knn_mean': max_error_knn_mean,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_error_knn_mean</th>\n",
       "      <th>max_error_sgdr_mean</th>\n",
       "      <th>max_error_lin_mean</th>\n",
       "      <th>max_error_dtr_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>951.905643</td>\n",
       "      <td>323.825369</td>\n",
       "      <td>323.825369</td>\n",
       "      <td>813.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  max_error_knn_mean max_error_sgdr_mean max_error_lin_mean max_error_dtr_mean\n",
       "0         951.905643          323.825369         323.825369             813.75"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_error_mean_report = pd.DataFrame( columns=['max_error_knn_mean','max_error_sgdr_mean','max_error_lin_mean','max_error_dtr_mean'] )\n",
    "m= 0\n",
    "\n",
    "max_error_knn_mean= max_error(KNN_y_pred,y_test).mean()\n",
    "max_error_sgdr_mean= max_error(sgdr_y_pred,y_test).mean()\n",
    "max_error_lin_mean= max_error(lin_y_pred,y_test).mean()\n",
    "max_error_dtr_mean= max_error(dtr_y_pred,y_test).mean()\n",
    "\n",
    "max_error_mean_report = max_error_mean_report.append({'max_error_knn_mean': max_error_knn_mean,\n",
    "                                'max_error_sgdr_mean':max_error_sgdr_mean,\n",
    "                                'max_error_lin_mean':max_error_lin_mean,\n",
    "                                'max_error_dtr_mean':max_error_dtr_mean}, \n",
    "                                ignore_index= True)\n",
    "m+=1\n",
    "\n",
    "max_error_mean_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "4c8e1e41",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2850408021.py:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  mae_mean_report = mae_mean_report.append({'mae_knn_mean': mae_knn_mean,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mae_knn_mean</th>\n",
       "      <th>mae_sgdr_mean</th>\n",
       "      <th>mae_lin_mean</th>\n",
       "      <th>mae_dtr_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>310.519874</td>\n",
       "      <td>144.554918</td>\n",
       "      <td>144.554918</td>\n",
       "      <td>266.151515</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  mae_knn_mean mae_sgdr_mean mae_lin_mean mae_dtr_mean\n",
       "0   310.519874    144.554918   144.554918   266.151515"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mae_mean_report = pd.DataFrame( columns=['mae_knn_mean','mae_sgdr_mean','mae_lin_mean','mae_dtr_mean'] )\n",
    "m= 0\n",
    "\n",
    "mae_knn_mean= mean_absolute_error(KNN_y_pred,y_test).mean()\n",
    "mae_sgdr_mean= mean_absolute_error(sgdr_y_pred,y_test).mean()\n",
    "mae_lin_mean= mean_absolute_error(lin_y_pred,y_test).mean()\n",
    "mae_dtr_mean= mean_absolute_error(dtr_y_pred,y_test).mean()\n",
    "\n",
    "mae_mean_report = mae_mean_report.append({'mae_knn_mean': mae_knn_mean,\n",
    "                                'mae_sgdr_mean':mae_sgdr_mean,\n",
    "                                'mae_lin_mean':mae_lin_mean,\n",
    "                                'mae_dtr_mean':mae_dtr_mean},\n",
    "                                ignore_index= True)\n",
    "m+=1\n",
    "\n",
    "mae_mean_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3396f8b8",
   "metadata": {},
   "source": [
    "### Summary: \n",
    "In general the TimeSerialSplit methos is not very suitable for testing the models. The relatively good model is DecisionTreeRegressor. R2 score is 0.244, the max error mean is 813.75, is high. So as the MeanAbsolute Error, 266.152.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ff55114",
   "metadata": {},
   "source": [
    "### Visulization - TimeSerialsSplit, DTR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "5f114b87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# training test split manual- 3/4 training, validation on 1/4\n",
    "X_train, X_test = X_scaled.iloc[ : int(0.75*len(X_scaled)) ], X_scaled.iloc[ int(0.75*len(X_scaled)) : ]\n",
    "y_train, y_test = y.iloc[ : int(0.75*len(y)) ], y.iloc[ int(0.75*len(y)) : ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "f1719992",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "dtr = DecisionTreeRegressor(random_state=0)\n",
    "dtr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "d53c89f9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 893.  ,  858.  ,  893.  ,  893.  ,  893.  , 1233.  , 1233.  ,\n",
       "        893.  ,  708.  ,  893.  ,  893.  ,  893.  , 1233.  ,  874.  ,\n",
       "        893.  ,  824.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  824.  ,  839.  ,  839.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  ,  824.  ,  839.  ,  839.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  ,  831.  ,  839.  ,  839.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  ,  831.  ,  839.  ,  839.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  ,  831.  ,  839.  ,  839.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  , 1198.5 ,  839.  ,  839.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  ,  824.  ,  839.  ,  839.  , 1311.  , 1264.5 ,\n",
       "        708.  ,  708.  ,  858.  ,  858.  ,  858.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        829.  ,  824.  ,  824.  ,  839.  ,  839.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  863.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1264.5 ,\n",
       "        829.  ,  858.  ,  858.  ,  858.  ,  858.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1869.75,\n",
       "        829.  ,  824.  ,  824.  ,  839.  ,  839.  , 1894.5 , 1894.5 ,\n",
       "        856.  , 1146.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ,  874.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  , 1146.  ,  874.  ,  874.  ,  874.  , 1894.5 , 1894.5 ,\n",
       "        856.  ])"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds_dtr= dtr.predict(X_test)\n",
    "preds_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "3389940a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "0d5abca1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.021102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.001806</td>\n",
       "      <td>0.011760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000570</td>\n",
       "      <td>0.000915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>0.000261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000666</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.594899</td>\n",
       "      <td>0.588410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.596040</td>\n",
       "      <td>0.561983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>774</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.596515</td>\n",
       "      <td>0.562506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>775</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.599510</td>\n",
       "      <td>0.592069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>776</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.602505</td>\n",
       "      <td>0.624179</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>777 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     holiday  day_of_week     rol_7    rol_10\n",
       "0        0.0     0.333333  0.000000  0.021102\n",
       "1        0.0     0.500000  0.001806  0.011760\n",
       "2        0.0     0.666667  0.000570  0.000915\n",
       "3        0.0     0.833333  0.002947  0.000261\n",
       "4        0.0     1.000000  0.000666  0.000000\n",
       "..       ...          ...       ...       ...\n",
       "772      0.0     0.666667  0.594899  0.588410\n",
       "773      0.0     0.833333  0.596040  0.561983\n",
       "774      0.0     1.000000  0.596515  0.562506\n",
       "775      0.0     0.000000  0.599510  0.592069\n",
       "776      0.0     0.166667  0.602505  0.624179\n",
       "\n",
       "[777 rows x 4 columns]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "4786505c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29      117.0\n",
       "30      109.0\n",
       "31       86.0\n",
       "32      102.0\n",
       "33       86.0\n",
       "        ...  \n",
       "801     858.0\n",
       "802     863.0\n",
       "803     893.0\n",
       "804    1342.5\n",
       "805    1342.5\n",
       "Name: y, Length: 777, dtype: float64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "360950a9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [2019-01-30 00:00:00, 2019-01-31 00:00:00, 2019-02-01 00:00:00, 2019-02-02 00:00:00, 2019-02-03 00:00:00, 2019-02-04 00:00:00, 2019-02-05 00:00:00, 2019-02-06 00:00:00, 2019-02-07 00:00:00, 2019-02-08 00:00:00, 2019-02-09 00:00:00, 2019-02-10 00:00:00, 2019-02-11 00:00:00, 2019-02-12 00:00:00, 2019-02-13 00:00:00, 2019-02-14 00:00:00, 2019-02-15 00:00:00, 2019-02-16 00:00:00, 2019-02-17 00:00:00, 2019-02-18 00:00:00, 2019-02-19 00:00:00, 2019-02-20 00:00:00, 2019-02-21 00:00:00, 2019-02-22 00:00:00, 2019-02-23 00:00:00, 2019-02-24 00:00:00, 2019-02-25 00:00:00, 2019-02-26 00:00:00, 2019-02-27 00:00:00, 2019-02-28 00:00:00, 2019-03-01 00:00:00, 2019-03-02 00:00:00, 2019-03-03 00:00:00, 2019-03-04 00:00:00, 2019-03-05 00:00:00, 2019-03-06 00:00:00, 2019-03-07 00:00:00, 2019-03-08 00:00:00, 2019-03-09 00:00:00, 2019-03-10 00:00:00, 2019-03-11 00:00:00, 2019-03-12 00:00:00, 2019-03-13 00:00:00, 2019-03-14 00:00:00, 2019-03-15 00:00:00, 2019-03-16 00:00:00, 2019-03-17 00:00:00, 2019-03-18 00:00:00, 2019-03-19 00:00:00, 2019-03-20 00:00:00, 2019-03-21 00:00:00, 2019-03-22 00:00:00, 2019-03-23 00:00:00, 2019-03-24 00:00:00, 2019-03-25 00:00:00, 2019-03-26 00:00:00, 2019-03-27 00:00:00, 2019-03-28 00:00:00, 2019-03-29 00:00:00, 2019-03-30 00:00:00, 2019-03-31 00:00:00, 2019-04-01 00:00:00, 2019-04-02 00:00:00, 2019-04-03 00:00:00, 2019-04-04 00:00:00, 2019-04-05 00:00:00, 2019-04-06 00:00:00, 2019-04-07 00:00:00, 2019-04-08 00:00:00, 2019-04-09 00:00:00, 2019-04-10 00:00:00, 2019-04-11 00:00:00, 2019-04-12 00:00:00, 2019-04-13 00:00:00, 2019-04-14 00:00:00, 2019-04-15 00:00:00, 2019-04-16 00:00:00, 2019-04-17 00:00:00, 2019-04-18 00:00:00, 2019-04-19 00:00:00, 2019-04-20 00:00:00, 2019-04-21 00:00:00, 2019-04-22 00:00:00, 2019-04-23 00:00:00, 2019-04-24 00:00:00, 2019-04-25 00:00:00, 2019-04-26 00:00:00, 2019-04-27 00:00:00, 2019-04-28 00:00:00, 2019-04-29 00:00:00, 2019-04-30 00:00:00, 2019-05-01 00:00:00, 2019-05-02 00:00:00, 2019-05-03 00:00:00, 2019-05-04 00:00:00, 2019-05-05 00:00:00, 2019-05-06 00:00:00, 2019-05-07 00:00:00, 2019-05-08 00:00:00, 2019-05-09 00:00:00, ...]\n",
       "\n",
       "[1037 rows x 0 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_dtr= pd.DataFrame(index=X.index)\n",
    "comp_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "d622419f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date\n",
       "2019-01-30     117.0\n",
       "2019-01-31     109.0\n",
       "2019-02-01      86.0\n",
       "2019-02-02     102.0\n",
       "2019-02-03      86.0\n",
       "               ...  \n",
       "2021-11-27    1141.0\n",
       "2021-11-28    1141.0\n",
       "2021-11-29    1738.5\n",
       "2021-11-30    1738.5\n",
       "2021-12-01    1156.0\n",
       "Name: y_true, Length: 1037, dtype: float64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_dtr['y_true'] = y.values\n",
    "comp_dtr['y_true']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "59f33a09",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " 893.0,\n",
       " 858.0,\n",
       " 893.0,\n",
       " 893.0,\n",
       " 893.0,\n",
       " 1233.0,\n",
       " 1233.0,\n",
       " 893.0,\n",
       " 708.0,\n",
       " 893.0,\n",
       " 893.0,\n",
       " 893.0,\n",
       " 1233.0,\n",
       " 874.0,\n",
       " 893.0,\n",
       " 824.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 824.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1869.75,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 824.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1869.75,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 831.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1869.75,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 831.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1869.75,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 831.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1869.75,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 1198.5,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1869.75,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 824.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1311.0,\n",
       " 1264.5,\n",
       " 708.0,\n",
       " 708.0,\n",
       " 858.0,\n",
       " 858.0,\n",
       " 858.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 829.0,\n",
       " 824.0,\n",
       " 824.0,\n",
       " 839.0,\n",
       " 839.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 863.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1264.5,\n",
       " 829.0,\n",
       " 858.0,\n",
       " 858.0,\n",
       " 858.0,\n",
       " 858.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " 1894.5,\n",
       " 856.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 874.0,\n",
       " 1894.5,\n",
       " ...]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fill the prediction blank positions with nan, concat with 'preds' values  \n",
    "preds_dtr = [ np.nan ] * X_train.shape[0]  + list(preds_dtr)\n",
    "preds_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "059163ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_true</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>117.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "      <td>109.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>874.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>874.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>1894.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>1894.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>1156.0</td>\n",
       "      <td>856.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            y_true   preds\n",
       "date                      \n",
       "2019-01-30   117.0     NaN\n",
       "2019-01-31   109.0     NaN\n",
       "2019-02-01    86.0     NaN\n",
       "2019-02-02   102.0     NaN\n",
       "2019-02-03    86.0     NaN\n",
       "...            ...     ...\n",
       "2021-11-27  1141.0   874.0\n",
       "2021-11-28  1141.0   874.0\n",
       "2021-11-29  1738.5  1894.5\n",
       "2021-11-30  1738.5  1894.5\n",
       "2021-12-01  1156.0   856.0\n",
       "\n",
       "[1037 rows x 2 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add preds into the df\n",
    "comp_dtr['preds'] = preds_dtr\n",
    "comp_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "e01e4c2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comp_dtr.plot(figsize=(15,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "73b36b80",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TBC \n",
    "# SVM- support vector machines - for classification \n",
    "# assemble model - random forest and ingredient boosting "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25d99477",
   "metadata": {},
   "source": [
    "## Permutation feature importance "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b0f4510",
   "metadata": {},
   "source": [
    "### PFI for Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "c0720223",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'importances_mean': array([ 0.04804593,  0.02671736,  0.00123461, -0.0002236 ]),\n",
       " 'importances_std': array([1.04803717e-02, 2.50660393e-03, 3.80235387e-05, 6.99869129e-06]),\n",
       " 'importances': array([[ 0.04016066,  0.05100465,  0.05709322,  0.04840541,  0.04716162,\n",
       "          0.04934551,  0.03388571,  0.060213  ,  0.04928315,  0.0636846 ,\n",
       "          0.04556869,  0.0598287 ,  0.04847029,  0.05358602,  0.02820517,\n",
       "          0.05992899,  0.06094977,  0.06679474,  0.03226854,  0.05150788,\n",
       "          0.04411458,  0.04818266,  0.04823217,  0.05653655,  0.04108443,\n",
       "          0.03910106,  0.05281361,  0.04181053,  0.02102903,  0.041127  ],\n",
       "        [ 0.02989041,  0.02458507,  0.02538282,  0.02786155,  0.02080248,\n",
       "          0.02763258,  0.02667661,  0.02791462,  0.02811004,  0.02815151,\n",
       "          0.02577335,  0.03019582,  0.02511723,  0.02627522,  0.02408865,\n",
       "          0.02972488,  0.02694715,  0.02882079,  0.02812125,  0.02574807,\n",
       "          0.03426204,  0.02577286,  0.02634679,  0.0272853 ,  0.02367242,\n",
       "          0.02758179,  0.026523  ,  0.0231438 ,  0.02453475,  0.02457789],\n",
       "        [ 0.00119951,  0.00129761,  0.00123362,  0.00126686,  0.00118281,\n",
       "          0.00126683,  0.00128228,  0.00121758,  0.00124818,  0.00127101,\n",
       "          0.0012898 ,  0.00116873,  0.00119309,  0.00125288,  0.00124711,\n",
       "          0.00125397,  0.00129974,  0.00120776,  0.00121253,  0.00127927,\n",
       "          0.00123642,  0.00123483,  0.00120671,  0.00127222,  0.00116141,\n",
       "          0.00119944,  0.00121926,  0.00122611,  0.00118182,  0.00122887],\n",
       "        [-0.00021783, -0.00023532, -0.00022206, -0.00023057, -0.00021347,\n",
       "         -0.00022965, -0.00023162, -0.00022003, -0.00022582, -0.00023039,\n",
       "         -0.00023288, -0.00021129, -0.00021698, -0.00022667, -0.00022507,\n",
       "         -0.00022878, -0.00023709, -0.00021859, -0.00022028, -0.00023085,\n",
       "         -0.00022469, -0.00022443, -0.00021723, -0.00022927, -0.00020959,\n",
       "         -0.00021795, -0.00022134, -0.00022134, -0.00021501, -0.00022183]])}"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.inspection import permutation_importance\n",
    "r = permutation_importance(reg, X_scaled, y,\n",
    "                           n_repeats=30,\n",
    "                           random_state=0)\n",
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "ff6109d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.04804593,  0.02671736,  0.00123461, -0.0002236 ])"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r['importances_mean']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "dbcaf9b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(data=r['importances_mean'], index= X_scaled.columns).plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "b340c51d",
   "metadata": {},
   "outputs": [],
   "source": [
    "scoring = ['r2', 'neg_mean_absolute_error', 'neg_mean_squared_error']\n",
    "r_multi = permutation_importance(\n",
    "    reg, X_scaled, y, n_repeats=30, random_state=0, scoring=scoring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "e6fafb5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['explained_variance', 'r2', 'max_error', 'neg_median_absolute_error', 'neg_mean_absolute_error', 'neg_mean_absolute_percentage_error', 'neg_mean_squared_error', 'neg_mean_squared_log_error', 'neg_root_mean_squared_error', 'neg_mean_poisson_deviance', 'neg_mean_gamma_deviance', 'accuracy', 'top_k_accuracy', 'roc_auc', 'roc_auc_ovr', 'roc_auc_ovo', 'roc_auc_ovr_weighted', 'roc_auc_ovo_weighted', 'balanced_accuracy', 'average_precision', 'neg_log_loss', 'neg_brier_score', 'adjusted_rand_score', 'rand_score', 'homogeneity_score', 'completeness_score', 'v_measure_score', 'mutual_info_score', 'adjusted_mutual_info_score', 'normalized_mutual_info_score', 'fowlkes_mallows_score', 'precision', 'precision_macro', 'precision_micro', 'precision_samples', 'precision_weighted', 'recall', 'recall_macro', 'recall_micro', 'recall_samples', 'recall_weighted', 'f1', 'f1_macro', 'f1_micro', 'f1_samples', 'f1_weighted', 'jaccard', 'jaccard_macro', 'jaccard_micro', 'jaccard_samples', 'jaccard_weighted'])"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn \n",
    "sklearn.metrics.SCORERS.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "e1b80050",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'importances_mean': array([ 2.27647439,  0.32774949,  0.03523224, -0.00638779]),\n",
       " 'importances_std': array([1.10866055e+00, 1.95548344e-01, 3.54692068e-03, 6.22710476e-04]),\n",
       " 'importances': array([[ 1.16898456,  3.00820938,  1.69042776,  2.42989607,  1.85664027,\n",
       "          2.23250532,  1.55827088,  2.8016117 ,  2.94673929,  4.20473617,\n",
       "          1.55841225,  3.26083912,  3.42585893,  2.52615009,  0.66839724,\n",
       "          2.4893906 ,  3.96161232,  4.19355705, -0.14507649,  1.75674405,\n",
       "          0.83477152,  2.79830925,  2.19012151,  3.74169211,  2.74297504,\n",
       "          1.3301615 ,  3.28836217,  2.12820001,  0.28931447,  1.35641761],\n",
       "        [ 0.50939395,  0.01575278,  0.33947051,  0.03775701,  0.01708474,\n",
       "          0.21729521,  0.44032829,  0.37704565,  0.34209136,  0.39548035,\n",
       "          0.24024659,  0.65365867,  0.70105014,  0.01998424,  0.72645216,\n",
       "          0.32156501,  0.43402039,  0.37361644,  0.1741949 ,  0.34285544,\n",
       "          0.43168233,  0.41349844,  0.36075321,  0.48884079,  0.17445765,\n",
       "          0.5349791 ,  0.18119253,  0.10079871,  0.06399664,  0.40294141],\n",
       "        [ 0.03000048,  0.03976267,  0.03294251,  0.0347566 ,  0.03165172,\n",
       "          0.03409734,  0.03488697,  0.04206165,  0.03289896,  0.04304141,\n",
       "          0.03670726,  0.03184113,  0.03296121,  0.04055716,  0.03194295,\n",
       "          0.03262456,  0.03873455,  0.03605907,  0.03103153,  0.03567698,\n",
       "          0.04094384,  0.03794553,  0.03396078,  0.0382719 ,  0.03384513,\n",
       "          0.02988041,  0.03753462,  0.03191467,  0.03504816,  0.03338552],\n",
       "        [-0.00546646, -0.00708547, -0.00597109, -0.00636902, -0.00578163,\n",
       "         -0.00620827, -0.00635196, -0.00766977, -0.00603714, -0.0077831 ,\n",
       "         -0.00651751, -0.00573692, -0.00619183, -0.00715442, -0.005821  ,\n",
       "         -0.00584029, -0.00721791, -0.00648183, -0.00563867, -0.00654669,\n",
       "         -0.00734214, -0.00691372, -0.00619347, -0.00689698, -0.0060081 ,\n",
       "         -0.00555207, -0.00680511, -0.00573302, -0.00619534, -0.00612264]])}"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r_multi['neg_mean_absolute_error']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "4173c1f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.27647439,  0.32774949,  0.03523224, -0.00638779])"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r_multi['neg_mean_absolute_error']['importances_mean']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "f00353c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "holiday        2.276474\n",
       "day_of_week    0.327749\n",
       "rol_7          0.035232\n",
       "rol_10        -0.006388\n",
       "dtype: float64"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series (data= r_multi['neg_mean_absolute_error']['importances_mean'], index=X_scaled.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "b3f3e8f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# how much neg_mean_absolute_error go down if I replace the feature with noise/ premute all the rows\n",
    "pd.Series (data= r_multi['neg_mean_absolute_error']['importances_mean'], index=X_scaled.columns).plot.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d840329d",
   "metadata": {},
   "source": [
    "### PFI for DTR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "7cdb0f77",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare the same metric with different models\n",
    "from sklearn.inspection import permutation_importance\n",
    "r = permutation_importance(dtr, X_scaled, y,\n",
    "                           n_repeats=30,\n",
    "                           random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "2390e944",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'importances_mean': array([0.02246261, 0.46125278, 0.60436   , 0.54944485]),\n",
       " 'importances_std': array([0.00327321, 0.02941315, 0.02515922, 0.03140804]),\n",
       " 'importances': array([[0.02326028, 0.02656711, 0.02175504, 0.02702893, 0.02436126,\n",
       "         0.02346443, 0.01964894, 0.0220119 , 0.0209185 , 0.02472089,\n",
       "         0.02721358, 0.01797763, 0.0233154 , 0.02239328, 0.0238649 ,\n",
       "         0.02385154, 0.02149534, 0.01928857, 0.02314534, 0.02554174,\n",
       "         0.02143446, 0.01814226, 0.02402153, 0.01993784, 0.02396712,\n",
       "         0.0170441 , 0.02319721, 0.02382803, 0.0124409 , 0.02804012],\n",
       "        [0.38617614, 0.45824593, 0.46356417, 0.47259377, 0.47897307,\n",
       "         0.47319714, 0.44852208, 0.43321203, 0.49467546, 0.44550335,\n",
       "         0.45828683, 0.48332295, 0.41828816, 0.4609932 , 0.47432093,\n",
       "         0.4766402 , 0.48207053, 0.48627316, 0.48168975, 0.4375655 ,\n",
       "         0.48906576, 0.41244488, 0.47843541, 0.49498827, 0.50290718,\n",
       "         0.43307746, 0.48090965, 0.46209126, 0.39170839, 0.47784093],\n",
       "        [0.59428775, 0.58846405, 0.59489706, 0.61199707, 0.63849235,\n",
       "         0.61423634, 0.59945636, 0.59656632, 0.62902842, 0.62065846,\n",
       "         0.59646095, 0.59866962, 0.59724467, 0.61438624, 0.56783147,\n",
       "         0.63647301, 0.65837284, 0.57924969, 0.64067737, 0.58867693,\n",
       "         0.5854453 , 0.60611515, 0.59082138, 0.58087349, 0.54929238,\n",
       "         0.58097796, 0.60195526, 0.57977052, 0.6446214 , 0.64480021],\n",
       "        [0.50275613, 0.55857426, 0.54613019, 0.58408623, 0.5461164 ,\n",
       "         0.56105103, 0.58180456, 0.58199209, 0.57822114, 0.57030535,\n",
       "         0.58565427, 0.52923373, 0.53533247, 0.51930759, 0.55203903,\n",
       "         0.56932992, 0.59847419, 0.5012934 , 0.52904846, 0.60196229,\n",
       "         0.56806183, 0.55739165, 0.52333383, 0.54201939, 0.46054947,\n",
       "         0.52738408, 0.55322605, 0.54076618, 0.51037627, 0.56752413]])}"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "e53cbc55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.02246261, 0.46125278, 0.60436   , 0.54944485])"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r['importances_mean']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "52a68793",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.27647439,  0.32774949,  0.03523224, -0.00638779])"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r_multi['neg_mean_absolute_error']['importances_mean']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "cf26dc81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "holiday        2.276474\n",
       "day_of_week    0.327749\n",
       "rol_7          0.035232\n",
       "rol_10        -0.006388\n",
       "dtype: float64"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series (data= r_multi['neg_mean_absolute_error']['importances_mean'], index=X_scaled.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "84c14b32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(data= r_multi['neg_mean_absolute_error']['importances_mean'], index=X_scaled.columns).plot.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "720cfe58",
   "metadata": {},
   "source": [
    "### Feature Creation- Combine features to creat a new feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "c8907c31",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "poly = PolynomialFeatures(2)\n",
    "x_poly= poly.fit_transform(X_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "0b871fbc",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1', 'holiday', 'day_of_week', 'rol_7', 'rol_10', 'holiday^2',\n",
       "       'holiday day_of_week', 'holiday rol_7', 'holiday rol_10',\n",
       "       'day_of_week^2', 'day_of_week rol_7', 'day_of_week rol_10',\n",
       "       'rol_7^2', 'rol_7 rol_10', 'rol_10^2'], dtype=object)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly.get_feature_names_out()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "6774b7d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "      <th>holiday^2</th>\n",
       "      <th>holiday day_of_week</th>\n",
       "      <th>holiday rol_7</th>\n",
       "      <th>holiday rol_10</th>\n",
       "      <th>day_of_week^2</th>\n",
       "      <th>day_of_week rol_7</th>\n",
       "      <th>day_of_week rol_10</th>\n",
       "      <th>rol_7^2</th>\n",
       "      <th>rol_7 rol_10</th>\n",
       "      <th>rol_10^2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.021102</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.007034</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>4.453006e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.001806</td>\n",
       "      <td>0.011760</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.000903</td>\n",
       "      <td>0.005880</td>\n",
       "      <td>3.263334e-06</td>\n",
       "      <td>2.124356e-05</td>\n",
       "      <td>1.382908e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.000570</td>\n",
       "      <td>0.000915</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.000380</td>\n",
       "      <td>0.000610</td>\n",
       "      <td>3.254294e-07</td>\n",
       "      <td>5.217717e-07</td>\n",
       "      <td>8.365738e-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>0.000261</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.694444</td>\n",
       "      <td>0.002456</td>\n",
       "      <td>0.000218</td>\n",
       "      <td>8.687158e-06</td>\n",
       "      <td>7.702345e-07</td>\n",
       "      <td>6.829174e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000666</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000666</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.429456e-07</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.857693</td>\n",
       "      <td>0.794630</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.694444</td>\n",
       "      <td>0.714744</td>\n",
       "      <td>0.662191</td>\n",
       "      <td>7.356372e-01</td>\n",
       "      <td>6.815483e-01</td>\n",
       "      <td>6.314364e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1033</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.857693</td>\n",
       "      <td>0.794042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.857693</td>\n",
       "      <td>0.794042</td>\n",
       "      <td>7.356372e-01</td>\n",
       "      <td>6.810440e-01</td>\n",
       "      <td>6.305023e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1034</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.858976</td>\n",
       "      <td>0.832489</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.378406e-01</td>\n",
       "      <td>7.150889e-01</td>\n",
       "      <td>6.930387e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1035</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.860260</td>\n",
       "      <td>0.871917</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.027778</td>\n",
       "      <td>0.143377</td>\n",
       "      <td>0.145320</td>\n",
       "      <td>7.400473e-01</td>\n",
       "      <td>7.500755e-01</td>\n",
       "      <td>7.602395e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1036</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.863017</td>\n",
       "      <td>0.872897</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.287672</td>\n",
       "      <td>0.290966</td>\n",
       "      <td>7.447988e-01</td>\n",
       "      <td>7.533253e-01</td>\n",
       "      <td>7.619494e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        1  holiday  day_of_week     rol_7    rol_10  holiday^2  \\\n",
       "0     1.0      0.0     0.333333  0.000000  0.021102        0.0   \n",
       "1     1.0      0.0     0.500000  0.001806  0.011760        0.0   \n",
       "2     1.0      0.0     0.666667  0.000570  0.000915        0.0   \n",
       "3     1.0      0.0     0.833333  0.002947  0.000261        0.0   \n",
       "4     1.0      0.0     1.000000  0.000666  0.000000        0.0   \n",
       "...   ...      ...          ...       ...       ...        ...   \n",
       "1032  1.0      0.0     0.833333  0.857693  0.794630        0.0   \n",
       "1033  1.0      0.0     1.000000  0.857693  0.794042        0.0   \n",
       "1034  1.0      0.0     0.000000  0.858976  0.832489        0.0   \n",
       "1035  1.0      0.0     0.166667  0.860260  0.871917        0.0   \n",
       "1036  1.0      0.0     0.333333  0.863017  0.872897        0.0   \n",
       "\n",
       "      holiday day_of_week  holiday rol_7  holiday rol_10  day_of_week^2  \\\n",
       "0                     0.0            0.0             0.0       0.111111   \n",
       "1                     0.0            0.0             0.0       0.250000   \n",
       "2                     0.0            0.0             0.0       0.444444   \n",
       "3                     0.0            0.0             0.0       0.694444   \n",
       "4                     0.0            0.0             0.0       1.000000   \n",
       "...                   ...            ...             ...            ...   \n",
       "1032                  0.0            0.0             0.0       0.694444   \n",
       "1033                  0.0            0.0             0.0       1.000000   \n",
       "1034                  0.0            0.0             0.0       0.000000   \n",
       "1035                  0.0            0.0             0.0       0.027778   \n",
       "1036                  0.0            0.0             0.0       0.111111   \n",
       "\n",
       "      day_of_week rol_7  day_of_week rol_10       rol_7^2  rol_7 rol_10  \\\n",
       "0              0.000000            0.007034  0.000000e+00  0.000000e+00   \n",
       "1              0.000903            0.005880  3.263334e-06  2.124356e-05   \n",
       "2              0.000380            0.000610  3.254294e-07  5.217717e-07   \n",
       "3              0.002456            0.000218  8.687158e-06  7.702345e-07   \n",
       "4              0.000666            0.000000  4.429456e-07  0.000000e+00   \n",
       "...                 ...                 ...           ...           ...   \n",
       "1032           0.714744            0.662191  7.356372e-01  6.815483e-01   \n",
       "1033           0.857693            0.794042  7.356372e-01  6.810440e-01   \n",
       "1034           0.000000            0.000000  7.378406e-01  7.150889e-01   \n",
       "1035           0.143377            0.145320  7.400473e-01  7.500755e-01   \n",
       "1036           0.287672            0.290966  7.447988e-01  7.533253e-01   \n",
       "\n",
       "          rol_10^2  \n",
       "0     4.453006e-04  \n",
       "1     1.382908e-04  \n",
       "2     8.365738e-07  \n",
       "3     6.829174e-08  \n",
       "4     0.000000e+00  \n",
       "...            ...  \n",
       "1032  6.314364e-01  \n",
       "1033  6.305023e-01  \n",
       "1034  6.930387e-01  \n",
       "1035  7.602395e-01  \n",
       "1036  7.619494e-01  \n",
       "\n",
       "[1037 rows x 15 columns]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_poly= pd.DataFrame(data=x_poly, columns=poly.get_feature_names_out())\n",
    "x_poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "89fe0940",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_poly.plot(figsize=(20,15))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fc24a85",
   "metadata": {},
   "source": [
    "### Use permutation to see the new features importance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "b2dfd1cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train test split- train the feature importance (1/3, 2/3). \n",
    "# evaluate the importance on the other \n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "\n",
    "rs = ShuffleSplit(n_splits=100, test_size=0.33, random_state=0)\n",
    "\n",
    "for train_index, test_index in rs.split(X):\n",
    "    X_train, X_test = x_poly.iloc[train_index], x_poly.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4d72354",
   "metadata": {},
   "source": [
    "### Fit X_poly onto dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "073dd785",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtr = DecisionTreeRegressor(random_state=0)\n",
    "\n",
    "dtr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "f9932cde",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "      <th>holiday^2</th>\n",
       "      <th>holiday day_of_week</th>\n",
       "      <th>holiday rol_7</th>\n",
       "      <th>holiday rol_10</th>\n",
       "      <th>day_of_week^2</th>\n",
       "      <th>day_of_week rol_7</th>\n",
       "      <th>day_of_week rol_10</th>\n",
       "      <th>rol_7^2</th>\n",
       "      <th>rol_7 rol_10</th>\n",
       "      <th>rol_10^2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>961</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.742554</td>\n",
       "      <td>0.782037</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.495036</td>\n",
       "      <td>0.521358</td>\n",
       "      <td>0.551387</td>\n",
       "      <td>0.580705</td>\n",
       "      <td>0.611582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.441444</td>\n",
       "      <td>0.414791</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.441444</td>\n",
       "      <td>0.414791</td>\n",
       "      <td>0.194873</td>\n",
       "      <td>0.183107</td>\n",
       "      <td>0.172052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>900</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.687600</td>\n",
       "      <td>0.648613</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.687600</td>\n",
       "      <td>0.648613</td>\n",
       "      <td>0.472793</td>\n",
       "      <td>0.445986</td>\n",
       "      <td>0.420699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.117706</td>\n",
       "      <td>0.110803</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.117706</td>\n",
       "      <td>0.110803</td>\n",
       "      <td>0.013855</td>\n",
       "      <td>0.013042</td>\n",
       "      <td>0.012277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>652</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.544983</td>\n",
       "      <td>0.530134</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.272492</td>\n",
       "      <td>0.265067</td>\n",
       "      <td>0.297007</td>\n",
       "      <td>0.288914</td>\n",
       "      <td>0.281042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.667063</td>\n",
       "      <td>0.731715</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.027778</td>\n",
       "      <td>0.111177</td>\n",
       "      <td>0.121953</td>\n",
       "      <td>0.444973</td>\n",
       "      <td>0.488100</td>\n",
       "      <td>0.535407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.155927</td>\n",
       "      <td>0.162219</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.027778</td>\n",
       "      <td>0.025988</td>\n",
       "      <td>0.027036</td>\n",
       "      <td>0.024313</td>\n",
       "      <td>0.025294</td>\n",
       "      <td>0.026315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>785</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.595470</td>\n",
       "      <td>0.594813</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.297735</td>\n",
       "      <td>0.297406</td>\n",
       "      <td>0.354584</td>\n",
       "      <td>0.354193</td>\n",
       "      <td>0.353802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.678472</td>\n",
       "      <td>0.637964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.678472</td>\n",
       "      <td>0.637964</td>\n",
       "      <td>0.460324</td>\n",
       "      <td>0.432841</td>\n",
       "      <td>0.406998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>853</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.783675</td>\n",
       "      <td>0.770751</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.027778</td>\n",
       "      <td>0.130613</td>\n",
       "      <td>0.128458</td>\n",
       "      <td>0.614147</td>\n",
       "      <td>0.604018</td>\n",
       "      <td>0.594057</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>694 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        1  holiday  day_of_week     rol_7    rol_10  holiday^2  \\\n",
       "961   1.0      0.0     0.666667  0.742554  0.782037        0.0   \n",
       "564   1.0      0.0     1.000000  0.441444  0.414791        0.0   \n",
       "900   1.0      0.0     1.000000  0.687600  0.648613        0.0   \n",
       "144   1.0      0.0     1.000000  0.117706  0.110803        0.0   \n",
       "652   1.0      0.0     0.500000  0.544983  0.530134        0.0   \n",
       "...   ...      ...          ...       ...       ...        ...   \n",
       "1007  1.0      0.0     0.166667  0.667063  0.731715        0.0   \n",
       "181   1.0      0.0     0.166667  0.155927  0.162219        0.0   \n",
       "785   1.0      0.0     0.500000  0.595470  0.594813        0.0   \n",
       "872   1.0      0.0     1.000000  0.678472  0.637964        0.0   \n",
       "853   1.0      0.0     0.166667  0.783675  0.770751        0.0   \n",
       "\n",
       "      holiday day_of_week  holiday rol_7  holiday rol_10  day_of_week^2  \\\n",
       "961                   0.0            0.0             0.0       0.444444   \n",
       "564                   0.0            0.0             0.0       1.000000   \n",
       "900                   0.0            0.0             0.0       1.000000   \n",
       "144                   0.0            0.0             0.0       1.000000   \n",
       "652                   0.0            0.0             0.0       0.250000   \n",
       "...                   ...            ...             ...            ...   \n",
       "1007                  0.0            0.0             0.0       0.027778   \n",
       "181                   0.0            0.0             0.0       0.027778   \n",
       "785                   0.0            0.0             0.0       0.250000   \n",
       "872                   0.0            0.0             0.0       1.000000   \n",
       "853                   0.0            0.0             0.0       0.027778   \n",
       "\n",
       "      day_of_week rol_7  day_of_week rol_10   rol_7^2  rol_7 rol_10  rol_10^2  \n",
       "961            0.495036            0.521358  0.551387      0.580705  0.611582  \n",
       "564            0.441444            0.414791  0.194873      0.183107  0.172052  \n",
       "900            0.687600            0.648613  0.472793      0.445986  0.420699  \n",
       "144            0.117706            0.110803  0.013855      0.013042  0.012277  \n",
       "652            0.272492            0.265067  0.297007      0.288914  0.281042  \n",
       "...                 ...                 ...       ...           ...       ...  \n",
       "1007           0.111177            0.121953  0.444973      0.488100  0.535407  \n",
       "181            0.025988            0.027036  0.024313      0.025294  0.026315  \n",
       "785            0.297735            0.297406  0.354584      0.354193  0.353802  \n",
       "872            0.678472            0.637964  0.460324      0.432841  0.406998  \n",
       "853            0.130613            0.128458  0.614147      0.604018  0.594057  \n",
       "\n",
       "[694 rows x 15 columns]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "0f861529",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "990     1085.00\n",
       "593      648.00\n",
       "929     1027.00\n",
       "173      252.00\n",
       "681      766.00\n",
       "         ...   \n",
       "1036    1110.00\n",
       "210      453.00\n",
       "814      880.00\n",
       "901      969.00\n",
       "882     2108.25\n",
       "Name: y, Length: 694, dtype: float64"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "a30b5a52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'importances_mean': array([ 0.00000000e+00,  1.47399675e-03,  1.59611891e-01,  7.95406609e-03,\n",
       "         7.07265924e-01,  9.88117359e-04,  0.00000000e+00,  2.88021610e-02,\n",
       "         1.81395572e-03,  3.10075986e-04,  2.54548220e-02,  2.23266728e-01,\n",
       "         8.34829017e-02,  2.76899061e-01, -4.20726635e-04]),\n",
       " 'importances_std': array([0.        , 0.00054711, 0.04120171, 0.00719999, 0.06856634,\n",
       "        0.00222082, 0.        , 0.00668212, 0.00060106, 0.00038054,\n",
       "        0.00841077, 0.0227025 , 0.01536443, 0.0291124 , 0.00160876]),\n",
       " 'importances': array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 8.60458736e-04,  1.42813736e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  3.60848561e-03,  2.63281439e-03,\n",
       "          1.70526282e-03,  1.42813736e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  1.42813736e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  1.42813736e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  1.42813736e-03,  8.60458736e-04,\n",
       "          1.42813736e-03,  1.42813736e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  1.70526282e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  1.42813736e-03,  1.42813736e-03,\n",
       "          1.42813736e-03,  1.42813736e-03,  0.00000000e+00],\n",
       "        [ 1.85448042e-01,  1.26919452e-01,  1.71967555e-01,\n",
       "          1.35644145e-01,  1.62869641e-01,  1.44799323e-01,\n",
       "          1.73832056e-01,  1.11697482e-01,  2.17478905e-01,\n",
       "          1.29107015e-01,  1.29075290e-01,  2.05896817e-01,\n",
       "          2.50878393e-01,  1.44322310e-01,  1.17354806e-01,\n",
       "          1.77142694e-01,  1.27187218e-01,  1.91807917e-01,\n",
       "          1.79137380e-01,  1.44888739e-01,  1.01178246e-01,\n",
       "          2.21685532e-01,  5.26804900e-02,  1.36590774e-01,\n",
       "          1.78370405e-01,  1.97849312e-01,  1.31782299e-01,\n",
       "          1.48568568e-01,  1.81350813e-01,  2.10845109e-01],\n",
       "        [ 2.69463237e-03,  4.80094960e-03,  1.11681267e-02,\n",
       "          4.96809774e-03,  2.28059176e-03,  2.60933556e-02,\n",
       "          2.31325513e-03,  5.80490358e-03,  1.41792237e-04,\n",
       "          1.63632150e-03,  8.94429481e-03,  3.77041282e-03,\n",
       "          3.63088007e-03,  7.20141932e-03,  8.72053945e-03,\n",
       "          8.08160711e-03,  2.34927580e-02,  5.62209774e-03,\n",
       "          2.02523399e-02,  6.21673456e-03,  2.05692093e-02,\n",
       "          9.09301201e-03,  9.26789083e-03,  3.60018523e-03,\n",
       "          7.85081793e-03,  3.68553097e-03,  2.89856203e-03,\n",
       "         -8.59877842e-04,  2.28087661e-02,  1.87277618e-03],\n",
       "        [ 7.48376952e-01,  6.22899569e-01,  8.06413184e-01,\n",
       "          8.14700557e-01,  6.07889677e-01,  6.45897712e-01,\n",
       "          5.97100694e-01,  7.86535716e-01,  6.42805005e-01,\n",
       "          6.66480358e-01,  6.17249589e-01,  7.74398232e-01,\n",
       "          7.13867192e-01,  6.98101265e-01,  5.95830531e-01,\n",
       "          7.51734924e-01,  6.77113662e-01,  7.05977131e-01,\n",
       "          6.45792074e-01,  7.14358124e-01,  7.08207801e-01,\n",
       "          6.94724371e-01,  6.85866643e-01,  7.37077333e-01,\n",
       "          6.41018371e-01,  7.71109192e-01,  7.86170414e-01,\n",
       "          7.82350724e-01,  8.43390312e-01,  7.34540410e-01],\n",
       "        [ 0.00000000e+00,  7.58344154e-03,  1.69260725e-03,\n",
       "          0.00000000e+00,  0.00000000e+00,  1.00818098e-03,\n",
       "          7.43463889e-06,  0.00000000e+00, -1.26703826e-03,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          4.40983958e-03,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00, -1.26703826e-03,  0.00000000e+00,\n",
       "          1.00818098e-03,  4.40983958e-03,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  6.17650429e-03,  5.88156846e-03,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 2.28537575e-02,  4.34502220e-02,  3.25752162e-02,\n",
       "          3.12487171e-02,  3.21161944e-02,  2.02287216e-02,\n",
       "          2.70222846e-02,  2.27257480e-02,  2.15033908e-02,\n",
       "          3.63352848e-02,  2.11691525e-02,  2.82951105e-02,\n",
       "          4.40091628e-02,  2.72038910e-02,  3.59203235e-02,\n",
       "          3.10500206e-02,  2.95899340e-02,  3.40285152e-02,\n",
       "          2.15033908e-02,  2.95171533e-02,  3.14324874e-02,\n",
       "          3.38212415e-02,  2.79868191e-02,  3.36647367e-02,\n",
       "          2.87727138e-02,  2.15033908e-02,  1.89884319e-02,\n",
       "          1.78758639e-02,  3.51451576e-02,  2.25277962e-02],\n",
       "        [ 1.30602230e-03,  1.30602230e-03,  1.30602230e-03,\n",
       "          1.63402945e-03,  2.23614568e-03,  2.17210687e-03,\n",
       "          1.30602230e-03,  2.40772429e-03,  2.17210687e-03,\n",
       "          1.32298728e-03,  2.06922237e-03,  3.50422569e-03,\n",
       "          2.06798123e-03,  1.31638278e-03,  1.30602230e-03,\n",
       "          1.30602230e-03,  1.30602230e-03,  1.30602230e-03,\n",
       "          2.80435637e-03,  1.93369383e-03,  1.92038310e-03,\n",
       "          1.30602230e-03,  1.30602230e-03,  1.81995240e-03,\n",
       "          1.63402945e-03,  3.10712563e-03,  1.30602230e-03,\n",
       "          1.93369383e-03,  1.32298728e-03,  2.67329187e-03],\n",
       "        [ 6.97252746e-04,  3.71276181e-04,  2.08499504e-04,\n",
       "          1.35845950e-04,  9.56211758e-04, -3.82434244e-05,\n",
       "          1.88283146e-04,  5.69459971e-05,  5.66969550e-04,\n",
       "          2.80546729e-04, -2.08829118e-04,  1.19508463e-03,\n",
       "         -1.20866800e-04,  3.37281122e-04, -1.95559081e-04,\n",
       "          7.26283240e-04,  4.82909706e-04,  2.38067148e-04,\n",
       "         -3.53949037e-05, -1.08544914e-04, -1.45071087e-05,\n",
       "          5.71099905e-04,  8.85381257e-04, -1.11832921e-04,\n",
       "         -2.10383596e-05,  2.02318214e-04,  9.90601541e-04,\n",
       "          2.64969391e-04,  7.02823638e-04,  9.84448736e-05],\n",
       "        [ 2.97904088e-02,  2.93708126e-02,  2.98554589e-02,\n",
       "          2.62674948e-02,  3.15859992e-02,  1.83291357e-02,\n",
       "          1.30753487e-02,  2.86242753e-02,  3.58995883e-02,\n",
       "          3.40997251e-02,  2.76146782e-02,  4.19361082e-02,\n",
       "          4.31130284e-02,  2.39805478e-02,  2.43409477e-02,\n",
       "          2.46815779e-02,  2.47566822e-02,  2.32625273e-02,\n",
       "          3.04306535e-02,  1.35679352e-02,  3.01890674e-02,\n",
       "          1.60003562e-02,  9.81562473e-03,  3.68698362e-02,\n",
       "          1.99690321e-02,  9.46714993e-03,  2.37840863e-02,\n",
       "          2.36476107e-02,  2.30869140e-02,  1.62320497e-02],\n",
       "        [ 2.61969680e-01,  2.12119706e-01,  2.50045381e-01,\n",
       "          1.95282955e-01,  2.28816868e-01,  1.92547820e-01,\n",
       "          2.02378661e-01,  2.40854526e-01,  2.47925027e-01,\n",
       "          1.95527676e-01,  2.34594893e-01,  2.17111933e-01,\n",
       "          2.09352298e-01,  2.25211787e-01,  2.07792236e-01,\n",
       "          1.99036599e-01,  2.32452206e-01,  2.51295886e-01,\n",
       "          2.36514463e-01,  2.23719555e-01,  2.12368712e-01,\n",
       "          2.02705879e-01,  2.33165594e-01,  2.30223451e-01,\n",
       "          2.32718267e-01,  1.79626429e-01,  2.68797206e-01,\n",
       "          2.51163395e-01,  1.86960019e-01,  2.35722728e-01],\n",
       "        [ 8.01813383e-02,  1.08123730e-01,  8.71816256e-02,\n",
       "          5.92787341e-02,  1.11109948e-01,  9.07243592e-02,\n",
       "          7.01613770e-02,  8.46729782e-02,  7.83698002e-02,\n",
       "          8.32093025e-02,  5.33424211e-02,  7.16751989e-02,\n",
       "          8.65228147e-02,  9.28833110e-02,  8.51311038e-02,\n",
       "          8.44955978e-02,  1.14681503e-01,  1.07959264e-01,\n",
       "          7.23625825e-02,  9.09773526e-02,  9.08466157e-02,\n",
       "          7.80806408e-02,  6.80121651e-02,  7.54131538e-02,\n",
       "          1.09142694e-01,  6.85174164e-02,  7.68886967e-02,\n",
       "          8.84072098e-02,  7.60919105e-02,  6.00422068e-02],\n",
       "        [ 2.98397142e-01,  3.35194617e-01,  2.93230070e-01,\n",
       "          3.20350483e-01,  2.58024562e-01,  2.56797286e-01,\n",
       "          2.35077331e-01,  2.98095819e-01,  2.64703082e-01,\n",
       "          2.86981089e-01,  2.78929546e-01,  2.77851456e-01,\n",
       "          2.81555754e-01,  3.25827402e-01,  2.30395473e-01,\n",
       "          2.44325225e-01,  2.28572547e-01,  3.10088517e-01,\n",
       "          2.70779109e-01,  2.72893449e-01,  2.78495252e-01,\n",
       "          2.61371528e-01,  2.86880144e-01,  2.71556060e-01,\n",
       "          2.81902770e-01,  2.75536614e-01,  3.16439269e-01,\n",
       "          2.32445869e-01,  3.05464536e-01,  2.28809821e-01],\n",
       "        [-1.05142966e-04,  1.25968094e-03, -1.01491163e-03,\n",
       "         -1.69672946e-03,  1.05489672e-03,  1.37681618e-03,\n",
       "          8.63415094e-04, -1.34141314e-03,  1.82294741e-03,\n",
       "          4.98881768e-04, -8.28459676e-04, -3.06382812e-04,\n",
       "         -1.37966470e-03, -8.37147664e-04, -1.09241581e-03,\n",
       "         -5.70916786e-04,  4.40684863e-03, -5.19895711e-05,\n",
       "          2.43731635e-04, -4.00983810e-03, -2.39198824e-03,\n",
       "         -1.48757887e-04, -3.01016199e-03, -2.07369862e-03,\n",
       "          1.01884666e-03,  2.43345050e-05,  3.07375725e-04,\n",
       "         -1.04024719e-03, -1.96848647e-03, -1.63122163e-03]])}"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compare the same metric with different models\n",
    "from sklearn.inspection import permutation_importance\n",
    "r = permutation_importance(dtr, X_test, y_test,\n",
    "                           n_repeats=30,\n",
    "                           random_state=0)\n",
    "r "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "64ab1a91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00000000e+00,  1.47399675e-03,  1.59611891e-01,  7.95406609e-03,\n",
       "        7.07265924e-01,  9.88117359e-04,  0.00000000e+00,  2.88021610e-02,\n",
       "        1.81395572e-03,  3.10075986e-04,  2.54548220e-02,  2.23266728e-01,\n",
       "        8.34829017e-02,  2.76899061e-01, -4.20726635e-04])"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r['importances_mean']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "bea3529e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# negative feature importance = model improves w/o the feature, not good.\n",
    "pd.Series(data=r['importances_mean'], index= x_poly.columns).plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "bed72814",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_scores= []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "fe248742",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.8342499810489185,\n",
       " 0.8507295074302195,\n",
       " 0.8964303590847591,\n",
       " 0.8982141913086568,\n",
       " 0.8266630408095395,\n",
       " 0.8770171803668612,\n",
       " 0.8632970074328963,\n",
       " 0.886570253011426,\n",
       " 0.92271542477913,\n",
       " 0.851450984559763,\n",
       " 0.8889638934398745,\n",
       " 0.8708313923778015,\n",
       " 0.8427424070720972,\n",
       " 0.8468819427254247,\n",
       " 0.8852450623815754,\n",
       " 0.9288644962118517,\n",
       " 0.8762369268267965,\n",
       " 0.8805775620682266,\n",
       " 0.830732127669951,\n",
       " 0.9064377574435227,\n",
       " 0.8586500599574705,\n",
       " 0.8933318638906229,\n",
       " 0.8743621771964266,\n",
       " 0.8598134928997424,\n",
       " 0.9014078129697466,\n",
       " 0.846391736792448,\n",
       " 0.8671646588594207,\n",
       " 0.9011810121556776,\n",
       " 0.8700290234339795,\n",
       " 0.859609932318675,\n",
       " 0.9100160340040129,\n",
       " 0.8698853363868946,\n",
       " 0.869873113093306,\n",
       " 0.8772202638914992,\n",
       " 0.8742457696084844,\n",
       " 0.9054231423808595,\n",
       " 0.8773060508137518,\n",
       " 0.873846529033674,\n",
       " 0.8932466679072582,\n",
       " 0.8609704553538775,\n",
       " 0.8809018956048904,\n",
       " 0.7417950686884798,\n",
       " 0.8793361438399271,\n",
       " 0.86144725142868,\n",
       " 0.8773787854664401,\n",
       " 0.8663658046109209,\n",
       " 0.9056400447933785,\n",
       " 0.8723918984200858,\n",
       " 0.8084918195512872,\n",
       " 0.8802771811113999,\n",
       " 0.8744982503993644,\n",
       " 0.8539004891426059,\n",
       " 0.8558533050764574,\n",
       " 0.8740087815465162,\n",
       " 0.8802699093726982,\n",
       " 0.886444666435565,\n",
       " 0.8745666272782534,\n",
       " 0.9022097209275634,\n",
       " 0.9046474049798285,\n",
       " 0.9087432967793366,\n",
       " 0.8850692813359443,\n",
       " 0.891351678217273,\n",
       " 0.9067571433111159,\n",
       " 0.8980900719598903,\n",
       " 0.8434629520015686,\n",
       " 0.85012927794213,\n",
       " 0.8290339134383533,\n",
       " 0.865808143153245,\n",
       " 0.7999688895103699,\n",
       " 0.8456841951032692,\n",
       " 0.844523636181189,\n",
       " 0.8637732282648652,\n",
       " 0.8648324355142718,\n",
       " 0.8688800350011098,\n",
       " 0.8859436228564277,\n",
       " 0.9025534657606284,\n",
       " 0.905107752892047,\n",
       " 0.8734830081582006,\n",
       " 0.9016015564136792,\n",
       " 0.8478748621626324,\n",
       " 0.8665403518404913,\n",
       " 0.8419872205354536,\n",
       " 0.8495130694301501,\n",
       " 0.8656608639841559,\n",
       " 0.8682730120725083,\n",
       " 0.8572239070834043,\n",
       " 0.7962680618245764,\n",
       " 0.8855962188221215,\n",
       " 0.8840052583078057,\n",
       " 0.8904098048446328,\n",
       " 0.8790400145863785,\n",
       " 0.8895019779938623,\n",
       " 0.8777252624018409,\n",
       " 0.8549649749888061,\n",
       " 0.8581283572465406,\n",
       " 0.8882913903574309,\n",
       " 0.8691020011813109,\n",
       " 0.86928255513728,\n",
       " 0.8681968364242406,\n",
       " 0.8739196937782319]"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for train_index, test_index in rs.split(x_poly):\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    dtr.fit(X_train,y_train)\n",
    "    preds= dtr.predict(X_test)\n",
    "    r2_scores.append(r2_score(preds,y_test)) \n",
    "r2_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "cc17b476",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8710555495847025"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(r2_scores)/len(r2_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baba1d8c",
   "metadata": {},
   "source": [
    "## Summary: \n",
    "'rol_7 rol_10' and 'day_of_week rol_10' features are significently important.\n",
    "\n",
    "Adding these two features into X in dtr model to check the accuracy of dtr model forecast"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4048eab",
   "metadata": {},
   "source": [
    "### Add the features, Scale the data, ShuffleSplit to split the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "6a377ecc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "      <th>rol_7 rol_10</th>\n",
       "      <th>day_of_week rol_10</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>101.857143</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1.353681e+04</td>\n",
       "      <td>265.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>104.571429</td>\n",
       "      <td>118.60</td>\n",
       "      <td>1.240217e+04</td>\n",
       "      <td>355.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>102.714286</td>\n",
       "      <td>102.00</td>\n",
       "      <td>1.047686e+04</td>\n",
       "      <td>408.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>106.285714</td>\n",
       "      <td>101.00</td>\n",
       "      <td>1.073486e+04</td>\n",
       "      <td>505.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>102.857143</td>\n",
       "      <td>100.60</td>\n",
       "      <td>1.034743e+04</td>\n",
       "      <td>603.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1390.571429</td>\n",
       "      <td>1316.90</td>\n",
       "      <td>1.831244e+06</td>\n",
       "      <td>6584.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1390.571429</td>\n",
       "      <td>1316.00</td>\n",
       "      <td>1.829992e+06</td>\n",
       "      <td>7896.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1392.500000</td>\n",
       "      <td>1374.85</td>\n",
       "      <td>1.914479e+06</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1394.428571</td>\n",
       "      <td>1435.20</td>\n",
       "      <td>2.001284e+06</td>\n",
       "      <td>1435.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1398.571429</td>\n",
       "      <td>1436.70</td>\n",
       "      <td>2.009328e+06</td>\n",
       "      <td>2873.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            holiday  day_of_week        rol_7   rol_10  rol_7 rol_10  \\\n",
       "date                                                                   \n",
       "2019-01-30        0            2   101.857143   132.90  1.353681e+04   \n",
       "2019-01-31        0            3   104.571429   118.60  1.240217e+04   \n",
       "2019-02-01        0            4   102.714286   102.00  1.047686e+04   \n",
       "2019-02-02        0            5   106.285714   101.00  1.073486e+04   \n",
       "2019-02-03        0            6   102.857143   100.60  1.034743e+04   \n",
       "...             ...          ...          ...      ...           ...   \n",
       "2021-11-27        0            5  1390.571429  1316.90  1.831244e+06   \n",
       "2021-11-28        0            6  1390.571429  1316.00  1.829992e+06   \n",
       "2021-11-29        0            0  1392.500000  1374.85  1.914479e+06   \n",
       "2021-11-30        0            1  1394.428571  1435.20  2.001284e+06   \n",
       "2021-12-01        0            2  1398.571429  1436.70  2.009328e+06   \n",
       "\n",
       "            day_of_week rol_10  \n",
       "date                            \n",
       "2019-01-30               265.8  \n",
       "2019-01-31               355.8  \n",
       "2019-02-01               408.0  \n",
       "2019-02-02               505.0  \n",
       "2019-02-03               603.6  \n",
       "...                        ...  \n",
       "2021-11-27              6584.5  \n",
       "2021-11-28              7896.0  \n",
       "2021-11-29                 0.0  \n",
       "2021-11-30              1435.2  \n",
       "2021-12-01              2873.4  \n",
       "\n",
       "[1037 rows x 6 columns]"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# adding 'day_of_week rol_7' and 'day_of_week rol_10' onto X\n",
    "X['rol_7 rol_10']= X['rol_7']*X['rol_10']\n",
    "X['day_of_week rol_10']= X['day_of_week']*X['rol_10']\n",
    "\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "0ba5be74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00000000e+00, 3.33333333e-01, 0.00000000e+00, 2.11021461e-02,\n",
       "        1.25480250e-03, 2.93105730e-02],\n",
       "       [0.00000000e+00, 5.00000000e-01, 1.80647001e-03, 1.17597099e-02,\n",
       "        8.08399078e-04, 3.92351462e-02],\n",
       "       [0.00000000e+00, 6.66666667e-01, 5.70464215e-04, 9.14644105e-04,\n",
       "        5.09211834e-05, 4.49913987e-02],\n",
       "       ...,\n",
       "       [0.00000000e+00, 0.00000000e+00, 8.58976492e-01, 8.32489465e-01,\n",
       "        7.49143816e-01, 0.00000000e+00],\n",
       "       [0.00000000e+00, 1.66666667e-01, 8.60260037e-01, 8.71917159e-01,\n",
       "        7.83295677e-01, 1.58263861e-01],\n",
       "       [0.00000000e+00, 3.33333333e-01, 8.63017280e-01, 8.72897135e-01,\n",
       "        7.86460310e-01, 3.16858542e-01]])"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use MinMaxScaler to scale the data \n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.compose import make_column_transformer\n",
    "import numpy as np\n",
    "transformer= make_column_transformer(\n",
    "    (MinMaxScaler(), ['holiday']),\n",
    "    (MinMaxScaler(), ['day_of_week']),\n",
    "    (MinMaxScaler(), ['rol_7']),\n",
    "    (MinMaxScaler(), ['rol_10']),\n",
    "    (MinMaxScaler(), ['rol_7 rol_10']),\n",
    "    (MinMaxScaler(), ['day_of_week rol_10']))\n",
    "\n",
    "X_scaled= transformer.fit_transform(X)\n",
    "X_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "f0954059",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transfer X_scaled into df\n",
    "X_scaled= pd.DataFrame(data= X_scaled, columns= X.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "b5c9dd57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_scaled.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "f54ce4ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# model selection: linear regression  \n",
    "# model selection: decision tree regressor\n",
    "from sklearn.tree import DecisionTreeRegressor \n",
    "dtr= DecisionTreeRegressor(random_state=0)\n",
    "dtr.fit(X_scaled,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef378661",
   "metadata": {},
   "source": [
    "### Setup train,split,test for CrossValidation - timeseries and shufflesplit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "1465795d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ShuffleSplit to split the data\n",
    "report = pd.DataFrame( columns=['split','max_error_dtr','r2_dtr', 'mae_dtr',\n",
    "                                                                ] )\n",
    "n= 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "74bba2c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import ShuffleSplit\n",
    "\n",
    "rs = ShuffleSplit(n_splits=100, test_size=0.25, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "d6431eb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n",
      "C:\\Users\\shuqi\\AppData\\Local\\Temp\\ipykernel_10424\\2929842188.py:15: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  report= report.append({'split': n,\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "from sklearn.tree import DecisionTreeRegressor \n",
    "dtr= DecisionTreeRegressor(random_state=0)\n",
    "dtr.fit(X_train, y_train)\n",
    "\n",
    "for train_index, test_index in rs.split(X):\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "        \n",
    "    reg.fit(X_train, y_train)\n",
    "        \n",
    "    dtr_y_pred = dtr.predict( X_test )\n",
    "  \n",
    "    report= report.append({'split': n,\n",
    "                           'max_error_dtr':max_error(dtr_y_pred,y_test),\n",
    "                           'r2_dtr': r2_score(dtr_y_pred,y_test), \n",
    "                           'mae_dtr':mean_absolute_error(dtr_y_pred,y_test)},\n",
    "                            ignore_index=True)\n",
    "    n+=1  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "5ae30868",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>holiday</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>rol_7</th>\n",
       "      <th>rol_10</th>\n",
       "      <th>rol_7 rol_10</th>\n",
       "      <th>day_of_week rol_10</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-25</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>528.357143</td>\n",
       "      <td>553.00</td>\n",
       "      <td>2.921815e+05</td>\n",
       "      <td>1106.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-08</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>928.928571</td>\n",
       "      <td>925.55</td>\n",
       "      <td>8.597698e+05</td>\n",
       "      <td>925.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-26</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>855.000000</td>\n",
       "      <td>841.80</td>\n",
       "      <td>7.197390e+05</td>\n",
       "      <td>4209.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-19</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>171.428571</td>\n",
       "      <td>183.00</td>\n",
       "      <td>3.137143e+04</td>\n",
       "      <td>183.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-22</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>165.857143</td>\n",
       "      <td>148.70</td>\n",
       "      <td>2.466296e+04</td>\n",
       "      <td>594.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-02</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1104.142857</td>\n",
       "      <td>1220.60</td>\n",
       "      <td>1.347717e+06</td>\n",
       "      <td>1220.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-07-30</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>336.142857</td>\n",
       "      <td>348.90</td>\n",
       "      <td>1.172802e+05</td>\n",
       "      <td>348.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-25</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>996.571429</td>\n",
       "      <td>1011.05</td>\n",
       "      <td>1.007584e+06</td>\n",
       "      <td>3033.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-20</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1121.285714</td>\n",
       "      <td>1077.10</td>\n",
       "      <td>1.207737e+06</td>\n",
       "      <td>6462.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-01</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1279.357143</td>\n",
       "      <td>1280.35</td>\n",
       "      <td>1.638025e+06</td>\n",
       "      <td>1280.35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>777 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            holiday  day_of_week        rol_7   rol_10  rol_7 rol_10  \\\n",
       "date                                                                   \n",
       "2019-12-25        1            2   528.357143   553.00  2.921815e+05   \n",
       "2020-09-08        0            1   928.928571   925.55  8.597698e+05   \n",
       "2020-12-26        0            5   855.000000   841.80  7.197390e+05   \n",
       "2019-03-19        0            1   171.428571   183.00  3.137143e+04   \n",
       "2019-02-22        0            4   165.857143   148.70  2.466296e+04   \n",
       "...             ...          ...          ...      ...           ...   \n",
       "2021-11-02        0            1  1104.142857  1220.60  1.347717e+06   \n",
       "2019-07-30        0            1   336.142857   348.90  1.172802e+05   \n",
       "2021-03-25        0            3   996.571429  1011.05  1.007584e+06   \n",
       "2021-06-20        0            6  1121.285714  1077.10  1.207737e+06   \n",
       "2021-06-01        0            1  1279.357143  1280.35  1.638025e+06   \n",
       "\n",
       "            day_of_week rol_10  \n",
       "date                            \n",
       "2019-12-25             1106.00  \n",
       "2020-09-08              925.55  \n",
       "2020-12-26             4209.00  \n",
       "2019-03-19              183.00  \n",
       "2019-02-22              594.80  \n",
       "...                        ...  \n",
       "2021-11-02             1220.60  \n",
       "2019-07-30              348.90  \n",
       "2021-03-25             3033.15  \n",
       "2021-06-20             6462.60  \n",
       "2021-06-01             1280.35  \n",
       "\n",
       "[777 rows x 6 columns]"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "c1490981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "358      625.50\n",
       "616     1550.25\n",
       "725      775.00\n",
       "77       235.50\n",
       "52       107.00\n",
       "         ...   \n",
       "1036    1110.00\n",
       "210      453.00\n",
       "814      880.00\n",
       "901      969.00\n",
       "882     2108.25\n",
       "Name: y, Length: 777, dtype: float64"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "278eeb70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>split</th>\n",
       "      <th>max_error_dtr</th>\n",
       "      <th>r2_dtr</th>\n",
       "      <th>mae_dtr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1217.25</td>\n",
       "      <td>0.845386</td>\n",
       "      <td>85.513462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1217.25</td>\n",
       "      <td>0.933079</td>\n",
       "      <td>26.318269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>647.25</td>\n",
       "      <td>0.965398</td>\n",
       "      <td>23.969231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>647.25</td>\n",
       "      <td>0.982731</td>\n",
       "      <td>14.098077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1217.25</td>\n",
       "      <td>0.931868</td>\n",
       "      <td>26.007692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>95.0</td>\n",
       "      <td>1217.25</td>\n",
       "      <td>0.940679</td>\n",
       "      <td>21.308654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>96.0</td>\n",
       "      <td>341.0</td>\n",
       "      <td>0.984563</td>\n",
       "      <td>13.917308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>97.0</td>\n",
       "      <td>398.25</td>\n",
       "      <td>0.985135</td>\n",
       "      <td>14.249038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>98.0</td>\n",
       "      <td>496.0</td>\n",
       "      <td>0.976686</td>\n",
       "      <td>16.330769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>99.0</td>\n",
       "      <td>647.25</td>\n",
       "      <td>0.955894</td>\n",
       "      <td>23.857692</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   split max_error_dtr    r2_dtr    mae_dtr\n",
       "0    0.0       1217.25  0.845386  85.513462\n",
       "1    1.0       1217.25  0.933079  26.318269\n",
       "2    2.0        647.25  0.965398  23.969231\n",
       "3    3.0        647.25  0.982731  14.098077\n",
       "4    4.0       1217.25  0.931868  26.007692\n",
       "..   ...           ...       ...        ...\n",
       "95  95.0       1217.25  0.940679  21.308654\n",
       "96  96.0         341.0  0.984563  13.917308\n",
       "97  97.0        398.25  0.985135  14.249038\n",
       "98  98.0         496.0  0.976686  16.330769\n",
       "99  99.0        647.25  0.955894  23.857692\n",
       "\n",
       "[100 rows x 4 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "08b39b59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "split             49.500000\n",
       "max_error_dtr    749.352500\n",
       "r2_dtr             0.961679\n",
       "mae_dtr           21.064673\n",
       "dtype: float64"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "2087e4e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "split               841.666667\n",
       "max_error_dtr    100846.757696\n",
       "r2_dtr                0.000473\n",
       "mae_dtr              60.231587\n",
       "dtype: float64"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "bb04a219",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1202.43493928,  483.95816255,  732.98967892, 1589.53301727,\n",
       "        606.55342993, 1463.63042026,  752.47814089,  778.02417384,\n",
       "        453.8706306 ,  301.28370633, 1087.870777  ,  429.52743224,\n",
       "        771.27018455, 1736.58659836, 1141.60170491, 1003.69147305,\n",
       "        943.66343904,  503.70443652,  368.1396276 ,  700.82770499,\n",
       "        284.7307046 ,  556.60009334,  436.78515487,  704.46519719,\n",
       "       1115.28879074,  907.70352871, 1307.58140232,  885.7825327 ,\n",
       "        902.24430768,  550.71780238,  891.18760135, 1009.56591925,\n",
       "        353.02589169, 1065.84954877,  198.48747693,  498.48000746,\n",
       "        505.41185401,  551.50469502,  259.29327352, 1045.30332525,\n",
       "        112.48033228,  106.35496328, 1316.32680678,  759.77807981,\n",
       "        624.4343209 ,  597.59800197,  278.10925342,  351.83255325,\n",
       "        762.16712491,  818.50323754,  533.12522267,  618.98711467,\n",
       "       1391.93145281, 1186.30173079, 1100.14149827,  398.54441726,\n",
       "        940.54078585,  438.61906114,  211.99871805,  933.60439678,\n",
       "       1123.70611478,  263.007711  ,  893.33842521,  247.94970592,\n",
       "        806.05410911,  858.6901769 , 1058.78947764,  455.33534245,\n",
       "        621.17074563,  380.21789207,  338.14380149,  800.24880817,\n",
       "        271.71008376,  392.66921642, 1270.45390102,  802.62176108,\n",
       "        916.02040251, 1169.37706357,  641.71359563,  260.7716338 ,\n",
       "       1501.13255328, 1861.39521319,  961.91900867,  266.74136334,\n",
       "       1018.23531438,  528.72095325,  331.95967125,  757.63990125,\n",
       "        818.49430173, 1417.19232404, 1126.16601923,  662.93102319,\n",
       "       1413.89598737, 1031.8033063 ,  520.65616857, 1108.07990406,\n",
       "       1071.20433112,  579.8316236 , 1154.86503778,  550.37152887,\n",
       "        390.92845715, 1320.50958931,  900.55824674, 1021.25538574,\n",
       "        299.995429  ,  289.91268344,  927.79792214,  489.62301135,\n",
       "        125.99463493,  886.98482844,  544.35219539,  687.64164307,\n",
       "       1063.36290475,  943.35018375, 1164.17242839,  315.92950753,\n",
       "        123.72362261,  975.18057209, 1222.90390686,  891.53396908,\n",
       "       1161.1489576 ,  753.29341909,  405.57918371, 1350.18864184,\n",
       "        357.86052087,  157.0481479 ,  850.86850133,  402.61015915,\n",
       "       1140.15933785,  131.70402785, 1440.02499554,  254.79032542,\n",
       "       1160.74660171,  678.91990743,  723.23892091, 1296.37400061,\n",
       "       1548.68795303, 1389.72548451,  955.26384805,  512.78790438,\n",
       "        829.79827535,  254.92812865,  473.89754472,  897.0961391 ,\n",
       "        323.3516452 , 1156.30097518,  799.28842736, 1296.99998878,\n",
       "        140.37785004,  504.34619302,  860.29698825,  912.61478598,\n",
       "       1083.3621038 ,  872.22442626,  165.30493057,  723.17621652,\n",
       "        904.95682019,  658.54288366,  293.86685692, 1147.16123488,\n",
       "        347.46502737,  939.71571327, 1029.16737912,  845.56400179,\n",
       "        303.90460894,  808.68271702,  576.42751158,  346.01935082,\n",
       "       1100.53819829, 1269.36312988,  408.81719388,  174.39760242,\n",
       "        757.24207576,  764.95680721,  695.54589553,  918.40885258,\n",
       "       1224.25312877, 1541.64219553,  810.09888941,  300.30862148,\n",
       "        842.60158922,  585.51112204, 1313.613167  ,  360.94523227,\n",
       "       1183.06224363,  468.74705857, 1081.76393074,  702.74039571,\n",
       "        730.512082  ,  629.54111973, 1035.48945683,  893.25468204,\n",
       "       1238.13873127,  958.94040125,  609.86877626, 1008.93601856,\n",
       "        773.63315857,  776.15112063,  277.24128899,  268.79157432,\n",
       "       1209.08908681, 1158.71531394,  811.14076627,  186.55026405,\n",
       "        225.15217889, 1460.07705514,  681.03642779,  212.8856848 ,\n",
       "       1672.98552643,  300.94639507,  690.36786064,  834.05156575,\n",
       "       1004.73678668, 1156.87278602,  537.78602137,  184.77776138,\n",
       "        685.34465355,  258.12542078,  826.74579635, 1088.65570951,\n",
       "        284.0045511 ,  805.54183965,  448.12598443, 1093.26012639,\n",
       "        629.48593769, 1010.4092002 , 1188.82927307,  493.18918527,\n",
       "        382.32435631, 1251.10911902,  386.29089745, 1273.89234184,\n",
       "       1754.79639151,  379.45370932, 1125.49484041, 1692.14462006,\n",
       "       1045.16841465,  896.04223949,  321.30020396, 1062.20931979,\n",
       "        502.08943269,  499.45808907,  737.48472284,  586.39169945,\n",
       "        172.7986359 ,  716.02477158,  757.54203573, 1626.02401601,\n",
       "        798.24100047,  381.44541926, 1610.10181004,  426.85761265,\n",
       "       1673.51142506, 1002.61654795,  471.90291981,  867.6786881 ,\n",
       "        507.42258542,  565.52169695,  154.33669802,  837.81375559])"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds_dtr= reg.predict(X_test)\n",
    "preds_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "22a29e9c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtr.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "04254952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "777"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "dfb57ae6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [2019-01-30 00:00:00, 2019-01-31 00:00:00, 2019-02-01 00:00:00, 2019-02-02 00:00:00, 2019-02-03 00:00:00, 2019-02-04 00:00:00, 2019-02-05 00:00:00, 2019-02-06 00:00:00, 2019-02-07 00:00:00, 2019-02-08 00:00:00, 2019-02-09 00:00:00, 2019-02-10 00:00:00, 2019-02-11 00:00:00, 2019-02-12 00:00:00, 2019-02-13 00:00:00, 2019-02-14 00:00:00, 2019-02-15 00:00:00, 2019-02-16 00:00:00, 2019-02-17 00:00:00, 2019-02-18 00:00:00, 2019-02-19 00:00:00, 2019-02-20 00:00:00, 2019-02-21 00:00:00, 2019-02-22 00:00:00, 2019-02-23 00:00:00, 2019-02-24 00:00:00, 2019-02-25 00:00:00, 2019-02-26 00:00:00, 2019-02-27 00:00:00, 2019-02-28 00:00:00, 2019-03-01 00:00:00, 2019-03-02 00:00:00, 2019-03-03 00:00:00, 2019-03-04 00:00:00, 2019-03-05 00:00:00, 2019-03-06 00:00:00, 2019-03-07 00:00:00, 2019-03-08 00:00:00, 2019-03-09 00:00:00, 2019-03-10 00:00:00, 2019-03-11 00:00:00, 2019-03-12 00:00:00, 2019-03-13 00:00:00, 2019-03-14 00:00:00, 2019-03-15 00:00:00, 2019-03-16 00:00:00, 2019-03-17 00:00:00, 2019-03-18 00:00:00, 2019-03-19 00:00:00, 2019-03-20 00:00:00, 2019-03-21 00:00:00, 2019-03-22 00:00:00, 2019-03-23 00:00:00, 2019-03-24 00:00:00, 2019-03-25 00:00:00, 2019-03-26 00:00:00, 2019-03-27 00:00:00, 2019-03-28 00:00:00, 2019-03-29 00:00:00, 2019-03-30 00:00:00, 2019-03-31 00:00:00, 2019-04-01 00:00:00, 2019-04-02 00:00:00, 2019-04-03 00:00:00, 2019-04-04 00:00:00, 2019-04-05 00:00:00, 2019-04-06 00:00:00, 2019-04-07 00:00:00, 2019-04-08 00:00:00, 2019-04-09 00:00:00, 2019-04-10 00:00:00, 2019-04-11 00:00:00, 2019-04-12 00:00:00, 2019-04-13 00:00:00, 2019-04-14 00:00:00, 2019-04-15 00:00:00, 2019-04-16 00:00:00, 2019-04-17 00:00:00, 2019-04-18 00:00:00, 2019-04-19 00:00:00, 2019-04-20 00:00:00, 2019-04-21 00:00:00, 2019-04-22 00:00:00, 2019-04-23 00:00:00, 2019-04-24 00:00:00, 2019-04-25 00:00:00, 2019-04-26 00:00:00, 2019-04-27 00:00:00, 2019-04-28 00:00:00, 2019-04-29 00:00:00, 2019-04-30 00:00:00, 2019-05-01 00:00:00, 2019-05-02 00:00:00, 2019-05-03 00:00:00, 2019-05-04 00:00:00, 2019-05-05 00:00:00, 2019-05-06 00:00:00, 2019-05-07 00:00:00, 2019-05-08 00:00:00, 2019-05-09 00:00:00, ...]\n",
       "\n",
       "[1037 rows x 0 columns]"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_dtr= pd.DataFrame(index=X.index)\n",
    "comp_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "23f8749f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date\n",
       "2019-01-30     117.0\n",
       "2019-01-31     109.0\n",
       "2019-02-01      86.0\n",
       "2019-02-02     102.0\n",
       "2019-02-03      86.0\n",
       "               ...  \n",
       "2021-11-27    1141.0\n",
       "2021-11-28    1141.0\n",
       "2021-11-29    1738.5\n",
       "2021-11-30    1738.5\n",
       "2021-12-01    1156.0\n",
       "Name: y_true, Length: 1037, dtype: float64"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_dtr['y_true']= y.values\n",
    "comp_dtr['y_true']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "8507440a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " nan,\n",
       " 1202.4349392779502,\n",
       " 483.9581625510459,\n",
       " 732.9896789154229,\n",
       " 1589.533017268759,\n",
       " 606.5534299342636,\n",
       " 1463.630420263906,\n",
       " 752.4781408854441,\n",
       " 778.0241738410876,\n",
       " 453.8706305995628,\n",
       " 301.2837063315354,\n",
       " 1087.8707770010485,\n",
       " 429.527432239859,\n",
       " 771.270184547671,\n",
       " 1736.5865983623844,\n",
       " 1141.6017049140737,\n",
       " 1003.6914730453582,\n",
       " 943.663439038108,\n",
       " 503.70443652023744,\n",
       " 368.1396275957401,\n",
       " 700.8277049863457,\n",
       " 284.7307046046428,\n",
       " 556.6000933439268,\n",
       " 436.7851548748635,\n",
       " 704.4651971855113,\n",
       " 1115.2887907409904,\n",
       " 907.7035287118808,\n",
       " 1307.5814023223554,\n",
       " 885.782532703027,\n",
       " 902.2443076816725,\n",
       " 550.7178023825694,\n",
       " 891.1876013470279,\n",
       " 1009.5659192530127,\n",
       " 353.0258916854593,\n",
       " 1065.849548773366,\n",
       " 198.487476929059,\n",
       " 498.48000746077196,\n",
       " 505.4118540051152,\n",
       " 551.5046950225992,\n",
       " 259.293273523623,\n",
       " 1045.303325245884,\n",
       " 112.4803322794331,\n",
       " 106.35496328276585,\n",
       " 1316.326806775121,\n",
       " 759.778079814054,\n",
       " 624.4343209036191,\n",
       " 597.5980019686072,\n",
       " 278.1092534166251,\n",
       " 351.83255325040005,\n",
       " 762.167124914231,\n",
       " 818.5032375351088,\n",
       " 533.1252226682836,\n",
       " 618.987114666258,\n",
       " 1391.9314528066639,\n",
       " 1186.301730785505,\n",
       " 1100.1414982717015,\n",
       " 398.5444172593007,\n",
       " 940.5407858520358,\n",
       " 438.61906113537185,\n",
       " 211.99871804848522,\n",
       " 933.6043967841086,\n",
       " 1123.7061147819818,\n",
       " 263.0077109958337,\n",
       " 893.3384252097202,\n",
       " 247.9497059154965,\n",
       " 806.0541091109899,\n",
       " 858.690176897375,\n",
       " 1058.7894776436617,\n",
       " 455.3353424493896,\n",
       " 621.1707456251739,\n",
       " 380.21789207302584,\n",
       " 338.14380148678885,\n",
       " 800.2488081742708,\n",
       " 271.7100837605953,\n",
       " 392.66921641617034,\n",
       " 1270.4539010213077,\n",
       " 802.6217610832628,\n",
       " 916.0204025135332,\n",
       " 1169.37706357429,\n",
       " 641.7135956346032,\n",
       " 260.77163379930334,\n",
       " 1501.1325532804162,\n",
       " 1861.395213193899,\n",
       " 961.9190086666509,\n",
       " 266.74136334081965,\n",
       " 1018.2353143823941,\n",
       " 528.7209532497856,\n",
       " 331.9596712455051,\n",
       " 757.6399012533077,\n",
       " 818.494301725672,\n",
       " 1417.1923240396707,\n",
       " 1126.166019229544,\n",
       " 662.9310231862701,\n",
       " 1413.895987365769,\n",
       " 1031.8033062985967,\n",
       " 520.6561685674166,\n",
       " 1108.0799040587826,\n",
       " 1071.2043311156542,\n",
       " 579.8316235996084,\n",
       " 1154.8650377810604,\n",
       " 550.3715288659267,\n",
       " 390.9284571524513,\n",
       " 1320.5095893101998,\n",
       " 900.5582467409215,\n",
       " 1021.255385742096,\n",
       " 299.9954289979233,\n",
       " 289.912683439911,\n",
       " 927.7979221394036,\n",
       " 489.62301134508994,\n",
       " 125.99463493350822,\n",
       " 886.9848284355268,\n",
       " 544.3521953922384,\n",
       " 687.6416430745022,\n",
       " 1063.362904751721,\n",
       " 943.3501837524361,\n",
       " 1164.1724283861274,\n",
       " 315.92950753023274,\n",
       " 123.72362260988439,\n",
       " 975.1805720885857,\n",
       " 1222.9039068596314,\n",
       " 891.5339690825109,\n",
       " 1161.1489575995565,\n",
       " 753.293419085042,\n",
       " 405.57918370778145,\n",
       " 1350.1886418422594,\n",
       " 357.86052086742825,\n",
       " 157.0481478950541,\n",
       " 850.8685013281174,\n",
       " 402.61015914802357,\n",
       " 1140.1593378524008,\n",
       " 131.70402785261905,\n",
       " 1440.0249955421302,\n",
       " 254.79032541777138,\n",
       " 1160.7466017089598,\n",
       " 678.9199074305305,\n",
       " 723.238920912564,\n",
       " 1296.3740006114806,\n",
       " 1548.6879530285007,\n",
       " 1389.7254845092932,\n",
       " 955.263848048729,\n",
       " 512.7879043790597,\n",
       " 829.7982753456165,\n",
       " 254.92812864870166,\n",
       " 473.89754471740264,\n",
       " 897.0961390974172,\n",
       " 323.35164520409705,\n",
       " 1156.3009751845184,\n",
       " 799.2884273615035,\n",
       " 1296.999988780986,\n",
       " 140.3778500408215,\n",
       " 504.3461930171361,\n",
       " 860.2969882500809,\n",
       " 912.614785976075,\n",
       " 1083.3621038024462,\n",
       " 872.2244262613983,\n",
       " 165.30493057007214,\n",
       " 723.1762165200473,\n",
       " 904.9568201880653,\n",
       " 658.5428836562259,\n",
       " 293.8668569210631,\n",
       " 1147.1612348773717,\n",
       " 347.46502737037605,\n",
       " 939.7157132741931,\n",
       " 1029.1673791183284,\n",
       " 845.5640017921806,\n",
       " 303.9046089423533,\n",
       " 808.6827170173349,\n",
       " 576.4275115783964,\n",
       " 346.0193508154657,\n",
       " 1100.538198294874,\n",
       " 1269.3631298794232,\n",
       " 408.81719387500715,\n",
       " 174.39760242215368,\n",
       " 757.242075762749,\n",
       " 764.9568072132477,\n",
       " 695.5458955272289,\n",
       " 918.4088525761784,\n",
       " 1224.2531287657066,\n",
       " 1541.6421955294836,\n",
       " 810.0988894056943,\n",
       " 300.308621482193,\n",
       " 842.6015892164231,\n",
       " 585.5111220377845,\n",
       " 1313.613166997239,\n",
       " 360.94523227236476,\n",
       " 1183.062243626001,\n",
       " 468.74705857097456,\n",
       " 1081.763930742655,\n",
       " 702.7403957130396,\n",
       " 730.5120819999213,\n",
       " 629.541119730385,\n",
       " 1035.4894568295222,\n",
       " 893.2546820366774,\n",
       " 1238.1387312730444,\n",
       " 958.9404012462396,\n",
       " 609.8687762566201,\n",
       " 1008.9360185601697,\n",
       " 773.6331585684595,\n",
       " 776.1511206252648,\n",
       " 277.24128899054574,\n",
       " 268.79157432047805,\n",
       " 1209.0890868109404,\n",
       " 1158.7153139394375,\n",
       " 811.140766274073,\n",
       " 186.55026405293071,\n",
       " 225.15217889033045,\n",
       " 1460.0770551367757,\n",
       " 681.0364277861655,\n",
       " 212.885684803019,\n",
       " 1672.9855264258329,\n",
       " 300.9463950726909,\n",
       " 690.3678606419315,\n",
       " 834.0515657482291,\n",
       " 1004.7367866810646,\n",
       " 1156.872786016983,\n",
       " 537.7860213727993,\n",
       " 184.77776138193425,\n",
       " 685.3446535541103,\n",
       " 258.1254207816899,\n",
       " 826.7457963485641,\n",
       " 1088.6557095077694,\n",
       " 284.004551095036,\n",
       " 805.5418396468142,\n",
       " 448.12598443181616,\n",
       " ...]"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fill the prediction blank positions with nan, concat with 'preds' values  \n",
    "pred_dtr= [np.nan]* X_train.shape[0] + list(preds_dtr)\n",
    "pred_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "bfc5a069",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y_true</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>117.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-31</th>\n",
       "      <td>109.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-01</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-27</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>867.678688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-28</th>\n",
       "      <td>1141.0</td>\n",
       "      <td>507.422585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-29</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>565.521697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-30</th>\n",
       "      <td>1738.5</td>\n",
       "      <td>154.336698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>1156.0</td>\n",
       "      <td>837.813756</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            y_true       preds\n",
       "date                          \n",
       "2019-01-30   117.0         NaN\n",
       "2019-01-31   109.0         NaN\n",
       "2019-02-01    86.0         NaN\n",
       "2019-02-02   102.0         NaN\n",
       "2019-02-03    86.0         NaN\n",
       "...            ...         ...\n",
       "2021-11-27  1141.0  867.678688\n",
       "2021-11-28  1141.0  507.422585\n",
       "2021-11-29  1738.5  565.521697\n",
       "2021-11-30  1738.5  154.336698\n",
       "2021-12-01  1156.0  837.813756\n",
       "\n",
       "[1037 rows x 2 columns]"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add preds into the df\n",
    "comp_dtr['preds'] = pred_dtr\n",
    "comp_dtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "8b6650b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comp_dtr.plot(figsize=(15,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f372afa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdf28054",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
